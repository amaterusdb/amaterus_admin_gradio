# Generated by ariadne-codegen on 2023-10-02 11:55
# Source: queries/

from typing import Any, Dict, Optional, Union

from .base_client import BaseClient
from .base_model import UNSET, UnsetType
from .create_game import CreateGame
from .create_program import CreateProgram
from .create_program_niconico_video import CreateProgramNiconicoVideo
from .create_program_person import CreateProgramPerson
from .create_program_twitter_announcement import CreateProgramTwitterAnnouncement
from .create_program_youtube_live_live_archive import (
    CreateProgramYoutubeLiveLiveArchive,
)
from .create_program_youtube_video_live_archive import (
    CreateProgramYoutubeVideoLiveArchive,
)
from .get_create_program_initial_data import GetCreateProgramInitialData
from .get_create_program_niconico_video_initial_data import (
    GetCreateProgramNiconicoVideoInitialData,
)
from .get_create_program_person_initial_data import GetCreateProgramPersonInitialData
from .get_create_program_twitter_announcement_initial_data import (
    GetCreateProgramTwitterAnnouncementInitialData,
)
from .get_create_program_youtube_live_live_archive_initial_data import (
    GetCreateProgramYoutubeLiveLiveArchiveInitialData,
)
from .get_create_program_youtube_video_live_archive_initial_data import (
    GetCreateProgramYoutubeVideoLiveArchiveInitialData,
)
from .get_program_project_list_by_project_id import GetProgramProjectListByProjectId
from .get_twitter_account_by_screen_name import GetTwitterAccountByScreenName


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def create_game(
        self,
        name: str,
        steam_url: Union[Optional[str], UnsetType] = UNSET,
        epic_games_url: Union[Optional[str], UnsetType] = UNSET,
        nintendo_switch_url: Union[Optional[str], UnsetType] = UNSET,
        playstation_url: Union[Optional[str], UnsetType] = UNSET,
        google_play_store_url: Union[Optional[str], UnsetType] = UNSET,
        apple_app_store_url: Union[Optional[str], UnsetType] = UNSET,
        website_url: Union[Optional[str], UnsetType] = UNSET,
    ) -> CreateGame:
        query = gql(
            """
            mutation CreateGame($name: String!, $steam_url: String, $epic_games_url: String, $nintendo_switch_url: String, $playstation_url: String, $google_play_store_url: String, $apple_app_store_url: String, $website_url: String) {
              game: insert_games_one(
                object: {name: $name, steam_url: $steam_url, epic_games_url: $epic_games_url, nintendo_switch_url: $nintendo_switch_url, playstation_url: $playstation_url, google_play_store_url: $google_play_store_url, apple_app_store_url: $apple_app_store_url, website_url: $website_url}
              ) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "name": name,
            "steam_url": steam_url,
            "epic_games_url": epic_games_url,
            "nintendo_switch_url": nintendo_switch_url,
            "playstation_url": playstation_url,
            "google_play_store_url": google_play_store_url,
            "apple_app_store_url": apple_app_store_url,
            "website_url": website_url,
        }
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CreateGame.model_validate(data)

    def create_program(
        self,
        project_id: Any,
        title: str,
        game_id: Union[Optional[Any], UnsetType] = UNSET,
        start_time: Union[Optional[Any], UnsetType] = UNSET,
        end_time: Union[Optional[Any], UnsetType] = UNSET,
    ) -> CreateProgram:
        query = gql(
            """
            mutation CreateProgram($project_id: uuid!, $game_id: uuid, $title: String!, $start_time: timestamptz, $end_time: timestamptz) {
              program: insert_programs_one(
                object: {game_id: $game_id, title: $title, start_time: $start_time, end_time: $end_time, program_projects: {data: {project_id: $project_id}}}
              ) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "project_id": project_id,
            "game_id": game_id,
            "title": title,
            "start_time": start_time,
            "end_time": end_time,
        }
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CreateProgram.model_validate(data)

    def create_program_niconico_video(
        self,
        project_id: Any,
        program_id: Any,
        person_id: Any,
        remote_niconico_content_id: str,
        title: str,
        start_time: Any,
        thumbnail_url: str,
        remote_niconico_account_id: str,
        niconico_account_name: str,
    ) -> CreateProgramNiconicoVideo:
        query = gql(
            """
            mutation CreateProgramNiconicoVideo($projectId: uuid!, $programId: uuid!, $personId: uuid!, $remoteNiconicoContentId: String!, $title: String!, $startTime: timestamptz!, $thumbnailUrl: String!, $remoteNiconicoAccountId: String!, $niconicoAccountName: String!) {
              program_niconico_video: insert_program_niconico_videos_one(
                object: {program_id: $programId, person_id: $personId, niconico_video: {data: {remote_niconico_content_id: $remoteNiconicoContentId, title: $title, start_time: $startTime, thumbnail_url: $thumbnailUrl, niconico_account: {data: {remote_niconico_account_id: $remoteNiconicoAccountId, name: $niconicoAccountName}, on_conflict: {constraint: niconico_accounts_remote_niconico_account_id_key, update_columns: [name]}}, project_niconico_videos: {data: {project_id: $projectId}, on_conflict: {constraint: project_niconico_videos_project_id_niconico_video_id_key, update_columns: [project_id, niconico_video_id]}}}, on_conflict: {constraint: niconico_videos_remote_niconico_content_id_key, update_columns: [title, start_time, thumbnail_url]}}}
              ) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "projectId": project_id,
            "programId": program_id,
            "personId": person_id,
            "remoteNiconicoContentId": remote_niconico_content_id,
            "title": title,
            "startTime": start_time,
            "thumbnailUrl": thumbnail_url,
            "remoteNiconicoAccountId": remote_niconico_account_id,
            "niconicoAccountName": niconico_account_name,
        }
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CreateProgramNiconicoVideo.model_validate(data)

    def create_program_person(
        self,
        program_id: Any,
        person_id: Any,
        is_absent: Union[Optional[bool], UnsetType] = UNSET,
    ) -> CreateProgramPerson:
        query = gql(
            """
            mutation CreateProgramPerson($program_id: uuid!, $person_id: uuid!, $is_absent: Boolean) {
              program_person: insert_program_persons_one(
                object: {program_id: $program_id, person_id: $person_id, is_absent: $is_absent}
                on_conflict: {constraint: program_persons_program_id_person_id_key, update_columns: [is_absent]}
              ) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "program_id": program_id,
            "person_id": person_id,
            "is_absent": is_absent,
        }
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CreateProgramPerson.model_validate(data)

    def create_program_twitter_announcement(
        self,
        program_id: Any,
        person_id: Any,
        remote_tweet_id: str,
        twitter_account_id: Any,
        tweet_time: Any,
        tweet_embed_html: str,
        twitter_tweet_image_index: int,
        twitter_tweet_image_url: str,
    ) -> CreateProgramTwitterAnnouncement:
        query = gql(
            """
            mutation CreateProgramTwitterAnnouncement($programId: uuid!, $personId: uuid!, $remoteTweetId: String!, $twitterAccountId: uuid!, $tweetTime: timestamptz!, $tweetEmbedHtml: String!, $twitterTweetImageIndex: Int!, $twitterTweetImageUrl: String!) {
              program_twitter_announcement: insert_program_twitter_announcements_one(
                object: {program_id: $programId, person_id: $personId, twitter_tweet: {data: {remote_tweet_id: $remoteTweetId, tweet_time: $tweetTime, tweet_embed_html: $tweetEmbedHtml, twitter_account_id: $twitterAccountId, twitter_tweet_images: {data: {index: $twitterTweetImageIndex, url: $twitterTweetImageUrl}, on_conflict: {constraint: twitter_tweet_images_tweet_id_index_key, update_columns: [index, url]}}}, on_conflict: {constraint: twitter_tweets_remote_tweet_id_key, update_columns: [tweet_time, tweet_embed_html]}}}
              ) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "programId": program_id,
            "personId": person_id,
            "remoteTweetId": remote_tweet_id,
            "twitterAccountId": twitter_account_id,
            "tweetTime": tweet_time,
            "tweetEmbedHtml": tweet_embed_html,
            "twitterTweetImageIndex": twitter_tweet_image_index,
            "twitterTweetImageUrl": twitter_tweet_image_url,
        }
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CreateProgramTwitterAnnouncement.model_validate(data)

    def create_program_youtube_live_live_archive(
        self,
        program_id: Any,
        person_id: Any,
        remote_youtube_video_id: str,
        title: str,
        remote_youtube_channel_id: str,
        youtube_channel_name: str,
        start_time: Union[Optional[Any], UnsetType] = UNSET,
        end_time: Union[Optional[Any], UnsetType] = UNSET,
    ) -> CreateProgramYoutubeLiveLiveArchive:
        query = gql(
            """
            mutation CreateProgramYoutubeLiveLiveArchive($programId: uuid!, $personId: uuid!, $startTime: timestamptz, $endTime: timestamptz, $remoteYoutubeVideoId: String!, $title: String!, $remoteYoutubeChannelId: String!, $youtubeChannelName: String!) {
              program_live_archive: insert_program_live_archives_one(
                object: {program_id: $programId, person_id: $personId, start_time: $startTime, end_time: $endTime, youtube_live: {data: {remote_youtube_video_id: $remoteYoutubeVideoId, title: $title, start_time: $startTime, end_time: $endTime, youtube_channel: {data: {remote_youtube_channel_id: $remoteYoutubeChannelId, name: $youtubeChannelName}, on_conflict: {constraint: youtube_channels_youtube_channel_id_key, update_columns: [name]}}}, on_conflict: {constraint: youtube_lives_remote_youtube_video_id_key, update_columns: [title, start_time, end_time]}}}
              ) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "programId": program_id,
            "personId": person_id,
            "startTime": start_time,
            "endTime": end_time,
            "remoteYoutubeVideoId": remote_youtube_video_id,
            "title": title,
            "remoteYoutubeChannelId": remote_youtube_channel_id,
            "youtubeChannelName": youtube_channel_name,
        }
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CreateProgramYoutubeLiveLiveArchive.model_validate(data)

    def create_program_youtube_video_live_archive(
        self,
        program_id: Any,
        person_id: Any,
        post_time: Any,
        start_time: Any,
        end_time: Any,
        remote_youtube_video_id: str,
        title: str,
        is_premiere: bool,
        remote_youtube_channel_id: str,
        youtube_channel_name: str,
    ) -> CreateProgramYoutubeVideoLiveArchive:
        query = gql(
            """
            mutation CreateProgramYoutubeVideoLiveArchive($programId: uuid!, $personId: uuid!, $postTime: timestamptz!, $startTime: timestamptz!, $endTime: timestamptz!, $remoteYoutubeVideoId: String!, $title: String!, $isPremiere: Boolean!, $remoteYoutubeChannelId: String!, $youtubeChannelName: String!) {
              program_live_archive: insert_program_live_archives_one(
                object: {program_id: $programId, person_id: $personId, start_time: $startTime, end_time: $endTime, youtube_video: {data: {remote_youtube_video_id: $remoteYoutubeVideoId, title: $title, post_time: $postTime, is_premiere: $isPremiere, youtube_channel: {data: {remote_youtube_channel_id: $remoteYoutubeChannelId, name: $youtubeChannelName}, on_conflict: {constraint: youtube_channels_youtube_channel_id_key, update_columns: [name]}}}, on_conflict: {constraint: youtube_videos_remote_youtube_video_id_key, update_columns: [title, post_time, is_premiere]}}}
              ) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "programId": program_id,
            "personId": person_id,
            "postTime": post_time,
            "startTime": start_time,
            "endTime": end_time,
            "remoteYoutubeVideoId": remote_youtube_video_id,
            "title": title,
            "isPremiere": is_premiere,
            "remoteYoutubeChannelId": remote_youtube_channel_id,
            "youtubeChannelName": youtube_channel_name,
        }
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CreateProgramYoutubeVideoLiveArchive.model_validate(data)

    def get_create_program_niconico_video_initial_data(
        self,
    ) -> GetCreateProgramNiconicoVideoInitialData:
        query = gql(
            """
            query GetCreateProgramNiconicoVideoInitialData {
              project_list: projects {
                id
                name
              }
              person_list: persons {
                id
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetCreateProgramNiconicoVideoInitialData.model_validate(data)

    def get_create_program_person_initial_data(
        self,
    ) -> GetCreateProgramPersonInitialData:
        query = gql(
            """
            query GetCreateProgramPersonInitialData {
              project_list: projects {
                id
                name
              }
              person_list: persons {
                id
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetCreateProgramPersonInitialData.model_validate(data)

    def get_create_program_initial_data(self) -> GetCreateProgramInitialData:
        query = gql(
            """
            query GetCreateProgramInitialData {
              project_list: projects {
                id
                name
              }
              game_list: games {
                id
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetCreateProgramInitialData.model_validate(data)

    def get_create_program_twitter_announcement_initial_data(
        self,
    ) -> GetCreateProgramTwitterAnnouncementInitialData:
        query = gql(
            """
            query GetCreateProgramTwitterAnnouncementInitialData {
              project_list: projects {
                id
                name
              }
              person_list: persons {
                id
                name
              }
              twitter_account_list: twitter_accounts {
                id
                twitter_screen_name
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetCreateProgramTwitterAnnouncementInitialData.model_validate(data)

    def get_create_program_youtube_live_live_archive_initial_data(
        self,
    ) -> GetCreateProgramYoutubeLiveLiveArchiveInitialData:
        query = gql(
            """
            query GetCreateProgramYoutubeLiveLiveArchiveInitialData {
              project_list: projects {
                id
                name
              }
              person_list: persons {
                id
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetCreateProgramYoutubeLiveLiveArchiveInitialData.model_validate(data)

    def get_create_program_youtube_video_live_archive_initial_data(
        self,
    ) -> GetCreateProgramYoutubeVideoLiveArchiveInitialData:
        query = gql(
            """
            query GetCreateProgramYoutubeVideoLiveArchiveInitialData {
              project_list: projects {
                id
                name
              }
              person_list: persons {
                id
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetCreateProgramYoutubeVideoLiveArchiveInitialData.model_validate(data)

    def get_program_project_list_by_project_id(
        self, project_id: Any
    ) -> GetProgramProjectListByProjectId:
        query = gql(
            """
            query GetProgramProjectListByProjectId($projectId: uuid!) {
              project: projects_by_pk(id: $projectId) {
                program_project_list: program_projects(order_by: {program: {start_time: desc}}) {
                  program {
                    id
                    title
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"projectId": project_id}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetProgramProjectListByProjectId.model_validate(data)

    def get_twitter_account_by_screen_name(
        self, twitter_screen_name: str
    ) -> GetTwitterAccountByScreenName:
        query = gql(
            """
            query GetTwitterAccountByScreenName($twitterScreenName: String!) {
              twitter_account_list: twitter_accounts(
                where: {twitter_screen_name: {_eq: $twitterScreenName}}
                order_by: {name: asc}
                limit: 1
              ) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {"twitterScreenName": twitter_screen_name}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetTwitterAccountByScreenName.model_validate(data)

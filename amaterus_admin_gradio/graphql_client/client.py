# Generated by ariadne-codegen on 2023-09-24 22:12
# Source: queries/

from typing import Any, Dict, Optional, Union

from .base_client import BaseClient
from .base_model import UNSET, UnsetType
from .create_program_youtube_live_live_archive import (
    CreateProgramYoutubeLiveLiveArchive,
)
from .get_program_project_list_by_project_id import GetProgramProjectListByProjectId


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def create_program_youtube_live_live_archive(
        self,
        program_id: Any,
        person_id: Any,
        remote_youtube_video_id: str,
        title: str,
        remote_youtube_channel_id: str,
        youtube_channel_name: str,
        start_time: Union[Optional[Any], UnsetType] = UNSET,
        end_time: Union[Optional[Any], UnsetType] = UNSET,
    ) -> CreateProgramYoutubeLiveLiveArchive:
        query = gql(
            """
            mutation CreateProgramYoutubeLiveLiveArchive($programId: uuid!, $personId: uuid!, $startTime: timestamptz, $endTime: timestamptz, $remoteYoutubeVideoId: String!, $title: String!, $remoteYoutubeChannelId: String!, $youtubeChannelName: String!) {
              program_live_archive: insert_program_live_archives_one(
                object: {program_id: $programId, person_id: $personId, start_time: $startTime, end_time: $endTime, youtube_live: {data: {remote_youtube_video_id: $remoteYoutubeVideoId, title: $title, start_time: $startTime, end_time: $endTime, youtube_channel: {data: {remote_youtube_channel_id: $remoteYoutubeChannelId, name: $youtubeChannelName}, on_conflict: {constraint: youtube_channels_youtube_channel_id_key, update_columns: [name]}}}, on_conflict: {constraint: youtube_lives_remote_youtube_video_id_key, update_columns: [title, start_time, end_time]}}}
              ) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "programId": program_id,
            "personId": person_id,
            "startTime": start_time,
            "endTime": end_time,
            "remoteYoutubeVideoId": remote_youtube_video_id,
            "title": title,
            "remoteYoutubeChannelId": remote_youtube_channel_id,
            "youtubeChannelName": youtube_channel_name,
        }
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CreateProgramYoutubeLiveLiveArchive.model_validate(data)

    def get_program_project_list_by_project_id(
        self, project_id: Any
    ) -> GetProgramProjectListByProjectId:
        query = gql(
            """
            query GetProgramProjectListByProjectId($projectId: uuid!) {
              project: projects_by_pk(id: $projectId) {
                program_project_list: program_projects(order_by: {program: {start_time: desc}}) {
                  program {
                    id
                    title
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"projectId": project_id}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetProgramProjectListByProjectId.model_validate(data)

schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "amongus_maps"
"""
type amongus_maps {
  created_at: timestamptz!
  id: uuid!
  is_vanilla: Boolean!

  """An object relationship"""
  mod: amongus_mods
  mod_id: uuid
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "amongus_maps"
"""
type amongus_maps_aggregate {
  aggregate: amongus_maps_aggregate_fields
  nodes: [amongus_maps!]!
}

input amongus_maps_aggregate_bool_exp {
  bool_and: amongus_maps_aggregate_bool_exp_bool_and
  bool_or: amongus_maps_aggregate_bool_exp_bool_or
  count: amongus_maps_aggregate_bool_exp_count
}

input amongus_maps_aggregate_bool_exp_bool_and {
  arguments: amongus_maps_select_column_amongus_maps_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: amongus_maps_bool_exp
  predicate: Boolean_comparison_exp!
}

input amongus_maps_aggregate_bool_exp_bool_or {
  arguments: amongus_maps_select_column_amongus_maps_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: amongus_maps_bool_exp
  predicate: Boolean_comparison_exp!
}

input amongus_maps_aggregate_bool_exp_count {
  arguments: [amongus_maps_select_column!]
  distinct: Boolean
  filter: amongus_maps_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "amongus_maps"
"""
type amongus_maps_aggregate_fields {
  count(columns: [amongus_maps_select_column!], distinct: Boolean): Int!
  max: amongus_maps_max_fields
  min: amongus_maps_min_fields
}

"""
order by aggregate values of table "amongus_maps"
"""
input amongus_maps_aggregate_order_by {
  count: order_by
  max: amongus_maps_max_order_by
  min: amongus_maps_min_order_by
}

"""
input type for inserting array relation for remote table "amongus_maps"
"""
input amongus_maps_arr_rel_insert_input {
  data: [amongus_maps_insert_input!]!

  """upsert condition"""
  on_conflict: amongus_maps_on_conflict
}

"""
Boolean expression to filter rows from the table "amongus_maps". All fields are combined with a logical 'AND'.
"""
input amongus_maps_bool_exp {
  _and: [amongus_maps_bool_exp!]
  _not: amongus_maps_bool_exp
  _or: [amongus_maps_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  is_vanilla: Boolean_comparison_exp
  mod: amongus_mods_bool_exp
  mod_id: uuid_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "amongus_maps"
"""
enum amongus_maps_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  maps_pkey
}

"""
input type for inserting data into table "amongus_maps"
"""
input amongus_maps_insert_input {
  created_at: timestamptz
  id: uuid
  is_vanilla: Boolean
  mod: amongus_mods_obj_rel_insert_input
  mod_id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type amongus_maps_max_fields {
  created_at: timestamptz
  id: uuid
  mod_id: uuid
  name: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "amongus_maps"
"""
input amongus_maps_max_order_by {
  created_at: order_by
  id: order_by
  mod_id: order_by
  name: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type amongus_maps_min_fields {
  created_at: timestamptz
  id: uuid
  mod_id: uuid
  name: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "amongus_maps"
"""
input amongus_maps_min_order_by {
  created_at: order_by
  id: order_by
  mod_id: order_by
  name: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "amongus_maps"
"""
type amongus_maps_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [amongus_maps!]!
}

"""
input type for inserting object relation for remote table "amongus_maps"
"""
input amongus_maps_obj_rel_insert_input {
  data: amongus_maps_insert_input!

  """upsert condition"""
  on_conflict: amongus_maps_on_conflict
}

"""
on_conflict condition type for table "amongus_maps"
"""
input amongus_maps_on_conflict {
  constraint: amongus_maps_constraint!
  update_columns: [amongus_maps_update_column!]! = []
  where: amongus_maps_bool_exp
}

"""Ordering options when selecting data from "amongus_maps"."""
input amongus_maps_order_by {
  created_at: order_by
  id: order_by
  is_vanilla: order_by
  mod: amongus_mods_order_by
  mod_id: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: amongus_maps"""
input amongus_maps_pk_columns_input {
  id: uuid!
}

"""
select columns of table "amongus_maps"
"""
enum amongus_maps_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  is_vanilla

  """column name"""
  mod_id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
select "amongus_maps_aggregate_bool_exp_bool_and_arguments_columns" columns of table "amongus_maps"
"""
enum amongus_maps_select_column_amongus_maps_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_vanilla
}

"""
select "amongus_maps_aggregate_bool_exp_bool_or_arguments_columns" columns of table "amongus_maps"
"""
enum amongus_maps_select_column_amongus_maps_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_vanilla
}

"""
input type for updating data in table "amongus_maps"
"""
input amongus_maps_set_input {
  created_at: timestamptz
  id: uuid
  is_vanilla: Boolean
  mod_id: uuid
  name: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "amongus_maps"
"""
input amongus_maps_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: amongus_maps_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input amongus_maps_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  is_vanilla: Boolean
  mod_id: uuid
  name: String
  updated_at: timestamptz
}

"""
update columns of table "amongus_maps"
"""
enum amongus_maps_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  is_vanilla

  """column name"""
  mod_id

  """column name"""
  name

  """column name"""
  updated_at
}

input amongus_maps_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: amongus_maps_set_input

  """filter the rows which have to be updated"""
  where: amongus_maps_bool_exp!
}

"""
columns and relationships of "amongus_match_mods"
"""
type amongus_match_mods {
  amongus_match_id: uuid!
  amongus_mod_id: uuid!
  amongus_mod_version_id: uuid
  created_at: timestamptz!
  id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "amongus_match_mods"
"""
type amongus_match_mods_aggregate {
  aggregate: amongus_match_mods_aggregate_fields
  nodes: [amongus_match_mods!]!
}

"""
aggregate fields of "amongus_match_mods"
"""
type amongus_match_mods_aggregate_fields {
  count(columns: [amongus_match_mods_select_column!], distinct: Boolean): Int!
  max: amongus_match_mods_max_fields
  min: amongus_match_mods_min_fields
}

"""
Boolean expression to filter rows from the table "amongus_match_mods". All fields are combined with a logical 'AND'.
"""
input amongus_match_mods_bool_exp {
  _and: [amongus_match_mods_bool_exp!]
  _not: amongus_match_mods_bool_exp
  _or: [amongus_match_mods_bool_exp!]
  amongus_match_id: uuid_comparison_exp
  amongus_mod_id: uuid_comparison_exp
  amongus_mod_version_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "amongus_match_mods"
"""
enum amongus_match_mods_constraint {
  """
  unique or primary key constraint on columns "amongus_mod_id", "amongus_match_id"
  """
  amongus_match_mods_amongus_match_id_amongus_mod_id_key

  """
  unique or primary key constraint on columns "id"
  """
  amongus_match_mods_pkey
}

"""
input type for inserting data into table "amongus_match_mods"
"""
input amongus_match_mods_insert_input {
  amongus_match_id: uuid
  amongus_mod_id: uuid
  amongus_mod_version_id: uuid
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type amongus_match_mods_max_fields {
  amongus_match_id: uuid
  amongus_mod_id: uuid
  amongus_mod_version_id: uuid
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
}

"""aggregate min on columns"""
type amongus_match_mods_min_fields {
  amongus_match_id: uuid
  amongus_mod_id: uuid
  amongus_mod_version_id: uuid
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
}

"""
response of any mutation on the table "amongus_match_mods"
"""
type amongus_match_mods_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [amongus_match_mods!]!
}

"""
on_conflict condition type for table "amongus_match_mods"
"""
input amongus_match_mods_on_conflict {
  constraint: amongus_match_mods_constraint!
  update_columns: [amongus_match_mods_update_column!]! = []
  where: amongus_match_mods_bool_exp
}

"""Ordering options when selecting data from "amongus_match_mods"."""
input amongus_match_mods_order_by {
  amongus_match_id: order_by
  amongus_mod_id: order_by
  amongus_mod_version_id: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
}

"""primary key columns input for table: amongus_match_mods"""
input amongus_match_mods_pk_columns_input {
  id: uuid!
}

"""
select columns of table "amongus_match_mods"
"""
enum amongus_match_mods_select_column {
  """column name"""
  amongus_match_id

  """column name"""
  amongus_mod_id

  """column name"""
  amongus_mod_version_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  updated_at
}

"""
input type for updating data in table "amongus_match_mods"
"""
input amongus_match_mods_set_input {
  amongus_match_id: uuid
  amongus_mod_id: uuid
  amongus_mod_version_id: uuid
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "amongus_match_mods"
"""
input amongus_match_mods_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: amongus_match_mods_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input amongus_match_mods_stream_cursor_value_input {
  amongus_match_id: uuid
  amongus_mod_id: uuid
  amongus_mod_version_id: uuid
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
}

"""
update columns of table "amongus_match_mods"
"""
enum amongus_match_mods_update_column {
  """column name"""
  amongus_match_id

  """column name"""
  amongus_mod_id

  """column name"""
  amongus_mod_version_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  updated_at
}

input amongus_match_mods_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: amongus_match_mods_set_input

  """filter the rows which have to be updated"""
  where: amongus_match_mods_bool_exp!
}

"""リザルト画面でのプレイヤー役職"""
type amongus_match_player_result_roles {
  amongus_match_id: uuid!
  amongus_role_id: uuid!
  amongus_role_index: Int!
  created_at: timestamptz!
  id: uuid!
  person_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "amongus_match_player_result_roles"
"""
type amongus_match_player_result_roles_aggregate {
  aggregate: amongus_match_player_result_roles_aggregate_fields
  nodes: [amongus_match_player_result_roles!]!
}

input amongus_match_player_result_roles_aggregate_bool_exp {
  count: amongus_match_player_result_roles_aggregate_bool_exp_count
}

input amongus_match_player_result_roles_aggregate_bool_exp_count {
  arguments: [amongus_match_player_result_roles_select_column!]
  distinct: Boolean
  filter: amongus_match_player_result_roles_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "amongus_match_player_result_roles"
"""
type amongus_match_player_result_roles_aggregate_fields {
  avg: amongus_match_player_result_roles_avg_fields
  count(columns: [amongus_match_player_result_roles_select_column!], distinct: Boolean): Int!
  max: amongus_match_player_result_roles_max_fields
  min: amongus_match_player_result_roles_min_fields
  stddev: amongus_match_player_result_roles_stddev_fields
  stddev_pop: amongus_match_player_result_roles_stddev_pop_fields
  stddev_samp: amongus_match_player_result_roles_stddev_samp_fields
  sum: amongus_match_player_result_roles_sum_fields
  var_pop: amongus_match_player_result_roles_var_pop_fields
  var_samp: amongus_match_player_result_roles_var_samp_fields
  variance: amongus_match_player_result_roles_variance_fields
}

"""
order by aggregate values of table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_aggregate_order_by {
  avg: amongus_match_player_result_roles_avg_order_by
  count: order_by
  max: amongus_match_player_result_roles_max_order_by
  min: amongus_match_player_result_roles_min_order_by
  stddev: amongus_match_player_result_roles_stddev_order_by
  stddev_pop: amongus_match_player_result_roles_stddev_pop_order_by
  stddev_samp: amongus_match_player_result_roles_stddev_samp_order_by
  sum: amongus_match_player_result_roles_sum_order_by
  var_pop: amongus_match_player_result_roles_var_pop_order_by
  var_samp: amongus_match_player_result_roles_var_samp_order_by
  variance: amongus_match_player_result_roles_variance_order_by
}

"""
input type for inserting array relation for remote table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_arr_rel_insert_input {
  data: [amongus_match_player_result_roles_insert_input!]!

  """upsert condition"""
  on_conflict: amongus_match_player_result_roles_on_conflict
}

"""aggregate avg on columns"""
type amongus_match_player_result_roles_avg_fields {
  amongus_role_index: Float
}

"""
order by avg() on columns of table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_avg_order_by {
  amongus_role_index: order_by
}

"""
Boolean expression to filter rows from the table "amongus_match_player_result_roles". All fields are combined with a logical 'AND'.
"""
input amongus_match_player_result_roles_bool_exp {
  _and: [amongus_match_player_result_roles_bool_exp!]
  _not: amongus_match_player_result_roles_bool_exp
  _or: [amongus_match_player_result_roles_bool_exp!]
  amongus_match_id: uuid_comparison_exp
  amongus_role_id: uuid_comparison_exp
  amongus_role_index: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  person_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "amongus_match_player_result_roles"
"""
enum amongus_match_player_result_roles_constraint {
  """
  unique or primary key constraint on columns "amongus_role_id", "amongus_match_id", "person_id"
  """
  match_result_player_roles_match_id_person_id_player_role_id_key

  """
  unique or primary key constraint on columns "amongus_match_id", "amongus_role_index", "person_id"
  """
  match_result_player_roles_match_id_person_id_player_role_or_key

  """
  unique or primary key constraint on columns "id"
  """
  match_result_player_roles_pkey
}

"""
input type for incrementing numeric columns in table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_inc_input {
  amongus_role_index: Int
}

"""
input type for inserting data into table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_insert_input {
  amongus_match_id: uuid
  amongus_role_id: uuid
  amongus_role_index: Int
  created_at: timestamptz
  id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type amongus_match_player_result_roles_max_fields {
  amongus_match_id: uuid
  amongus_role_id: uuid
  amongus_role_index: Int
  created_at: timestamptz
  id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_max_order_by {
  amongus_match_id: order_by
  amongus_role_id: order_by
  amongus_role_index: order_by
  created_at: order_by
  id: order_by
  person_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type amongus_match_player_result_roles_min_fields {
  amongus_match_id: uuid
  amongus_role_id: uuid
  amongus_role_index: Int
  created_at: timestamptz
  id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_min_order_by {
  amongus_match_id: order_by
  amongus_role_id: order_by
  amongus_role_index: order_by
  created_at: order_by
  id: order_by
  person_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "amongus_match_player_result_roles"
"""
type amongus_match_player_result_roles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [amongus_match_player_result_roles!]!
}

"""
on_conflict condition type for table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_on_conflict {
  constraint: amongus_match_player_result_roles_constraint!
  update_columns: [amongus_match_player_result_roles_update_column!]! = []
  where: amongus_match_player_result_roles_bool_exp
}

"""
Ordering options when selecting data from "amongus_match_player_result_roles".
"""
input amongus_match_player_result_roles_order_by {
  amongus_match_id: order_by
  amongus_role_id: order_by
  amongus_role_index: order_by
  created_at: order_by
  id: order_by
  person_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: amongus_match_player_result_roles"""
input amongus_match_player_result_roles_pk_columns_input {
  id: uuid!
}

"""
select columns of table "amongus_match_player_result_roles"
"""
enum amongus_match_player_result_roles_select_column {
  """column name"""
  amongus_match_id

  """column name"""
  amongus_role_id

  """column name"""
  amongus_role_index

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  person_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_set_input {
  amongus_match_id: uuid
  amongus_role_id: uuid
  amongus_role_index: Int
  created_at: timestamptz
  id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type amongus_match_player_result_roles_stddev_fields {
  amongus_role_index: Float
}

"""
order by stddev() on columns of table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_stddev_order_by {
  amongus_role_index: order_by
}

"""aggregate stddev_pop on columns"""
type amongus_match_player_result_roles_stddev_pop_fields {
  amongus_role_index: Float
}

"""
order by stddev_pop() on columns of table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_stddev_pop_order_by {
  amongus_role_index: order_by
}

"""aggregate stddev_samp on columns"""
type amongus_match_player_result_roles_stddev_samp_fields {
  amongus_role_index: Float
}

"""
order by stddev_samp() on columns of table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_stddev_samp_order_by {
  amongus_role_index: order_by
}

"""
Streaming cursor of the table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: amongus_match_player_result_roles_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input amongus_match_player_result_roles_stream_cursor_value_input {
  amongus_match_id: uuid
  amongus_role_id: uuid
  amongus_role_index: Int
  created_at: timestamptz
  id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type amongus_match_player_result_roles_sum_fields {
  amongus_role_index: Int
}

"""
order by sum() on columns of table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_sum_order_by {
  amongus_role_index: order_by
}

"""
update columns of table "amongus_match_player_result_roles"
"""
enum amongus_match_player_result_roles_update_column {
  """column name"""
  amongus_match_id

  """column name"""
  amongus_role_id

  """column name"""
  amongus_role_index

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  person_id

  """column name"""
  updated_at
}

input amongus_match_player_result_roles_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: amongus_match_player_result_roles_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: amongus_match_player_result_roles_set_input

  """filter the rows which have to be updated"""
  where: amongus_match_player_result_roles_bool_exp!
}

"""aggregate var_pop on columns"""
type amongus_match_player_result_roles_var_pop_fields {
  amongus_role_index: Float
}

"""
order by var_pop() on columns of table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_var_pop_order_by {
  amongus_role_index: order_by
}

"""aggregate var_samp on columns"""
type amongus_match_player_result_roles_var_samp_fields {
  amongus_role_index: Float
}

"""
order by var_samp() on columns of table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_var_samp_order_by {
  amongus_role_index: order_by
}

"""aggregate variance on columns"""
type amongus_match_player_result_roles_variance_fields {
  amongus_role_index: Float
}

"""
order by variance() on columns of table "amongus_match_player_result_roles"
"""
input amongus_match_player_result_roles_variance_order_by {
  amongus_role_index: order_by
}

"""
columns and relationships of "amongus_match_players"
"""
type amongus_match_players {
  """An object relationship"""
  amongus_match: amongus_matches!
  amongus_match_id: uuid!
  created_at: timestamptz!
  id: uuid!
  nickname: String!

  """An object relationship"""
  person: persons
  person_id: uuid
  updated_at: timestamptz!
}

"""
aggregated selection of "amongus_match_players"
"""
type amongus_match_players_aggregate {
  aggregate: amongus_match_players_aggregate_fields
  nodes: [amongus_match_players!]!
}

input amongus_match_players_aggregate_bool_exp {
  count: amongus_match_players_aggregate_bool_exp_count
}

input amongus_match_players_aggregate_bool_exp_count {
  arguments: [amongus_match_players_select_column!]
  distinct: Boolean
  filter: amongus_match_players_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "amongus_match_players"
"""
type amongus_match_players_aggregate_fields {
  count(columns: [amongus_match_players_select_column!], distinct: Boolean): Int!
  max: amongus_match_players_max_fields
  min: amongus_match_players_min_fields
}

"""
order by aggregate values of table "amongus_match_players"
"""
input amongus_match_players_aggregate_order_by {
  count: order_by
  max: amongus_match_players_max_order_by
  min: amongus_match_players_min_order_by
}

"""
input type for inserting array relation for remote table "amongus_match_players"
"""
input amongus_match_players_arr_rel_insert_input {
  data: [amongus_match_players_insert_input!]!

  """upsert condition"""
  on_conflict: amongus_match_players_on_conflict
}

"""
Boolean expression to filter rows from the table "amongus_match_players". All fields are combined with a logical 'AND'.
"""
input amongus_match_players_bool_exp {
  _and: [amongus_match_players_bool_exp!]
  _not: amongus_match_players_bool_exp
  _or: [amongus_match_players_bool_exp!]
  amongus_match: amongus_matches_bool_exp
  amongus_match_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  nickname: String_comparison_exp
  person: persons_bool_exp
  person_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "amongus_match_players"
"""
enum amongus_match_players_constraint {
  """
  unique or primary key constraint on columns "amongus_match_id", "nickname"
  """
  amongus_match_players_match_id_nickname_key

  """
  unique or primary key constraint on columns "amongus_match_id", "person_id"
  """
  amongus_match_players_match_id_person_id_key

  """
  unique or primary key constraint on columns "id"
  """
  amongus_match_players_pkey
}

"""
input type for inserting data into table "amongus_match_players"
"""
input amongus_match_players_insert_input {
  amongus_match: amongus_matches_obj_rel_insert_input
  amongus_match_id: uuid
  created_at: timestamptz
  id: uuid
  nickname: String
  person: persons_obj_rel_insert_input
  person_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type amongus_match_players_max_fields {
  amongus_match_id: uuid
  created_at: timestamptz
  id: uuid
  nickname: String
  person_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "amongus_match_players"
"""
input amongus_match_players_max_order_by {
  amongus_match_id: order_by
  created_at: order_by
  id: order_by
  nickname: order_by
  person_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type amongus_match_players_min_fields {
  amongus_match_id: uuid
  created_at: timestamptz
  id: uuid
  nickname: String
  person_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "amongus_match_players"
"""
input amongus_match_players_min_order_by {
  amongus_match_id: order_by
  created_at: order_by
  id: order_by
  nickname: order_by
  person_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "amongus_match_players"
"""
type amongus_match_players_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [amongus_match_players!]!
}

"""
on_conflict condition type for table "amongus_match_players"
"""
input amongus_match_players_on_conflict {
  constraint: amongus_match_players_constraint!
  update_columns: [amongus_match_players_update_column!]! = []
  where: amongus_match_players_bool_exp
}

"""Ordering options when selecting data from "amongus_match_players"."""
input amongus_match_players_order_by {
  amongus_match: amongus_matches_order_by
  amongus_match_id: order_by
  created_at: order_by
  id: order_by
  nickname: order_by
  person: persons_order_by
  person_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: amongus_match_players"""
input amongus_match_players_pk_columns_input {
  id: uuid!
}

"""
select columns of table "amongus_match_players"
"""
enum amongus_match_players_select_column {
  """column name"""
  amongus_match_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  nickname

  """column name"""
  person_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "amongus_match_players"
"""
input amongus_match_players_set_input {
  amongus_match_id: uuid
  created_at: timestamptz
  id: uuid
  nickname: String
  person_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "amongus_match_players"
"""
input amongus_match_players_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: amongus_match_players_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input amongus_match_players_stream_cursor_value_input {
  amongus_match_id: uuid
  created_at: timestamptz
  id: uuid
  nickname: String
  person_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "amongus_match_players"
"""
enum amongus_match_players_update_column {
  """column name"""
  amongus_match_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  nickname

  """column name"""
  person_id

  """column name"""
  updated_at
}

input amongus_match_players_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: amongus_match_players_set_input

  """filter the rows which have to be updated"""
  where: amongus_match_players_bool_exp!
}

"""
columns and relationships of "amongus_matches"
"""
type amongus_matches {
  """An object relationship"""
  amongus_map: amongus_maps
  amongus_map_id: uuid

  """An array relationship"""
  amongus_match_players(
    """distinct select on columns"""
    distinct_on: [amongus_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_match_players_order_by!]

    """filter the rows returned"""
    where: amongus_match_players_bool_exp
  ): [amongus_match_players!]!

  """An aggregate relationship"""
  amongus_match_players_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_match_players_order_by!]

    """filter the rows returned"""
    where: amongus_match_players_bool_exp
  ): amongus_match_players_aggregate!

  """An object relationship"""
  amongus_vanilla_version: amongus_vanilla_versions
  amongus_vanilla_version_id: uuid
  created_at: timestamptz!
  end_time: timestamptz
  id: uuid!
  index: Int
  is_aborted: Boolean
  is_vanilla: Boolean

  """An object relationship"""
  program: programs!
  program_id: uuid!
  start_time: timestamptz!
  updated_at: timestamptz!
}

"""
aggregated selection of "amongus_matches"
"""
type amongus_matches_aggregate {
  aggregate: amongus_matches_aggregate_fields
  nodes: [amongus_matches!]!
}

input amongus_matches_aggregate_bool_exp {
  bool_and: amongus_matches_aggregate_bool_exp_bool_and
  bool_or: amongus_matches_aggregate_bool_exp_bool_or
  count: amongus_matches_aggregate_bool_exp_count
}

input amongus_matches_aggregate_bool_exp_bool_and {
  arguments: amongus_matches_select_column_amongus_matches_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: amongus_matches_bool_exp
  predicate: Boolean_comparison_exp!
}

input amongus_matches_aggregate_bool_exp_bool_or {
  arguments: amongus_matches_select_column_amongus_matches_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: amongus_matches_bool_exp
  predicate: Boolean_comparison_exp!
}

input amongus_matches_aggregate_bool_exp_count {
  arguments: [amongus_matches_select_column!]
  distinct: Boolean
  filter: amongus_matches_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "amongus_matches"
"""
type amongus_matches_aggregate_fields {
  avg: amongus_matches_avg_fields
  count(columns: [amongus_matches_select_column!], distinct: Boolean): Int!
  max: amongus_matches_max_fields
  min: amongus_matches_min_fields
  stddev: amongus_matches_stddev_fields
  stddev_pop: amongus_matches_stddev_pop_fields
  stddev_samp: amongus_matches_stddev_samp_fields
  sum: amongus_matches_sum_fields
  var_pop: amongus_matches_var_pop_fields
  var_samp: amongus_matches_var_samp_fields
  variance: amongus_matches_variance_fields
}

"""
order by aggregate values of table "amongus_matches"
"""
input amongus_matches_aggregate_order_by {
  avg: amongus_matches_avg_order_by
  count: order_by
  max: amongus_matches_max_order_by
  min: amongus_matches_min_order_by
  stddev: amongus_matches_stddev_order_by
  stddev_pop: amongus_matches_stddev_pop_order_by
  stddev_samp: amongus_matches_stddev_samp_order_by
  sum: amongus_matches_sum_order_by
  var_pop: amongus_matches_var_pop_order_by
  var_samp: amongus_matches_var_samp_order_by
  variance: amongus_matches_variance_order_by
}

"""
input type for inserting array relation for remote table "amongus_matches"
"""
input amongus_matches_arr_rel_insert_input {
  data: [amongus_matches_insert_input!]!

  """upsert condition"""
  on_conflict: amongus_matches_on_conflict
}

"""aggregate avg on columns"""
type amongus_matches_avg_fields {
  index: Float
}

"""
order by avg() on columns of table "amongus_matches"
"""
input amongus_matches_avg_order_by {
  index: order_by
}

"""
Boolean expression to filter rows from the table "amongus_matches". All fields are combined with a logical 'AND'.
"""
input amongus_matches_bool_exp {
  _and: [amongus_matches_bool_exp!]
  _not: amongus_matches_bool_exp
  _or: [amongus_matches_bool_exp!]
  amongus_map: amongus_maps_bool_exp
  amongus_map_id: uuid_comparison_exp
  amongus_match_players: amongus_match_players_bool_exp
  amongus_match_players_aggregate: amongus_match_players_aggregate_bool_exp
  amongus_vanilla_version: amongus_vanilla_versions_bool_exp
  amongus_vanilla_version_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  end_time: timestamptz_comparison_exp
  id: uuid_comparison_exp
  index: Int_comparison_exp
  is_aborted: Boolean_comparison_exp
  is_vanilla: Boolean_comparison_exp
  program: programs_bool_exp
  program_id: uuid_comparison_exp
  start_time: timestamptz_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "amongus_matches"
"""
enum amongus_matches_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  room_amongus_matches_pkey

  """
  unique or primary key constraint on columns "index", "program_id"
  """
  room_amongus_matches_room_id_index_key
}

"""
input type for incrementing numeric columns in table "amongus_matches"
"""
input amongus_matches_inc_input {
  index: Int
}

"""
input type for inserting data into table "amongus_matches"
"""
input amongus_matches_insert_input {
  amongus_map: amongus_maps_obj_rel_insert_input
  amongus_map_id: uuid
  amongus_match_players: amongus_match_players_arr_rel_insert_input
  amongus_vanilla_version: amongus_vanilla_versions_obj_rel_insert_input
  amongus_vanilla_version_id: uuid
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  is_aborted: Boolean
  is_vanilla: Boolean
  program: programs_obj_rel_insert_input
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate max on columns"""
type amongus_matches_max_fields {
  amongus_map_id: uuid
  amongus_vanilla_version_id: uuid
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""
order by max() on columns of table "amongus_matches"
"""
input amongus_matches_max_order_by {
  amongus_map_id: order_by
  amongus_vanilla_version_id: order_by
  created_at: order_by
  end_time: order_by
  id: order_by
  index: order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type amongus_matches_min_fields {
  amongus_map_id: uuid
  amongus_vanilla_version_id: uuid
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""
order by min() on columns of table "amongus_matches"
"""
input amongus_matches_min_order_by {
  amongus_map_id: order_by
  amongus_vanilla_version_id: order_by
  created_at: order_by
  end_time: order_by
  id: order_by
  index: order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "amongus_matches"
"""
type amongus_matches_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [amongus_matches!]!
}

"""
input type for inserting object relation for remote table "amongus_matches"
"""
input amongus_matches_obj_rel_insert_input {
  data: amongus_matches_insert_input!

  """upsert condition"""
  on_conflict: amongus_matches_on_conflict
}

"""
on_conflict condition type for table "amongus_matches"
"""
input amongus_matches_on_conflict {
  constraint: amongus_matches_constraint!
  update_columns: [amongus_matches_update_column!]! = []
  where: amongus_matches_bool_exp
}

"""Ordering options when selecting data from "amongus_matches"."""
input amongus_matches_order_by {
  amongus_map: amongus_maps_order_by
  amongus_map_id: order_by
  amongus_match_players_aggregate: amongus_match_players_aggregate_order_by
  amongus_vanilla_version: amongus_vanilla_versions_order_by
  amongus_vanilla_version_id: order_by
  created_at: order_by
  end_time: order_by
  id: order_by
  index: order_by
  is_aborted: order_by
  is_vanilla: order_by
  program: programs_order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
}

"""primary key columns input for table: amongus_matches"""
input amongus_matches_pk_columns_input {
  id: uuid!
}

"""
select columns of table "amongus_matches"
"""
enum amongus_matches_select_column {
  """column name"""
  amongus_map_id

  """column name"""
  amongus_vanilla_version_id

  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  index

  """column name"""
  is_aborted

  """column name"""
  is_vanilla

  """column name"""
  program_id

  """column name"""
  start_time

  """column name"""
  updated_at
}

"""
select "amongus_matches_aggregate_bool_exp_bool_and_arguments_columns" columns of table "amongus_matches"
"""
enum amongus_matches_select_column_amongus_matches_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_aborted

  """column name"""
  is_vanilla
}

"""
select "amongus_matches_aggregate_bool_exp_bool_or_arguments_columns" columns of table "amongus_matches"
"""
enum amongus_matches_select_column_amongus_matches_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_aborted

  """column name"""
  is_vanilla
}

"""
input type for updating data in table "amongus_matches"
"""
input amongus_matches_set_input {
  amongus_map_id: uuid
  amongus_vanilla_version_id: uuid
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  is_aborted: Boolean
  is_vanilla: Boolean
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type amongus_matches_stddev_fields {
  index: Float
}

"""
order by stddev() on columns of table "amongus_matches"
"""
input amongus_matches_stddev_order_by {
  index: order_by
}

"""aggregate stddev_pop on columns"""
type amongus_matches_stddev_pop_fields {
  index: Float
}

"""
order by stddev_pop() on columns of table "amongus_matches"
"""
input amongus_matches_stddev_pop_order_by {
  index: order_by
}

"""aggregate stddev_samp on columns"""
type amongus_matches_stddev_samp_fields {
  index: Float
}

"""
order by stddev_samp() on columns of table "amongus_matches"
"""
input amongus_matches_stddev_samp_order_by {
  index: order_by
}

"""
Streaming cursor of the table "amongus_matches"
"""
input amongus_matches_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: amongus_matches_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input amongus_matches_stream_cursor_value_input {
  amongus_map_id: uuid
  amongus_vanilla_version_id: uuid
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  is_aborted: Boolean
  is_vanilla: Boolean
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type amongus_matches_sum_fields {
  index: Int
}

"""
order by sum() on columns of table "amongus_matches"
"""
input amongus_matches_sum_order_by {
  index: order_by
}

"""
update columns of table "amongus_matches"
"""
enum amongus_matches_update_column {
  """column name"""
  amongus_map_id

  """column name"""
  amongus_vanilla_version_id

  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  index

  """column name"""
  is_aborted

  """column name"""
  is_vanilla

  """column name"""
  program_id

  """column name"""
  start_time

  """column name"""
  updated_at
}

input amongus_matches_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: amongus_matches_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: amongus_matches_set_input

  """filter the rows which have to be updated"""
  where: amongus_matches_bool_exp!
}

"""aggregate var_pop on columns"""
type amongus_matches_var_pop_fields {
  index: Float
}

"""
order by var_pop() on columns of table "amongus_matches"
"""
input amongus_matches_var_pop_order_by {
  index: order_by
}

"""aggregate var_samp on columns"""
type amongus_matches_var_samp_fields {
  index: Float
}

"""
order by var_samp() on columns of table "amongus_matches"
"""
input amongus_matches_var_samp_order_by {
  index: order_by
}

"""aggregate variance on columns"""
type amongus_matches_variance_fields {
  index: Float
}

"""
order by variance() on columns of table "amongus_matches"
"""
input amongus_matches_variance_order_by {
  index: order_by
}

"""
columns and relationships of "amongus_mod_versions"
"""
type amongus_mod_versions {
  created_at: timestamptz!
  github_url: String
  id: uuid!

  """An object relationship"""
  mod: amongus_mods!
  mod_id: uuid!
  release_time: timestamptz
  updated_at: timestamptz!
  version: String!
}

"""
aggregated selection of "amongus_mod_versions"
"""
type amongus_mod_versions_aggregate {
  aggregate: amongus_mod_versions_aggregate_fields
  nodes: [amongus_mod_versions!]!
}

input amongus_mod_versions_aggregate_bool_exp {
  count: amongus_mod_versions_aggregate_bool_exp_count
}

input amongus_mod_versions_aggregate_bool_exp_count {
  arguments: [amongus_mod_versions_select_column!]
  distinct: Boolean
  filter: amongus_mod_versions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "amongus_mod_versions"
"""
type amongus_mod_versions_aggregate_fields {
  count(columns: [amongus_mod_versions_select_column!], distinct: Boolean): Int!
  max: amongus_mod_versions_max_fields
  min: amongus_mod_versions_min_fields
}

"""
order by aggregate values of table "amongus_mod_versions"
"""
input amongus_mod_versions_aggregate_order_by {
  count: order_by
  max: amongus_mod_versions_max_order_by
  min: amongus_mod_versions_min_order_by
}

"""
input type for inserting array relation for remote table "amongus_mod_versions"
"""
input amongus_mod_versions_arr_rel_insert_input {
  data: [amongus_mod_versions_insert_input!]!

  """upsert condition"""
  on_conflict: amongus_mod_versions_on_conflict
}

"""
Boolean expression to filter rows from the table "amongus_mod_versions". All fields are combined with a logical 'AND'.
"""
input amongus_mod_versions_bool_exp {
  _and: [amongus_mod_versions_bool_exp!]
  _not: amongus_mod_versions_bool_exp
  _or: [amongus_mod_versions_bool_exp!]
  created_at: timestamptz_comparison_exp
  github_url: String_comparison_exp
  id: uuid_comparison_exp
  mod: amongus_mods_bool_exp
  mod_id: uuid_comparison_exp
  release_time: timestamptz_comparison_exp
  updated_at: timestamptz_comparison_exp
  version: String_comparison_exp
}

"""
unique or primary key constraints on table "amongus_mod_versions"
"""
enum amongus_mod_versions_constraint {
  """
  unique or primary key constraint on columns "mod_id", "version"
  """
  mod_versions_mod_id_version_key

  """
  unique or primary key constraint on columns "id"
  """
  mod_versions_pkey
}

"""
input type for inserting data into table "amongus_mod_versions"
"""
input amongus_mod_versions_insert_input {
  created_at: timestamptz
  github_url: String
  id: uuid
  mod: amongus_mods_obj_rel_insert_input
  mod_id: uuid
  release_time: timestamptz
  updated_at: timestamptz
  version: String
}

"""aggregate max on columns"""
type amongus_mod_versions_max_fields {
  created_at: timestamptz
  github_url: String
  id: uuid
  mod_id: uuid
  release_time: timestamptz
  updated_at: timestamptz
  version: String
}

"""
order by max() on columns of table "amongus_mod_versions"
"""
input amongus_mod_versions_max_order_by {
  created_at: order_by
  github_url: order_by
  id: order_by
  mod_id: order_by
  release_time: order_by
  updated_at: order_by
  version: order_by
}

"""aggregate min on columns"""
type amongus_mod_versions_min_fields {
  created_at: timestamptz
  github_url: String
  id: uuid
  mod_id: uuid
  release_time: timestamptz
  updated_at: timestamptz
  version: String
}

"""
order by min() on columns of table "amongus_mod_versions"
"""
input amongus_mod_versions_min_order_by {
  created_at: order_by
  github_url: order_by
  id: order_by
  mod_id: order_by
  release_time: order_by
  updated_at: order_by
  version: order_by
}

"""
response of any mutation on the table "amongus_mod_versions"
"""
type amongus_mod_versions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [amongus_mod_versions!]!
}

"""
input type for inserting object relation for remote table "amongus_mod_versions"
"""
input amongus_mod_versions_obj_rel_insert_input {
  data: amongus_mod_versions_insert_input!

  """upsert condition"""
  on_conflict: amongus_mod_versions_on_conflict
}

"""
on_conflict condition type for table "amongus_mod_versions"
"""
input amongus_mod_versions_on_conflict {
  constraint: amongus_mod_versions_constraint!
  update_columns: [amongus_mod_versions_update_column!]! = []
  where: amongus_mod_versions_bool_exp
}

"""Ordering options when selecting data from "amongus_mod_versions"."""
input amongus_mod_versions_order_by {
  created_at: order_by
  github_url: order_by
  id: order_by
  mod: amongus_mods_order_by
  mod_id: order_by
  release_time: order_by
  updated_at: order_by
  version: order_by
}

"""primary key columns input for table: amongus_mod_versions"""
input amongus_mod_versions_pk_columns_input {
  id: uuid!
}

"""
select columns of table "amongus_mod_versions"
"""
enum amongus_mod_versions_select_column {
  """column name"""
  created_at

  """column name"""
  github_url

  """column name"""
  id

  """column name"""
  mod_id

  """column name"""
  release_time

  """column name"""
  updated_at

  """column name"""
  version
}

"""
input type for updating data in table "amongus_mod_versions"
"""
input amongus_mod_versions_set_input {
  created_at: timestamptz
  github_url: String
  id: uuid
  mod_id: uuid
  release_time: timestamptz
  updated_at: timestamptz
  version: String
}

"""
Streaming cursor of the table "amongus_mod_versions"
"""
input amongus_mod_versions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: amongus_mod_versions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input amongus_mod_versions_stream_cursor_value_input {
  created_at: timestamptz
  github_url: String
  id: uuid
  mod_id: uuid
  release_time: timestamptz
  updated_at: timestamptz
  version: String
}

"""
update columns of table "amongus_mod_versions"
"""
enum amongus_mod_versions_update_column {
  """column name"""
  created_at

  """column name"""
  github_url

  """column name"""
  id

  """column name"""
  mod_id

  """column name"""
  release_time

  """column name"""
  updated_at

  """column name"""
  version
}

input amongus_mod_versions_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: amongus_mod_versions_set_input

  """filter the rows which have to be updated"""
  where: amongus_mod_versions_bool_exp!
}

"""
columns and relationships of "amongus_mods"
"""
type amongus_mods {
  created_at: timestamptz!
  github_url: String
  id: uuid!

  """An array relationship"""
  maps(
    """distinct select on columns"""
    distinct_on: [amongus_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_maps_order_by!]

    """filter the rows returned"""
    where: amongus_maps_bool_exp
  ): [amongus_maps!]!

  """An aggregate relationship"""
  maps_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_maps_order_by!]

    """filter the rows returned"""
    where: amongus_maps_bool_exp
  ): amongus_maps_aggregate!

  """An array relationship"""
  mod_versions(
    """distinct select on columns"""
    distinct_on: [amongus_mod_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_mod_versions_order_by!]

    """filter the rows returned"""
    where: amongus_mod_versions_bool_exp
  ): [amongus_mod_versions!]!

  """An aggregate relationship"""
  mod_versions_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_mod_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_mod_versions_order_by!]

    """filter the rows returned"""
    where: amongus_mod_versions_bool_exp
  ): amongus_mod_versions_aggregate!
  name: String!

  """An array relationship"""
  player_roles(
    """distinct select on columns"""
    distinct_on: [amongus_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_roles_order_by!]

    """filter the rows returned"""
    where: amongus_roles_bool_exp
  ): [amongus_roles!]!

  """An aggregate relationship"""
  player_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_roles_order_by!]

    """filter the rows returned"""
    where: amongus_roles_bool_exp
  ): amongus_roles_aggregate!
  updated_at: timestamptz!
}

"""
aggregated selection of "amongus_mods"
"""
type amongus_mods_aggregate {
  aggregate: amongus_mods_aggregate_fields
  nodes: [amongus_mods!]!
}

"""
aggregate fields of "amongus_mods"
"""
type amongus_mods_aggregate_fields {
  count(columns: [amongus_mods_select_column!], distinct: Boolean): Int!
  max: amongus_mods_max_fields
  min: amongus_mods_min_fields
}

"""
Boolean expression to filter rows from the table "amongus_mods". All fields are combined with a logical 'AND'.
"""
input amongus_mods_bool_exp {
  _and: [amongus_mods_bool_exp!]
  _not: amongus_mods_bool_exp
  _or: [amongus_mods_bool_exp!]
  created_at: timestamptz_comparison_exp
  github_url: String_comparison_exp
  id: uuid_comparison_exp
  maps: amongus_maps_bool_exp
  maps_aggregate: amongus_maps_aggregate_bool_exp
  mod_versions: amongus_mod_versions_bool_exp
  mod_versions_aggregate: amongus_mod_versions_aggregate_bool_exp
  name: String_comparison_exp
  player_roles: amongus_roles_bool_exp
  player_roles_aggregate: amongus_roles_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "amongus_mods"
"""
enum amongus_mods_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  mods_pkey
}

"""
input type for inserting data into table "amongus_mods"
"""
input amongus_mods_insert_input {
  created_at: timestamptz
  github_url: String
  id: uuid
  maps: amongus_maps_arr_rel_insert_input
  mod_versions: amongus_mod_versions_arr_rel_insert_input
  name: String
  player_roles: amongus_roles_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type amongus_mods_max_fields {
  created_at: timestamptz
  github_url: String
  id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type amongus_mods_min_fields {
  created_at: timestamptz
  github_url: String
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "amongus_mods"
"""
type amongus_mods_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [amongus_mods!]!
}

"""
input type for inserting object relation for remote table "amongus_mods"
"""
input amongus_mods_obj_rel_insert_input {
  data: amongus_mods_insert_input!

  """upsert condition"""
  on_conflict: amongus_mods_on_conflict
}

"""
on_conflict condition type for table "amongus_mods"
"""
input amongus_mods_on_conflict {
  constraint: amongus_mods_constraint!
  update_columns: [amongus_mods_update_column!]! = []
  where: amongus_mods_bool_exp
}

"""Ordering options when selecting data from "amongus_mods"."""
input amongus_mods_order_by {
  created_at: order_by
  github_url: order_by
  id: order_by
  maps_aggregate: amongus_maps_aggregate_order_by
  mod_versions_aggregate: amongus_mod_versions_aggregate_order_by
  name: order_by
  player_roles_aggregate: amongus_roles_aggregate_order_by
  updated_at: order_by
}

"""primary key columns input for table: amongus_mods"""
input amongus_mods_pk_columns_input {
  id: uuid!
}

"""
select columns of table "amongus_mods"
"""
enum amongus_mods_select_column {
  """column name"""
  created_at

  """column name"""
  github_url

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "amongus_mods"
"""
input amongus_mods_set_input {
  created_at: timestamptz
  github_url: String
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "amongus_mods"
"""
input amongus_mods_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: amongus_mods_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input amongus_mods_stream_cursor_value_input {
  created_at: timestamptz
  github_url: String
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
update columns of table "amongus_mods"
"""
enum amongus_mods_update_column {
  """column name"""
  created_at

  """column name"""
  github_url

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

input amongus_mods_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: amongus_mods_set_input

  """filter the rows which have to be updated"""
  where: amongus_mods_bool_exp!
}

"""
columns and relationships of "amongus_roles"
"""
type amongus_roles {
  color_rgb: Int
  created_at: timestamptz!
  document_url: String
  id: uuid!
  is_vanilla: Boolean!

  """An array relationship"""
  match_result_player_roles(
    """distinct select on columns"""
    distinct_on: [amongus_match_player_result_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_match_player_result_roles_order_by!]

    """filter the rows returned"""
    where: amongus_match_player_result_roles_bool_exp
  ): [amongus_match_player_result_roles!]!

  """An aggregate relationship"""
  match_result_player_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_match_player_result_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_match_player_result_roles_order_by!]

    """filter the rows returned"""
    where: amongus_match_player_result_roles_bool_exp
  ): amongus_match_player_result_roles_aggregate!

  """An object relationship"""
  mod: amongus_mods
  mod_id: uuid
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "amongus_roles"
"""
type amongus_roles_aggregate {
  aggregate: amongus_roles_aggregate_fields
  nodes: [amongus_roles!]!
}

input amongus_roles_aggregate_bool_exp {
  bool_and: amongus_roles_aggregate_bool_exp_bool_and
  bool_or: amongus_roles_aggregate_bool_exp_bool_or
  count: amongus_roles_aggregate_bool_exp_count
}

input amongus_roles_aggregate_bool_exp_bool_and {
  arguments: amongus_roles_select_column_amongus_roles_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: amongus_roles_bool_exp
  predicate: Boolean_comparison_exp!
}

input amongus_roles_aggregate_bool_exp_bool_or {
  arguments: amongus_roles_select_column_amongus_roles_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: amongus_roles_bool_exp
  predicate: Boolean_comparison_exp!
}

input amongus_roles_aggregate_bool_exp_count {
  arguments: [amongus_roles_select_column!]
  distinct: Boolean
  filter: amongus_roles_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "amongus_roles"
"""
type amongus_roles_aggregate_fields {
  avg: amongus_roles_avg_fields
  count(columns: [amongus_roles_select_column!], distinct: Boolean): Int!
  max: amongus_roles_max_fields
  min: amongus_roles_min_fields
  stddev: amongus_roles_stddev_fields
  stddev_pop: amongus_roles_stddev_pop_fields
  stddev_samp: amongus_roles_stddev_samp_fields
  sum: amongus_roles_sum_fields
  var_pop: amongus_roles_var_pop_fields
  var_samp: amongus_roles_var_samp_fields
  variance: amongus_roles_variance_fields
}

"""
order by aggregate values of table "amongus_roles"
"""
input amongus_roles_aggregate_order_by {
  avg: amongus_roles_avg_order_by
  count: order_by
  max: amongus_roles_max_order_by
  min: amongus_roles_min_order_by
  stddev: amongus_roles_stddev_order_by
  stddev_pop: amongus_roles_stddev_pop_order_by
  stddev_samp: amongus_roles_stddev_samp_order_by
  sum: amongus_roles_sum_order_by
  var_pop: amongus_roles_var_pop_order_by
  var_samp: amongus_roles_var_samp_order_by
  variance: amongus_roles_variance_order_by
}

"""
input type for inserting array relation for remote table "amongus_roles"
"""
input amongus_roles_arr_rel_insert_input {
  data: [amongus_roles_insert_input!]!

  """upsert condition"""
  on_conflict: amongus_roles_on_conflict
}

"""aggregate avg on columns"""
type amongus_roles_avg_fields {
  color_rgb: Float
}

"""
order by avg() on columns of table "amongus_roles"
"""
input amongus_roles_avg_order_by {
  color_rgb: order_by
}

"""
Boolean expression to filter rows from the table "amongus_roles". All fields are combined with a logical 'AND'.
"""
input amongus_roles_bool_exp {
  _and: [amongus_roles_bool_exp!]
  _not: amongus_roles_bool_exp
  _or: [amongus_roles_bool_exp!]
  color_rgb: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  document_url: String_comparison_exp
  id: uuid_comparison_exp
  is_vanilla: Boolean_comparison_exp
  match_result_player_roles: amongus_match_player_result_roles_bool_exp
  match_result_player_roles_aggregate: amongus_match_player_result_roles_aggregate_bool_exp
  mod: amongus_mods_bool_exp
  mod_id: uuid_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "amongus_roles"
"""
enum amongus_roles_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  player_roles_pkey
}

"""
input type for incrementing numeric columns in table "amongus_roles"
"""
input amongus_roles_inc_input {
  color_rgb: Int
}

"""
input type for inserting data into table "amongus_roles"
"""
input amongus_roles_insert_input {
  color_rgb: Int
  created_at: timestamptz
  document_url: String
  id: uuid
  is_vanilla: Boolean
  match_result_player_roles: amongus_match_player_result_roles_arr_rel_insert_input
  mod: amongus_mods_obj_rel_insert_input
  mod_id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type amongus_roles_max_fields {
  color_rgb: Int
  created_at: timestamptz
  document_url: String
  id: uuid
  mod_id: uuid
  name: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "amongus_roles"
"""
input amongus_roles_max_order_by {
  color_rgb: order_by
  created_at: order_by
  document_url: order_by
  id: order_by
  mod_id: order_by
  name: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type amongus_roles_min_fields {
  color_rgb: Int
  created_at: timestamptz
  document_url: String
  id: uuid
  mod_id: uuid
  name: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "amongus_roles"
"""
input amongus_roles_min_order_by {
  color_rgb: order_by
  created_at: order_by
  document_url: order_by
  id: order_by
  mod_id: order_by
  name: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "amongus_roles"
"""
type amongus_roles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [amongus_roles!]!
}

"""
on_conflict condition type for table "amongus_roles"
"""
input amongus_roles_on_conflict {
  constraint: amongus_roles_constraint!
  update_columns: [amongus_roles_update_column!]! = []
  where: amongus_roles_bool_exp
}

"""Ordering options when selecting data from "amongus_roles"."""
input amongus_roles_order_by {
  color_rgb: order_by
  created_at: order_by
  document_url: order_by
  id: order_by
  is_vanilla: order_by
  match_result_player_roles_aggregate: amongus_match_player_result_roles_aggregate_order_by
  mod: amongus_mods_order_by
  mod_id: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: amongus_roles"""
input amongus_roles_pk_columns_input {
  id: uuid!
}

"""
select columns of table "amongus_roles"
"""
enum amongus_roles_select_column {
  """column name"""
  color_rgb

  """column name"""
  created_at

  """column name"""
  document_url

  """column name"""
  id

  """column name"""
  is_vanilla

  """column name"""
  mod_id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
select "amongus_roles_aggregate_bool_exp_bool_and_arguments_columns" columns of table "amongus_roles"
"""
enum amongus_roles_select_column_amongus_roles_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_vanilla
}

"""
select "amongus_roles_aggregate_bool_exp_bool_or_arguments_columns" columns of table "amongus_roles"
"""
enum amongus_roles_select_column_amongus_roles_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_vanilla
}

"""
input type for updating data in table "amongus_roles"
"""
input amongus_roles_set_input {
  color_rgb: Int
  created_at: timestamptz
  document_url: String
  id: uuid
  is_vanilla: Boolean
  mod_id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type amongus_roles_stddev_fields {
  color_rgb: Float
}

"""
order by stddev() on columns of table "amongus_roles"
"""
input amongus_roles_stddev_order_by {
  color_rgb: order_by
}

"""aggregate stddev_pop on columns"""
type amongus_roles_stddev_pop_fields {
  color_rgb: Float
}

"""
order by stddev_pop() on columns of table "amongus_roles"
"""
input amongus_roles_stddev_pop_order_by {
  color_rgb: order_by
}

"""aggregate stddev_samp on columns"""
type amongus_roles_stddev_samp_fields {
  color_rgb: Float
}

"""
order by stddev_samp() on columns of table "amongus_roles"
"""
input amongus_roles_stddev_samp_order_by {
  color_rgb: order_by
}

"""
Streaming cursor of the table "amongus_roles"
"""
input amongus_roles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: amongus_roles_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input amongus_roles_stream_cursor_value_input {
  color_rgb: Int
  created_at: timestamptz
  document_url: String
  id: uuid
  is_vanilla: Boolean
  mod_id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type amongus_roles_sum_fields {
  color_rgb: Int
}

"""
order by sum() on columns of table "amongus_roles"
"""
input amongus_roles_sum_order_by {
  color_rgb: order_by
}

"""
update columns of table "amongus_roles"
"""
enum amongus_roles_update_column {
  """column name"""
  color_rgb

  """column name"""
  created_at

  """column name"""
  document_url

  """column name"""
  id

  """column name"""
  is_vanilla

  """column name"""
  mod_id

  """column name"""
  name

  """column name"""
  updated_at
}

input amongus_roles_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: amongus_roles_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: amongus_roles_set_input

  """filter the rows which have to be updated"""
  where: amongus_roles_bool_exp!
}

"""aggregate var_pop on columns"""
type amongus_roles_var_pop_fields {
  color_rgb: Float
}

"""
order by var_pop() on columns of table "amongus_roles"
"""
input amongus_roles_var_pop_order_by {
  color_rgb: order_by
}

"""aggregate var_samp on columns"""
type amongus_roles_var_samp_fields {
  color_rgb: Float
}

"""
order by var_samp() on columns of table "amongus_roles"
"""
input amongus_roles_var_samp_order_by {
  color_rgb: order_by
}

"""aggregate variance on columns"""
type amongus_roles_variance_fields {
  color_rgb: Float
}

"""
order by variance() on columns of table "amongus_roles"
"""
input amongus_roles_variance_order_by {
  color_rgb: order_by
}

"""
columns and relationships of "amongus_vanilla_versions"
"""
type amongus_vanilla_versions {
  created_at: timestamptz!
  id: uuid!
  updated_at: timestamptz!
  version: String!
}

"""
aggregated selection of "amongus_vanilla_versions"
"""
type amongus_vanilla_versions_aggregate {
  aggregate: amongus_vanilla_versions_aggregate_fields
  nodes: [amongus_vanilla_versions!]!
}

"""
aggregate fields of "amongus_vanilla_versions"
"""
type amongus_vanilla_versions_aggregate_fields {
  count(columns: [amongus_vanilla_versions_select_column!], distinct: Boolean): Int!
  max: amongus_vanilla_versions_max_fields
  min: amongus_vanilla_versions_min_fields
}

"""
Boolean expression to filter rows from the table "amongus_vanilla_versions". All fields are combined with a logical 'AND'.
"""
input amongus_vanilla_versions_bool_exp {
  _and: [amongus_vanilla_versions_bool_exp!]
  _not: amongus_vanilla_versions_bool_exp
  _or: [amongus_vanilla_versions_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  version: String_comparison_exp
}

"""
unique or primary key constraints on table "amongus_vanilla_versions"
"""
enum amongus_vanilla_versions_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  vanilla_versions_pkey

  """
  unique or primary key constraint on columns "version"
  """
  vanilla_versions_version_key
}

"""
input type for inserting data into table "amongus_vanilla_versions"
"""
input amongus_vanilla_versions_insert_input {
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  version: String
}

"""aggregate max on columns"""
type amongus_vanilla_versions_max_fields {
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  version: String
}

"""aggregate min on columns"""
type amongus_vanilla_versions_min_fields {
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  version: String
}

"""
response of any mutation on the table "amongus_vanilla_versions"
"""
type amongus_vanilla_versions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [amongus_vanilla_versions!]!
}

"""
input type for inserting object relation for remote table "amongus_vanilla_versions"
"""
input amongus_vanilla_versions_obj_rel_insert_input {
  data: amongus_vanilla_versions_insert_input!

  """upsert condition"""
  on_conflict: amongus_vanilla_versions_on_conflict
}

"""
on_conflict condition type for table "amongus_vanilla_versions"
"""
input amongus_vanilla_versions_on_conflict {
  constraint: amongus_vanilla_versions_constraint!
  update_columns: [amongus_vanilla_versions_update_column!]! = []
  where: amongus_vanilla_versions_bool_exp
}

"""Ordering options when selecting data from "amongus_vanilla_versions"."""
input amongus_vanilla_versions_order_by {
  created_at: order_by
  id: order_by
  updated_at: order_by
  version: order_by
}

"""primary key columns input for table: amongus_vanilla_versions"""
input amongus_vanilla_versions_pk_columns_input {
  id: uuid!
}

"""
select columns of table "amongus_vanilla_versions"
"""
enum amongus_vanilla_versions_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  updated_at

  """column name"""
  version
}

"""
input type for updating data in table "amongus_vanilla_versions"
"""
input amongus_vanilla_versions_set_input {
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  version: String
}

"""
Streaming cursor of the table "amongus_vanilla_versions"
"""
input amongus_vanilla_versions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: amongus_vanilla_versions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input amongus_vanilla_versions_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  version: String
}

"""
update columns of table "amongus_vanilla_versions"
"""
enum amongus_vanilla_versions_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  updated_at

  """column name"""
  version
}

input amongus_vanilla_versions_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: amongus_vanilla_versions_set_input

  """filter the rows which have to be updated"""
  where: amongus_vanilla_versions_bool_exp!
}

"""
columns and relationships of "amongusvr_maps"
"""
type amongusvr_maps {
  created_at: timestamptz!
  id: uuid!
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "amongusvr_maps"
"""
type amongusvr_maps_aggregate {
  aggregate: amongusvr_maps_aggregate_fields
  nodes: [amongusvr_maps!]!
}

"""
aggregate fields of "amongusvr_maps"
"""
type amongusvr_maps_aggregate_fields {
  count(columns: [amongusvr_maps_select_column!], distinct: Boolean): Int!
  max: amongusvr_maps_max_fields
  min: amongusvr_maps_min_fields
}

"""
Boolean expression to filter rows from the table "amongusvr_maps". All fields are combined with a logical 'AND'.
"""
input amongusvr_maps_bool_exp {
  _and: [amongusvr_maps_bool_exp!]
  _not: amongusvr_maps_bool_exp
  _or: [amongusvr_maps_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "amongusvr_maps"
"""
enum amongusvr_maps_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  amongusvr_maps_pkey
}

"""
input type for inserting data into table "amongusvr_maps"
"""
input amongusvr_maps_insert_input {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type amongusvr_maps_max_fields {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type amongusvr_maps_min_fields {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "amongusvr_maps"
"""
type amongusvr_maps_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [amongusvr_maps!]!
}

"""
input type for inserting object relation for remote table "amongusvr_maps"
"""
input amongusvr_maps_obj_rel_insert_input {
  data: amongusvr_maps_insert_input!

  """upsert condition"""
  on_conflict: amongusvr_maps_on_conflict
}

"""
on_conflict condition type for table "amongusvr_maps"
"""
input amongusvr_maps_on_conflict {
  constraint: amongusvr_maps_constraint!
  update_columns: [amongusvr_maps_update_column!]! = []
  where: amongusvr_maps_bool_exp
}

"""Ordering options when selecting data from "amongusvr_maps"."""
input amongusvr_maps_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: amongusvr_maps"""
input amongusvr_maps_pk_columns_input {
  id: uuid!
}

"""
select columns of table "amongusvr_maps"
"""
enum amongusvr_maps_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "amongusvr_maps"
"""
input amongusvr_maps_set_input {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "amongusvr_maps"
"""
input amongusvr_maps_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: amongusvr_maps_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input amongusvr_maps_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
update columns of table "amongusvr_maps"
"""
enum amongusvr_maps_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

input amongusvr_maps_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: amongusvr_maps_set_input

  """filter the rows which have to be updated"""
  where: amongusvr_maps_bool_exp!
}

"""
columns and relationships of "amongusvr_match_players"
"""
type amongusvr_match_players {
  """An object relationship"""
  amongusvr_match: amongusvr_matches!
  amongusvr_match_id: uuid!
  created_at: timestamptz!
  id: uuid!
  nickname: String!

  """An object relationship"""
  person: persons
  person_id: uuid
  updated_at: timestamptz!
}

"""
aggregated selection of "amongusvr_match_players"
"""
type amongusvr_match_players_aggregate {
  aggregate: amongusvr_match_players_aggregate_fields
  nodes: [amongusvr_match_players!]!
}

input amongusvr_match_players_aggregate_bool_exp {
  count: amongusvr_match_players_aggregate_bool_exp_count
}

input amongusvr_match_players_aggregate_bool_exp_count {
  arguments: [amongusvr_match_players_select_column!]
  distinct: Boolean
  filter: amongusvr_match_players_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "amongusvr_match_players"
"""
type amongusvr_match_players_aggregate_fields {
  count(columns: [amongusvr_match_players_select_column!], distinct: Boolean): Int!
  max: amongusvr_match_players_max_fields
  min: amongusvr_match_players_min_fields
}

"""
order by aggregate values of table "amongusvr_match_players"
"""
input amongusvr_match_players_aggregate_order_by {
  count: order_by
  max: amongusvr_match_players_max_order_by
  min: amongusvr_match_players_min_order_by
}

"""
input type for inserting array relation for remote table "amongusvr_match_players"
"""
input amongusvr_match_players_arr_rel_insert_input {
  data: [amongusvr_match_players_insert_input!]!

  """upsert condition"""
  on_conflict: amongusvr_match_players_on_conflict
}

"""
Boolean expression to filter rows from the table "amongusvr_match_players". All fields are combined with a logical 'AND'.
"""
input amongusvr_match_players_bool_exp {
  _and: [amongusvr_match_players_bool_exp!]
  _not: amongusvr_match_players_bool_exp
  _or: [amongusvr_match_players_bool_exp!]
  amongusvr_match: amongusvr_matches_bool_exp
  amongusvr_match_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  nickname: String_comparison_exp
  person: persons_bool_exp
  person_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "amongusvr_match_players"
"""
enum amongusvr_match_players_constraint {
  """
  unique or primary key constraint on columns "amongusvr_match_id", "nickname"
  """
  amongusvr_match_players_amongusvr_match_id_nickname_key

  """
  unique or primary key constraint on columns "amongusvr_match_id", "person_id"
  """
  amongusvr_match_players_amongusvr_match_id_person_id_key

  """
  unique or primary key constraint on columns "id"
  """
  amongusvr_match_players_pkey
}

"""
input type for inserting data into table "amongusvr_match_players"
"""
input amongusvr_match_players_insert_input {
  amongusvr_match: amongusvr_matches_obj_rel_insert_input
  amongusvr_match_id: uuid
  created_at: timestamptz
  id: uuid
  nickname: String
  person: persons_obj_rel_insert_input
  person_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type amongusvr_match_players_max_fields {
  amongusvr_match_id: uuid
  created_at: timestamptz
  id: uuid
  nickname: String
  person_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "amongusvr_match_players"
"""
input amongusvr_match_players_max_order_by {
  amongusvr_match_id: order_by
  created_at: order_by
  id: order_by
  nickname: order_by
  person_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type amongusvr_match_players_min_fields {
  amongusvr_match_id: uuid
  created_at: timestamptz
  id: uuid
  nickname: String
  person_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "amongusvr_match_players"
"""
input amongusvr_match_players_min_order_by {
  amongusvr_match_id: order_by
  created_at: order_by
  id: order_by
  nickname: order_by
  person_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "amongusvr_match_players"
"""
type amongusvr_match_players_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [amongusvr_match_players!]!
}

"""
on_conflict condition type for table "amongusvr_match_players"
"""
input amongusvr_match_players_on_conflict {
  constraint: amongusvr_match_players_constraint!
  update_columns: [amongusvr_match_players_update_column!]! = []
  where: amongusvr_match_players_bool_exp
}

"""Ordering options when selecting data from "amongusvr_match_players"."""
input amongusvr_match_players_order_by {
  amongusvr_match: amongusvr_matches_order_by
  amongusvr_match_id: order_by
  created_at: order_by
  id: order_by
  nickname: order_by
  person: persons_order_by
  person_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: amongusvr_match_players"""
input amongusvr_match_players_pk_columns_input {
  id: uuid!
}

"""
select columns of table "amongusvr_match_players"
"""
enum amongusvr_match_players_select_column {
  """column name"""
  amongusvr_match_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  nickname

  """column name"""
  person_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "amongusvr_match_players"
"""
input amongusvr_match_players_set_input {
  amongusvr_match_id: uuid
  created_at: timestamptz
  id: uuid
  nickname: String
  person_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "amongusvr_match_players"
"""
input amongusvr_match_players_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: amongusvr_match_players_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input amongusvr_match_players_stream_cursor_value_input {
  amongusvr_match_id: uuid
  created_at: timestamptz
  id: uuid
  nickname: String
  person_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "amongusvr_match_players"
"""
enum amongusvr_match_players_update_column {
  """column name"""
  amongusvr_match_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  nickname

  """column name"""
  person_id

  """column name"""
  updated_at
}

input amongusvr_match_players_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: amongusvr_match_players_set_input

  """filter the rows which have to be updated"""
  where: amongusvr_match_players_bool_exp!
}

"""
columns and relationships of "amongusvr_matches"
"""
type amongusvr_matches {
  """An object relationship"""
  amongusvr_map: amongusvr_maps
  amongusvr_map_id: uuid

  """An array relationship"""
  amongusvr_match_players(
    """distinct select on columns"""
    distinct_on: [amongusvr_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongusvr_match_players_order_by!]

    """filter the rows returned"""
    where: amongusvr_match_players_bool_exp
  ): [amongusvr_match_players!]!

  """An aggregate relationship"""
  amongusvr_match_players_aggregate(
    """distinct select on columns"""
    distinct_on: [amongusvr_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongusvr_match_players_order_by!]

    """filter the rows returned"""
    where: amongusvr_match_players_bool_exp
  ): amongusvr_match_players_aggregate!
  created_at: timestamptz!
  end_time: timestamptz
  id: uuid!
  index: Int
  is_aborted: Boolean

  """An object relationship"""
  program: programs!
  program_id: uuid!
  start_time: timestamptz!
  updated_at: timestamptz!
}

"""
aggregated selection of "amongusvr_matches"
"""
type amongusvr_matches_aggregate {
  aggregate: amongusvr_matches_aggregate_fields
  nodes: [amongusvr_matches!]!
}

input amongusvr_matches_aggregate_bool_exp {
  bool_and: amongusvr_matches_aggregate_bool_exp_bool_and
  bool_or: amongusvr_matches_aggregate_bool_exp_bool_or
  count: amongusvr_matches_aggregate_bool_exp_count
}

input amongusvr_matches_aggregate_bool_exp_bool_and {
  arguments: amongusvr_matches_select_column_amongusvr_matches_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: amongusvr_matches_bool_exp
  predicate: Boolean_comparison_exp!
}

input amongusvr_matches_aggregate_bool_exp_bool_or {
  arguments: amongusvr_matches_select_column_amongusvr_matches_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: amongusvr_matches_bool_exp
  predicate: Boolean_comparison_exp!
}

input amongusvr_matches_aggregate_bool_exp_count {
  arguments: [amongusvr_matches_select_column!]
  distinct: Boolean
  filter: amongusvr_matches_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "amongusvr_matches"
"""
type amongusvr_matches_aggregate_fields {
  avg: amongusvr_matches_avg_fields
  count(columns: [amongusvr_matches_select_column!], distinct: Boolean): Int!
  max: amongusvr_matches_max_fields
  min: amongusvr_matches_min_fields
  stddev: amongusvr_matches_stddev_fields
  stddev_pop: amongusvr_matches_stddev_pop_fields
  stddev_samp: amongusvr_matches_stddev_samp_fields
  sum: amongusvr_matches_sum_fields
  var_pop: amongusvr_matches_var_pop_fields
  var_samp: amongusvr_matches_var_samp_fields
  variance: amongusvr_matches_variance_fields
}

"""
order by aggregate values of table "amongusvr_matches"
"""
input amongusvr_matches_aggregate_order_by {
  avg: amongusvr_matches_avg_order_by
  count: order_by
  max: amongusvr_matches_max_order_by
  min: amongusvr_matches_min_order_by
  stddev: amongusvr_matches_stddev_order_by
  stddev_pop: amongusvr_matches_stddev_pop_order_by
  stddev_samp: amongusvr_matches_stddev_samp_order_by
  sum: amongusvr_matches_sum_order_by
  var_pop: amongusvr_matches_var_pop_order_by
  var_samp: amongusvr_matches_var_samp_order_by
  variance: amongusvr_matches_variance_order_by
}

"""
input type for inserting array relation for remote table "amongusvr_matches"
"""
input amongusvr_matches_arr_rel_insert_input {
  data: [amongusvr_matches_insert_input!]!

  """upsert condition"""
  on_conflict: amongusvr_matches_on_conflict
}

"""aggregate avg on columns"""
type amongusvr_matches_avg_fields {
  index: Float
}

"""
order by avg() on columns of table "amongusvr_matches"
"""
input amongusvr_matches_avg_order_by {
  index: order_by
}

"""
Boolean expression to filter rows from the table "amongusvr_matches". All fields are combined with a logical 'AND'.
"""
input amongusvr_matches_bool_exp {
  _and: [amongusvr_matches_bool_exp!]
  _not: amongusvr_matches_bool_exp
  _or: [amongusvr_matches_bool_exp!]
  amongusvr_map: amongusvr_maps_bool_exp
  amongusvr_map_id: uuid_comparison_exp
  amongusvr_match_players: amongusvr_match_players_bool_exp
  amongusvr_match_players_aggregate: amongusvr_match_players_aggregate_bool_exp
  created_at: timestamptz_comparison_exp
  end_time: timestamptz_comparison_exp
  id: uuid_comparison_exp
  index: Int_comparison_exp
  is_aborted: Boolean_comparison_exp
  program: programs_bool_exp
  program_id: uuid_comparison_exp
  start_time: timestamptz_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "amongusvr_matches"
"""
enum amongusvr_matches_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  amongusvr_matches_pkey

  """
  unique or primary key constraint on columns "index", "program_id"
  """
  amongusvr_matches_program_id_index_key
}

"""
input type for incrementing numeric columns in table "amongusvr_matches"
"""
input amongusvr_matches_inc_input {
  index: Int
}

"""
input type for inserting data into table "amongusvr_matches"
"""
input amongusvr_matches_insert_input {
  amongusvr_map: amongusvr_maps_obj_rel_insert_input
  amongusvr_map_id: uuid
  amongusvr_match_players: amongusvr_match_players_arr_rel_insert_input
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  is_aborted: Boolean
  program: programs_obj_rel_insert_input
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate max on columns"""
type amongusvr_matches_max_fields {
  amongusvr_map_id: uuid
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""
order by max() on columns of table "amongusvr_matches"
"""
input amongusvr_matches_max_order_by {
  amongusvr_map_id: order_by
  created_at: order_by
  end_time: order_by
  id: order_by
  index: order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type amongusvr_matches_min_fields {
  amongusvr_map_id: uuid
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""
order by min() on columns of table "amongusvr_matches"
"""
input amongusvr_matches_min_order_by {
  amongusvr_map_id: order_by
  created_at: order_by
  end_time: order_by
  id: order_by
  index: order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "amongusvr_matches"
"""
type amongusvr_matches_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [amongusvr_matches!]!
}

"""
input type for inserting object relation for remote table "amongusvr_matches"
"""
input amongusvr_matches_obj_rel_insert_input {
  data: amongusvr_matches_insert_input!

  """upsert condition"""
  on_conflict: amongusvr_matches_on_conflict
}

"""
on_conflict condition type for table "amongusvr_matches"
"""
input amongusvr_matches_on_conflict {
  constraint: amongusvr_matches_constraint!
  update_columns: [amongusvr_matches_update_column!]! = []
  where: amongusvr_matches_bool_exp
}

"""Ordering options when selecting data from "amongusvr_matches"."""
input amongusvr_matches_order_by {
  amongusvr_map: amongusvr_maps_order_by
  amongusvr_map_id: order_by
  amongusvr_match_players_aggregate: amongusvr_match_players_aggregate_order_by
  created_at: order_by
  end_time: order_by
  id: order_by
  index: order_by
  is_aborted: order_by
  program: programs_order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
}

"""primary key columns input for table: amongusvr_matches"""
input amongusvr_matches_pk_columns_input {
  id: uuid!
}

"""
select columns of table "amongusvr_matches"
"""
enum amongusvr_matches_select_column {
  """column name"""
  amongusvr_map_id

  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  index

  """column name"""
  is_aborted

  """column name"""
  program_id

  """column name"""
  start_time

  """column name"""
  updated_at
}

"""
select "amongusvr_matches_aggregate_bool_exp_bool_and_arguments_columns" columns of table "amongusvr_matches"
"""
enum amongusvr_matches_select_column_amongusvr_matches_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_aborted
}

"""
select "amongusvr_matches_aggregate_bool_exp_bool_or_arguments_columns" columns of table "amongusvr_matches"
"""
enum amongusvr_matches_select_column_amongusvr_matches_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_aborted
}

"""
input type for updating data in table "amongusvr_matches"
"""
input amongusvr_matches_set_input {
  amongusvr_map_id: uuid
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  is_aborted: Boolean
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type amongusvr_matches_stddev_fields {
  index: Float
}

"""
order by stddev() on columns of table "amongusvr_matches"
"""
input amongusvr_matches_stddev_order_by {
  index: order_by
}

"""aggregate stddev_pop on columns"""
type amongusvr_matches_stddev_pop_fields {
  index: Float
}

"""
order by stddev_pop() on columns of table "amongusvr_matches"
"""
input amongusvr_matches_stddev_pop_order_by {
  index: order_by
}

"""aggregate stddev_samp on columns"""
type amongusvr_matches_stddev_samp_fields {
  index: Float
}

"""
order by stddev_samp() on columns of table "amongusvr_matches"
"""
input amongusvr_matches_stddev_samp_order_by {
  index: order_by
}

"""
Streaming cursor of the table "amongusvr_matches"
"""
input amongusvr_matches_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: amongusvr_matches_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input amongusvr_matches_stream_cursor_value_input {
  amongusvr_map_id: uuid
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  is_aborted: Boolean
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type amongusvr_matches_sum_fields {
  index: Int
}

"""
order by sum() on columns of table "amongusvr_matches"
"""
input amongusvr_matches_sum_order_by {
  index: order_by
}

"""
update columns of table "amongusvr_matches"
"""
enum amongusvr_matches_update_column {
  """column name"""
  amongusvr_map_id

  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  index

  """column name"""
  is_aborted

  """column name"""
  program_id

  """column name"""
  start_time

  """column name"""
  updated_at
}

input amongusvr_matches_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: amongusvr_matches_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: amongusvr_matches_set_input

  """filter the rows which have to be updated"""
  where: amongusvr_matches_bool_exp!
}

"""aggregate var_pop on columns"""
type amongusvr_matches_var_pop_fields {
  index: Float
}

"""
order by var_pop() on columns of table "amongusvr_matches"
"""
input amongusvr_matches_var_pop_order_by {
  index: order_by
}

"""aggregate var_samp on columns"""
type amongusvr_matches_var_samp_fields {
  index: Float
}

"""
order by var_samp() on columns of table "amongusvr_matches"
"""
input amongusvr_matches_var_samp_order_by {
  index: order_by
}

"""aggregate variance on columns"""
type amongusvr_matches_variance_fields {
  index: Float
}

"""
order by variance() on columns of table "amongusvr_matches"
"""
input amongusvr_matches_variance_order_by {
  index: order_by
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "fallguys_custom_round_twitter_announcements"
"""
type fallguys_custom_round_twitter_announcements {
  created_at: timestamptz!

  """An object relationship"""
  fallguys_custom_round: fallguys_custom_rounds!
  fallguys_custom_round_id: uuid!
  id: uuid!
  is_agent_tweet: Boolean

  """An object relationship"""
  twitter_tweet: twitter_tweets!
  twitter_tweet_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "fallguys_custom_round_twitter_announcements"
"""
type fallguys_custom_round_twitter_announcements_aggregate {
  aggregate: fallguys_custom_round_twitter_announcements_aggregate_fields
  nodes: [fallguys_custom_round_twitter_announcements!]!
}

input fallguys_custom_round_twitter_announcements_aggregate_bool_exp {
  bool_and: fallguys_custom_round_twitter_announcements_aggregate_bool_exp_bool_and
  bool_or: fallguys_custom_round_twitter_announcements_aggregate_bool_exp_bool_or
  count: fallguys_custom_round_twitter_announcements_aggregate_bool_exp_count
}

input fallguys_custom_round_twitter_announcements_aggregate_bool_exp_bool_and {
  arguments: fallguys_custom_round_twitter_announcements_select_column_fallguys_custom_round_twitter_announcements_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: fallguys_custom_round_twitter_announcements_bool_exp
  predicate: Boolean_comparison_exp!
}

input fallguys_custom_round_twitter_announcements_aggregate_bool_exp_bool_or {
  arguments: fallguys_custom_round_twitter_announcements_select_column_fallguys_custom_round_twitter_announcements_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: fallguys_custom_round_twitter_announcements_bool_exp
  predicate: Boolean_comparison_exp!
}

input fallguys_custom_round_twitter_announcements_aggregate_bool_exp_count {
  arguments: [fallguys_custom_round_twitter_announcements_select_column!]
  distinct: Boolean
  filter: fallguys_custom_round_twitter_announcements_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "fallguys_custom_round_twitter_announcements"
"""
type fallguys_custom_round_twitter_announcements_aggregate_fields {
  count(columns: [fallguys_custom_round_twitter_announcements_select_column!], distinct: Boolean): Int!
  max: fallguys_custom_round_twitter_announcements_max_fields
  min: fallguys_custom_round_twitter_announcements_min_fields
}

"""
order by aggregate values of table "fallguys_custom_round_twitter_announcements"
"""
input fallguys_custom_round_twitter_announcements_aggregate_order_by {
  count: order_by
  max: fallguys_custom_round_twitter_announcements_max_order_by
  min: fallguys_custom_round_twitter_announcements_min_order_by
}

"""
input type for inserting array relation for remote table "fallguys_custom_round_twitter_announcements"
"""
input fallguys_custom_round_twitter_announcements_arr_rel_insert_input {
  data: [fallguys_custom_round_twitter_announcements_insert_input!]!

  """upsert condition"""
  on_conflict: fallguys_custom_round_twitter_announcements_on_conflict
}

"""
Boolean expression to filter rows from the table "fallguys_custom_round_twitter_announcements". All fields are combined with a logical 'AND'.
"""
input fallguys_custom_round_twitter_announcements_bool_exp {
  _and: [fallguys_custom_round_twitter_announcements_bool_exp!]
  _not: fallguys_custom_round_twitter_announcements_bool_exp
  _or: [fallguys_custom_round_twitter_announcements_bool_exp!]
  created_at: timestamptz_comparison_exp
  fallguys_custom_round: fallguys_custom_rounds_bool_exp
  fallguys_custom_round_id: uuid_comparison_exp
  id: uuid_comparison_exp
  is_agent_tweet: Boolean_comparison_exp
  twitter_tweet: twitter_tweets_bool_exp
  twitter_tweet_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "fallguys_custom_round_twitter_announcements"
"""
enum fallguys_custom_round_twitter_announcements_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  fallguys_custom_round_twitter_announcements_pkey

  """
  unique or primary key constraint on columns "fallguys_custom_round_id", "twitter_tweet_id"
  """
  fallguys_custom_round_twitter_fallguys_custom_round_id_twit_key
}

"""
input type for inserting data into table "fallguys_custom_round_twitter_announcements"
"""
input fallguys_custom_round_twitter_announcements_insert_input {
  created_at: timestamptz
  fallguys_custom_round: fallguys_custom_rounds_obj_rel_insert_input
  fallguys_custom_round_id: uuid
  id: uuid
  is_agent_tweet: Boolean
  twitter_tweet: twitter_tweets_obj_rel_insert_input
  twitter_tweet_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type fallguys_custom_round_twitter_announcements_max_fields {
  created_at: timestamptz
  fallguys_custom_round_id: uuid
  id: uuid
  twitter_tweet_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "fallguys_custom_round_twitter_announcements"
"""
input fallguys_custom_round_twitter_announcements_max_order_by {
  created_at: order_by
  fallguys_custom_round_id: order_by
  id: order_by
  twitter_tweet_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type fallguys_custom_round_twitter_announcements_min_fields {
  created_at: timestamptz
  fallguys_custom_round_id: uuid
  id: uuid
  twitter_tweet_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "fallguys_custom_round_twitter_announcements"
"""
input fallguys_custom_round_twitter_announcements_min_order_by {
  created_at: order_by
  fallguys_custom_round_id: order_by
  id: order_by
  twitter_tweet_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "fallguys_custom_round_twitter_announcements"
"""
type fallguys_custom_round_twitter_announcements_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [fallguys_custom_round_twitter_announcements!]!
}

"""
on_conflict condition type for table "fallguys_custom_round_twitter_announcements"
"""
input fallguys_custom_round_twitter_announcements_on_conflict {
  constraint: fallguys_custom_round_twitter_announcements_constraint!
  update_columns: [fallguys_custom_round_twitter_announcements_update_column!]! = []
  where: fallguys_custom_round_twitter_announcements_bool_exp
}

"""
Ordering options when selecting data from "fallguys_custom_round_twitter_announcements".
"""
input fallguys_custom_round_twitter_announcements_order_by {
  created_at: order_by
  fallguys_custom_round: fallguys_custom_rounds_order_by
  fallguys_custom_round_id: order_by
  id: order_by
  is_agent_tweet: order_by
  twitter_tweet: twitter_tweets_order_by
  twitter_tweet_id: order_by
  updated_at: order_by
}

"""
primary key columns input for table: fallguys_custom_round_twitter_announcements
"""
input fallguys_custom_round_twitter_announcements_pk_columns_input {
  id: uuid!
}

"""
select columns of table "fallguys_custom_round_twitter_announcements"
"""
enum fallguys_custom_round_twitter_announcements_select_column {
  """column name"""
  created_at

  """column name"""
  fallguys_custom_round_id

  """column name"""
  id

  """column name"""
  is_agent_tweet

  """column name"""
  twitter_tweet_id

  """column name"""
  updated_at
}

"""
select "fallguys_custom_round_twitter_announcements_aggregate_bool_exp_bool_and_arguments_columns" columns of table "fallguys_custom_round_twitter_announcements"
"""
enum fallguys_custom_round_twitter_announcements_select_column_fallguys_custom_round_twitter_announcements_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_agent_tweet
}

"""
select "fallguys_custom_round_twitter_announcements_aggregate_bool_exp_bool_or_arguments_columns" columns of table "fallguys_custom_round_twitter_announcements"
"""
enum fallguys_custom_round_twitter_announcements_select_column_fallguys_custom_round_twitter_announcements_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_agent_tweet
}

"""
input type for updating data in table "fallguys_custom_round_twitter_announcements"
"""
input fallguys_custom_round_twitter_announcements_set_input {
  created_at: timestamptz
  fallguys_custom_round_id: uuid
  id: uuid
  is_agent_tweet: Boolean
  twitter_tweet_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "fallguys_custom_round_twitter_announcements"
"""
input fallguys_custom_round_twitter_announcements_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: fallguys_custom_round_twitter_announcements_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input fallguys_custom_round_twitter_announcements_stream_cursor_value_input {
  created_at: timestamptz
  fallguys_custom_round_id: uuid
  id: uuid
  is_agent_tweet: Boolean
  twitter_tweet_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "fallguys_custom_round_twitter_announcements"
"""
enum fallguys_custom_round_twitter_announcements_update_column {
  """column name"""
  created_at

  """column name"""
  fallguys_custom_round_id

  """column name"""
  id

  """column name"""
  is_agent_tweet

  """column name"""
  twitter_tweet_id

  """column name"""
  updated_at
}

input fallguys_custom_round_twitter_announcements_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: fallguys_custom_round_twitter_announcements_set_input

  """filter the rows which have to be updated"""
  where: fallguys_custom_round_twitter_announcements_bool_exp!
}

"""
columns and relationships of "fallguys_custom_rounds"
"""
type fallguys_custom_rounds {
  created_at: timestamptz!

  """An array relationship"""
  fallguys_custom_round_twitter_announcements(
    """distinct select on columns"""
    distinct_on: [fallguys_custom_round_twitter_announcements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_custom_round_twitter_announcements_order_by!]

    """filter the rows returned"""
    where: fallguys_custom_round_twitter_announcements_bool_exp
  ): [fallguys_custom_round_twitter_announcements!]!

  """An aggregate relationship"""
  fallguys_custom_round_twitter_announcements_aggregate(
    """distinct select on columns"""
    distinct_on: [fallguys_custom_round_twitter_announcements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_custom_round_twitter_announcements_order_by!]

    """filter the rows returned"""
    where: fallguys_custom_round_twitter_announcements_bool_exp
  ): fallguys_custom_round_twitter_announcements_aggregate!

  """An array relationship"""
  fallguys_match_rounds(
    """distinct select on columns"""
    distinct_on: [fallguys_match_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_match_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_match_rounds_bool_exp
  ): [fallguys_match_rounds!]!

  """An aggregate relationship"""
  fallguys_match_rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [fallguys_match_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_match_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_match_rounds_bool_exp
  ): fallguys_match_rounds_aggregate!
  id: uuid!
  in_game_creator_name: String
  name: String!

  """An object relationship"""
  person: persons
  person_id: uuid
  share_code: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "fallguys_custom_rounds"
"""
type fallguys_custom_rounds_aggregate {
  aggregate: fallguys_custom_rounds_aggregate_fields
  nodes: [fallguys_custom_rounds!]!
}

input fallguys_custom_rounds_aggregate_bool_exp {
  count: fallguys_custom_rounds_aggregate_bool_exp_count
}

input fallguys_custom_rounds_aggregate_bool_exp_count {
  arguments: [fallguys_custom_rounds_select_column!]
  distinct: Boolean
  filter: fallguys_custom_rounds_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "fallguys_custom_rounds"
"""
type fallguys_custom_rounds_aggregate_fields {
  count(columns: [fallguys_custom_rounds_select_column!], distinct: Boolean): Int!
  max: fallguys_custom_rounds_max_fields
  min: fallguys_custom_rounds_min_fields
}

"""
order by aggregate values of table "fallguys_custom_rounds"
"""
input fallguys_custom_rounds_aggregate_order_by {
  count: order_by
  max: fallguys_custom_rounds_max_order_by
  min: fallguys_custom_rounds_min_order_by
}

"""
input type for inserting array relation for remote table "fallguys_custom_rounds"
"""
input fallguys_custom_rounds_arr_rel_insert_input {
  data: [fallguys_custom_rounds_insert_input!]!

  """upsert condition"""
  on_conflict: fallguys_custom_rounds_on_conflict
}

"""
Boolean expression to filter rows from the table "fallguys_custom_rounds". All fields are combined with a logical 'AND'.
"""
input fallguys_custom_rounds_bool_exp {
  _and: [fallguys_custom_rounds_bool_exp!]
  _not: fallguys_custom_rounds_bool_exp
  _or: [fallguys_custom_rounds_bool_exp!]
  created_at: timestamptz_comparison_exp
  fallguys_custom_round_twitter_announcements: fallguys_custom_round_twitter_announcements_bool_exp
  fallguys_custom_round_twitter_announcements_aggregate: fallguys_custom_round_twitter_announcements_aggregate_bool_exp
  fallguys_match_rounds: fallguys_match_rounds_bool_exp
  fallguys_match_rounds_aggregate: fallguys_match_rounds_aggregate_bool_exp
  id: uuid_comparison_exp
  in_game_creator_name: String_comparison_exp
  name: String_comparison_exp
  person: persons_bool_exp
  person_id: uuid_comparison_exp
  share_code: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "fallguys_custom_rounds"
"""
enum fallguys_custom_rounds_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  fallguys_custom_rounds_pkey

  """
  unique or primary key constraint on columns "share_code"
  """
  fallguys_custom_rounds_share_code_key
}

"""
input type for inserting data into table "fallguys_custom_rounds"
"""
input fallguys_custom_rounds_insert_input {
  created_at: timestamptz
  fallguys_custom_round_twitter_announcements: fallguys_custom_round_twitter_announcements_arr_rel_insert_input
  fallguys_match_rounds: fallguys_match_rounds_arr_rel_insert_input
  id: uuid
  in_game_creator_name: String
  name: String
  person: persons_obj_rel_insert_input
  person_id: uuid
  share_code: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type fallguys_custom_rounds_max_fields {
  created_at: timestamptz
  id: uuid
  in_game_creator_name: String
  name: String
  person_id: uuid
  share_code: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "fallguys_custom_rounds"
"""
input fallguys_custom_rounds_max_order_by {
  created_at: order_by
  id: order_by
  in_game_creator_name: order_by
  name: order_by
  person_id: order_by
  share_code: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type fallguys_custom_rounds_min_fields {
  created_at: timestamptz
  id: uuid
  in_game_creator_name: String
  name: String
  person_id: uuid
  share_code: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "fallguys_custom_rounds"
"""
input fallguys_custom_rounds_min_order_by {
  created_at: order_by
  id: order_by
  in_game_creator_name: order_by
  name: order_by
  person_id: order_by
  share_code: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "fallguys_custom_rounds"
"""
type fallguys_custom_rounds_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [fallguys_custom_rounds!]!
}

"""
input type for inserting object relation for remote table "fallguys_custom_rounds"
"""
input fallguys_custom_rounds_obj_rel_insert_input {
  data: fallguys_custom_rounds_insert_input!

  """upsert condition"""
  on_conflict: fallguys_custom_rounds_on_conflict
}

"""
on_conflict condition type for table "fallguys_custom_rounds"
"""
input fallguys_custom_rounds_on_conflict {
  constraint: fallguys_custom_rounds_constraint!
  update_columns: [fallguys_custom_rounds_update_column!]! = []
  where: fallguys_custom_rounds_bool_exp
}

"""Ordering options when selecting data from "fallguys_custom_rounds"."""
input fallguys_custom_rounds_order_by {
  created_at: order_by
  fallguys_custom_round_twitter_announcements_aggregate: fallguys_custom_round_twitter_announcements_aggregate_order_by
  fallguys_match_rounds_aggregate: fallguys_match_rounds_aggregate_order_by
  id: order_by
  in_game_creator_name: order_by
  name: order_by
  person: persons_order_by
  person_id: order_by
  share_code: order_by
  updated_at: order_by
}

"""primary key columns input for table: fallguys_custom_rounds"""
input fallguys_custom_rounds_pk_columns_input {
  id: uuid!
}

"""
select columns of table "fallguys_custom_rounds"
"""
enum fallguys_custom_rounds_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  in_game_creator_name

  """column name"""
  name

  """column name"""
  person_id

  """column name"""
  share_code

  """column name"""
  updated_at
}

"""
input type for updating data in table "fallguys_custom_rounds"
"""
input fallguys_custom_rounds_set_input {
  created_at: timestamptz
  id: uuid
  in_game_creator_name: String
  name: String
  person_id: uuid
  share_code: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "fallguys_custom_rounds"
"""
input fallguys_custom_rounds_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: fallguys_custom_rounds_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input fallguys_custom_rounds_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  in_game_creator_name: String
  name: String
  person_id: uuid
  share_code: String
  updated_at: timestamptz
}

"""
update columns of table "fallguys_custom_rounds"
"""
enum fallguys_custom_rounds_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  in_game_creator_name

  """column name"""
  name

  """column name"""
  person_id

  """column name"""
  share_code

  """column name"""
  updated_at
}

input fallguys_custom_rounds_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: fallguys_custom_rounds_set_input

  """filter the rows which have to be updated"""
  where: fallguys_custom_rounds_bool_exp!
}

"""
columns and relationships of "fallguys_match_rounds"
"""
type fallguys_match_rounds {
  created_at: timestamptz!
  end_time: timestamptz

  """An object relationship"""
  fallguys_custom_round: fallguys_custom_rounds
  fallguys_custom_round_id: uuid

  """An object relationship"""
  fallguys_match: fallguys_matches!
  fallguys_match_id: uuid!

  """An object relationship"""
  fallguys_round: fallguys_rounds
  fallguys_round_id: uuid
  id: uuid!
  index: Int
  is_aborted: Boolean
  start_time: timestamptz!
  updated_at: timestamptz!
}

"""
aggregated selection of "fallguys_match_rounds"
"""
type fallguys_match_rounds_aggregate {
  aggregate: fallguys_match_rounds_aggregate_fields
  nodes: [fallguys_match_rounds!]!
}

input fallguys_match_rounds_aggregate_bool_exp {
  bool_and: fallguys_match_rounds_aggregate_bool_exp_bool_and
  bool_or: fallguys_match_rounds_aggregate_bool_exp_bool_or
  count: fallguys_match_rounds_aggregate_bool_exp_count
}

input fallguys_match_rounds_aggregate_bool_exp_bool_and {
  arguments: fallguys_match_rounds_select_column_fallguys_match_rounds_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: fallguys_match_rounds_bool_exp
  predicate: Boolean_comparison_exp!
}

input fallguys_match_rounds_aggregate_bool_exp_bool_or {
  arguments: fallguys_match_rounds_select_column_fallguys_match_rounds_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: fallguys_match_rounds_bool_exp
  predicate: Boolean_comparison_exp!
}

input fallguys_match_rounds_aggregate_bool_exp_count {
  arguments: [fallguys_match_rounds_select_column!]
  distinct: Boolean
  filter: fallguys_match_rounds_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "fallguys_match_rounds"
"""
type fallguys_match_rounds_aggregate_fields {
  avg: fallguys_match_rounds_avg_fields
  count(columns: [fallguys_match_rounds_select_column!], distinct: Boolean): Int!
  max: fallguys_match_rounds_max_fields
  min: fallguys_match_rounds_min_fields
  stddev: fallguys_match_rounds_stddev_fields
  stddev_pop: fallguys_match_rounds_stddev_pop_fields
  stddev_samp: fallguys_match_rounds_stddev_samp_fields
  sum: fallguys_match_rounds_sum_fields
  var_pop: fallguys_match_rounds_var_pop_fields
  var_samp: fallguys_match_rounds_var_samp_fields
  variance: fallguys_match_rounds_variance_fields
}

"""
order by aggregate values of table "fallguys_match_rounds"
"""
input fallguys_match_rounds_aggregate_order_by {
  avg: fallguys_match_rounds_avg_order_by
  count: order_by
  max: fallguys_match_rounds_max_order_by
  min: fallguys_match_rounds_min_order_by
  stddev: fallguys_match_rounds_stddev_order_by
  stddev_pop: fallguys_match_rounds_stddev_pop_order_by
  stddev_samp: fallguys_match_rounds_stddev_samp_order_by
  sum: fallguys_match_rounds_sum_order_by
  var_pop: fallguys_match_rounds_var_pop_order_by
  var_samp: fallguys_match_rounds_var_samp_order_by
  variance: fallguys_match_rounds_variance_order_by
}

"""
input type for inserting array relation for remote table "fallguys_match_rounds"
"""
input fallguys_match_rounds_arr_rel_insert_input {
  data: [fallguys_match_rounds_insert_input!]!

  """upsert condition"""
  on_conflict: fallguys_match_rounds_on_conflict
}

"""aggregate avg on columns"""
type fallguys_match_rounds_avg_fields {
  index: Float
}

"""
order by avg() on columns of table "fallguys_match_rounds"
"""
input fallguys_match_rounds_avg_order_by {
  index: order_by
}

"""
Boolean expression to filter rows from the table "fallguys_match_rounds". All fields are combined with a logical 'AND'.
"""
input fallguys_match_rounds_bool_exp {
  _and: [fallguys_match_rounds_bool_exp!]
  _not: fallguys_match_rounds_bool_exp
  _or: [fallguys_match_rounds_bool_exp!]
  created_at: timestamptz_comparison_exp
  end_time: timestamptz_comparison_exp
  fallguys_custom_round: fallguys_custom_rounds_bool_exp
  fallguys_custom_round_id: uuid_comparison_exp
  fallguys_match: fallguys_matches_bool_exp
  fallguys_match_id: uuid_comparison_exp
  fallguys_round: fallguys_rounds_bool_exp
  fallguys_round_id: uuid_comparison_exp
  id: uuid_comparison_exp
  index: Int_comparison_exp
  is_aborted: Boolean_comparison_exp
  start_time: timestamptz_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "fallguys_match_rounds"
"""
enum fallguys_match_rounds_constraint {
  """
  unique or primary key constraint on columns "fallguys_match_id", "index"
  """
  fallguys_match_rounds_fallguys_match_id_index_key

  """
  unique or primary key constraint on columns "id"
  """
  fallguys_match_rounds_pkey
}

"""
input type for incrementing numeric columns in table "fallguys_match_rounds"
"""
input fallguys_match_rounds_inc_input {
  index: Int
}

"""
input type for inserting data into table "fallguys_match_rounds"
"""
input fallguys_match_rounds_insert_input {
  created_at: timestamptz
  end_time: timestamptz
  fallguys_custom_round: fallguys_custom_rounds_obj_rel_insert_input
  fallguys_custom_round_id: uuid
  fallguys_match: fallguys_matches_obj_rel_insert_input
  fallguys_match_id: uuid
  fallguys_round: fallguys_rounds_obj_rel_insert_input
  fallguys_round_id: uuid
  id: uuid
  index: Int
  is_aborted: Boolean
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate max on columns"""
type fallguys_match_rounds_max_fields {
  created_at: timestamptz
  end_time: timestamptz
  fallguys_custom_round_id: uuid
  fallguys_match_id: uuid
  fallguys_round_id: uuid
  id: uuid
  index: Int
  start_time: timestamptz
  updated_at: timestamptz
}

"""
order by max() on columns of table "fallguys_match_rounds"
"""
input fallguys_match_rounds_max_order_by {
  created_at: order_by
  end_time: order_by
  fallguys_custom_round_id: order_by
  fallguys_match_id: order_by
  fallguys_round_id: order_by
  id: order_by
  index: order_by
  start_time: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type fallguys_match_rounds_min_fields {
  created_at: timestamptz
  end_time: timestamptz
  fallguys_custom_round_id: uuid
  fallguys_match_id: uuid
  fallguys_round_id: uuid
  id: uuid
  index: Int
  start_time: timestamptz
  updated_at: timestamptz
}

"""
order by min() on columns of table "fallguys_match_rounds"
"""
input fallguys_match_rounds_min_order_by {
  created_at: order_by
  end_time: order_by
  fallguys_custom_round_id: order_by
  fallguys_match_id: order_by
  fallguys_round_id: order_by
  id: order_by
  index: order_by
  start_time: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "fallguys_match_rounds"
"""
type fallguys_match_rounds_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [fallguys_match_rounds!]!
}

"""
on_conflict condition type for table "fallguys_match_rounds"
"""
input fallguys_match_rounds_on_conflict {
  constraint: fallguys_match_rounds_constraint!
  update_columns: [fallguys_match_rounds_update_column!]! = []
  where: fallguys_match_rounds_bool_exp
}

"""Ordering options when selecting data from "fallguys_match_rounds"."""
input fallguys_match_rounds_order_by {
  created_at: order_by
  end_time: order_by
  fallguys_custom_round: fallguys_custom_rounds_order_by
  fallguys_custom_round_id: order_by
  fallguys_match: fallguys_matches_order_by
  fallguys_match_id: order_by
  fallguys_round: fallguys_rounds_order_by
  fallguys_round_id: order_by
  id: order_by
  index: order_by
  is_aborted: order_by
  start_time: order_by
  updated_at: order_by
}

"""primary key columns input for table: fallguys_match_rounds"""
input fallguys_match_rounds_pk_columns_input {
  id: uuid!
}

"""
select columns of table "fallguys_match_rounds"
"""
enum fallguys_match_rounds_select_column {
  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  fallguys_custom_round_id

  """column name"""
  fallguys_match_id

  """column name"""
  fallguys_round_id

  """column name"""
  id

  """column name"""
  index

  """column name"""
  is_aborted

  """column name"""
  start_time

  """column name"""
  updated_at
}

"""
select "fallguys_match_rounds_aggregate_bool_exp_bool_and_arguments_columns" columns of table "fallguys_match_rounds"
"""
enum fallguys_match_rounds_select_column_fallguys_match_rounds_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_aborted
}

"""
select "fallguys_match_rounds_aggregate_bool_exp_bool_or_arguments_columns" columns of table "fallguys_match_rounds"
"""
enum fallguys_match_rounds_select_column_fallguys_match_rounds_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_aborted
}

"""
input type for updating data in table "fallguys_match_rounds"
"""
input fallguys_match_rounds_set_input {
  created_at: timestamptz
  end_time: timestamptz
  fallguys_custom_round_id: uuid
  fallguys_match_id: uuid
  fallguys_round_id: uuid
  id: uuid
  index: Int
  is_aborted: Boolean
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type fallguys_match_rounds_stddev_fields {
  index: Float
}

"""
order by stddev() on columns of table "fallguys_match_rounds"
"""
input fallguys_match_rounds_stddev_order_by {
  index: order_by
}

"""aggregate stddev_pop on columns"""
type fallguys_match_rounds_stddev_pop_fields {
  index: Float
}

"""
order by stddev_pop() on columns of table "fallguys_match_rounds"
"""
input fallguys_match_rounds_stddev_pop_order_by {
  index: order_by
}

"""aggregate stddev_samp on columns"""
type fallguys_match_rounds_stddev_samp_fields {
  index: Float
}

"""
order by stddev_samp() on columns of table "fallguys_match_rounds"
"""
input fallguys_match_rounds_stddev_samp_order_by {
  index: order_by
}

"""
Streaming cursor of the table "fallguys_match_rounds"
"""
input fallguys_match_rounds_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: fallguys_match_rounds_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input fallguys_match_rounds_stream_cursor_value_input {
  created_at: timestamptz
  end_time: timestamptz
  fallguys_custom_round_id: uuid
  fallguys_match_id: uuid
  fallguys_round_id: uuid
  id: uuid
  index: Int
  is_aborted: Boolean
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type fallguys_match_rounds_sum_fields {
  index: Int
}

"""
order by sum() on columns of table "fallguys_match_rounds"
"""
input fallguys_match_rounds_sum_order_by {
  index: order_by
}

"""
update columns of table "fallguys_match_rounds"
"""
enum fallguys_match_rounds_update_column {
  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  fallguys_custom_round_id

  """column name"""
  fallguys_match_id

  """column name"""
  fallguys_round_id

  """column name"""
  id

  """column name"""
  index

  """column name"""
  is_aborted

  """column name"""
  start_time

  """column name"""
  updated_at
}

input fallguys_match_rounds_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: fallguys_match_rounds_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: fallguys_match_rounds_set_input

  """filter the rows which have to be updated"""
  where: fallguys_match_rounds_bool_exp!
}

"""aggregate var_pop on columns"""
type fallguys_match_rounds_var_pop_fields {
  index: Float
}

"""
order by var_pop() on columns of table "fallguys_match_rounds"
"""
input fallguys_match_rounds_var_pop_order_by {
  index: order_by
}

"""aggregate var_samp on columns"""
type fallguys_match_rounds_var_samp_fields {
  index: Float
}

"""
order by var_samp() on columns of table "fallguys_match_rounds"
"""
input fallguys_match_rounds_var_samp_order_by {
  index: order_by
}

"""aggregate variance on columns"""
type fallguys_match_rounds_variance_fields {
  index: Float
}

"""
order by variance() on columns of table "fallguys_match_rounds"
"""
input fallguys_match_rounds_variance_order_by {
  index: order_by
}

"""
columns and relationships of "fallguys_matches"
"""
type fallguys_matches {
  created_at: timestamptz!
  end_time: timestamptz

  """An array relationship"""
  fallguys_match_rounds(
    """distinct select on columns"""
    distinct_on: [fallguys_match_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_match_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_match_rounds_bool_exp
  ): [fallguys_match_rounds!]!

  """An aggregate relationship"""
  fallguys_match_rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [fallguys_match_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_match_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_match_rounds_bool_exp
  ): fallguys_match_rounds_aggregate!
  id: uuid!
  index: Int
  is_aborted: Boolean

  """An object relationship"""
  program: programs!
  program_id: uuid!
  start_time: timestamptz!
  updated_at: timestamptz!
}

"""
aggregated selection of "fallguys_matches"
"""
type fallguys_matches_aggregate {
  aggregate: fallguys_matches_aggregate_fields
  nodes: [fallguys_matches!]!
}

input fallguys_matches_aggregate_bool_exp {
  bool_and: fallguys_matches_aggregate_bool_exp_bool_and
  bool_or: fallguys_matches_aggregate_bool_exp_bool_or
  count: fallguys_matches_aggregate_bool_exp_count
}

input fallguys_matches_aggregate_bool_exp_bool_and {
  arguments: fallguys_matches_select_column_fallguys_matches_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: fallguys_matches_bool_exp
  predicate: Boolean_comparison_exp!
}

input fallguys_matches_aggregate_bool_exp_bool_or {
  arguments: fallguys_matches_select_column_fallguys_matches_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: fallguys_matches_bool_exp
  predicate: Boolean_comparison_exp!
}

input fallguys_matches_aggregate_bool_exp_count {
  arguments: [fallguys_matches_select_column!]
  distinct: Boolean
  filter: fallguys_matches_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "fallguys_matches"
"""
type fallguys_matches_aggregate_fields {
  avg: fallguys_matches_avg_fields
  count(columns: [fallguys_matches_select_column!], distinct: Boolean): Int!
  max: fallguys_matches_max_fields
  min: fallguys_matches_min_fields
  stddev: fallguys_matches_stddev_fields
  stddev_pop: fallguys_matches_stddev_pop_fields
  stddev_samp: fallguys_matches_stddev_samp_fields
  sum: fallguys_matches_sum_fields
  var_pop: fallguys_matches_var_pop_fields
  var_samp: fallguys_matches_var_samp_fields
  variance: fallguys_matches_variance_fields
}

"""
order by aggregate values of table "fallguys_matches"
"""
input fallguys_matches_aggregate_order_by {
  avg: fallguys_matches_avg_order_by
  count: order_by
  max: fallguys_matches_max_order_by
  min: fallguys_matches_min_order_by
  stddev: fallguys_matches_stddev_order_by
  stddev_pop: fallguys_matches_stddev_pop_order_by
  stddev_samp: fallguys_matches_stddev_samp_order_by
  sum: fallguys_matches_sum_order_by
  var_pop: fallguys_matches_var_pop_order_by
  var_samp: fallguys_matches_var_samp_order_by
  variance: fallguys_matches_variance_order_by
}

"""
input type for inserting array relation for remote table "fallguys_matches"
"""
input fallguys_matches_arr_rel_insert_input {
  data: [fallguys_matches_insert_input!]!

  """upsert condition"""
  on_conflict: fallguys_matches_on_conflict
}

"""aggregate avg on columns"""
type fallguys_matches_avg_fields {
  index: Float
}

"""
order by avg() on columns of table "fallguys_matches"
"""
input fallguys_matches_avg_order_by {
  index: order_by
}

"""
Boolean expression to filter rows from the table "fallguys_matches". All fields are combined with a logical 'AND'.
"""
input fallguys_matches_bool_exp {
  _and: [fallguys_matches_bool_exp!]
  _not: fallguys_matches_bool_exp
  _or: [fallguys_matches_bool_exp!]
  created_at: timestamptz_comparison_exp
  end_time: timestamptz_comparison_exp
  fallguys_match_rounds: fallguys_match_rounds_bool_exp
  fallguys_match_rounds_aggregate: fallguys_match_rounds_aggregate_bool_exp
  id: uuid_comparison_exp
  index: Int_comparison_exp
  is_aborted: Boolean_comparison_exp
  program: programs_bool_exp
  program_id: uuid_comparison_exp
  start_time: timestamptz_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "fallguys_matches"
"""
enum fallguys_matches_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  fallguys_matches_pkey

  """
  unique or primary key constraint on columns "index", "program_id"
  """
  fallguys_matches_program_id_index_key
}

"""
input type for incrementing numeric columns in table "fallguys_matches"
"""
input fallguys_matches_inc_input {
  index: Int
}

"""
input type for inserting data into table "fallguys_matches"
"""
input fallguys_matches_insert_input {
  created_at: timestamptz
  end_time: timestamptz
  fallguys_match_rounds: fallguys_match_rounds_arr_rel_insert_input
  id: uuid
  index: Int
  is_aborted: Boolean
  program: programs_obj_rel_insert_input
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate max on columns"""
type fallguys_matches_max_fields {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""
order by max() on columns of table "fallguys_matches"
"""
input fallguys_matches_max_order_by {
  created_at: order_by
  end_time: order_by
  id: order_by
  index: order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type fallguys_matches_min_fields {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""
order by min() on columns of table "fallguys_matches"
"""
input fallguys_matches_min_order_by {
  created_at: order_by
  end_time: order_by
  id: order_by
  index: order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "fallguys_matches"
"""
type fallguys_matches_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [fallguys_matches!]!
}

"""
input type for inserting object relation for remote table "fallguys_matches"
"""
input fallguys_matches_obj_rel_insert_input {
  data: fallguys_matches_insert_input!

  """upsert condition"""
  on_conflict: fallguys_matches_on_conflict
}

"""
on_conflict condition type for table "fallguys_matches"
"""
input fallguys_matches_on_conflict {
  constraint: fallguys_matches_constraint!
  update_columns: [fallguys_matches_update_column!]! = []
  where: fallguys_matches_bool_exp
}

"""Ordering options when selecting data from "fallguys_matches"."""
input fallguys_matches_order_by {
  created_at: order_by
  end_time: order_by
  fallguys_match_rounds_aggregate: fallguys_match_rounds_aggregate_order_by
  id: order_by
  index: order_by
  is_aborted: order_by
  program: programs_order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
}

"""primary key columns input for table: fallguys_matches"""
input fallguys_matches_pk_columns_input {
  id: uuid!
}

"""
select columns of table "fallguys_matches"
"""
enum fallguys_matches_select_column {
  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  index

  """column name"""
  is_aborted

  """column name"""
  program_id

  """column name"""
  start_time

  """column name"""
  updated_at
}

"""
select "fallguys_matches_aggregate_bool_exp_bool_and_arguments_columns" columns of table "fallguys_matches"
"""
enum fallguys_matches_select_column_fallguys_matches_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_aborted
}

"""
select "fallguys_matches_aggregate_bool_exp_bool_or_arguments_columns" columns of table "fallguys_matches"
"""
enum fallguys_matches_select_column_fallguys_matches_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_aborted
}

"""
input type for updating data in table "fallguys_matches"
"""
input fallguys_matches_set_input {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  is_aborted: Boolean
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type fallguys_matches_stddev_fields {
  index: Float
}

"""
order by stddev() on columns of table "fallguys_matches"
"""
input fallguys_matches_stddev_order_by {
  index: order_by
}

"""aggregate stddev_pop on columns"""
type fallguys_matches_stddev_pop_fields {
  index: Float
}

"""
order by stddev_pop() on columns of table "fallguys_matches"
"""
input fallguys_matches_stddev_pop_order_by {
  index: order_by
}

"""aggregate stddev_samp on columns"""
type fallguys_matches_stddev_samp_fields {
  index: Float
}

"""
order by stddev_samp() on columns of table "fallguys_matches"
"""
input fallguys_matches_stddev_samp_order_by {
  index: order_by
}

"""
Streaming cursor of the table "fallguys_matches"
"""
input fallguys_matches_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: fallguys_matches_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input fallguys_matches_stream_cursor_value_input {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  is_aborted: Boolean
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type fallguys_matches_sum_fields {
  index: Int
}

"""
order by sum() on columns of table "fallguys_matches"
"""
input fallguys_matches_sum_order_by {
  index: order_by
}

"""
update columns of table "fallguys_matches"
"""
enum fallguys_matches_update_column {
  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  index

  """column name"""
  is_aborted

  """column name"""
  program_id

  """column name"""
  start_time

  """column name"""
  updated_at
}

input fallguys_matches_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: fallguys_matches_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: fallguys_matches_set_input

  """filter the rows which have to be updated"""
  where: fallguys_matches_bool_exp!
}

"""aggregate var_pop on columns"""
type fallguys_matches_var_pop_fields {
  index: Float
}

"""
order by var_pop() on columns of table "fallguys_matches"
"""
input fallguys_matches_var_pop_order_by {
  index: order_by
}

"""aggregate var_samp on columns"""
type fallguys_matches_var_samp_fields {
  index: Float
}

"""
order by var_samp() on columns of table "fallguys_matches"
"""
input fallguys_matches_var_samp_order_by {
  index: order_by
}

"""aggregate variance on columns"""
type fallguys_matches_variance_fields {
  index: Float
}

"""
order by variance() on columns of table "fallguys_matches"
"""
input fallguys_matches_variance_order_by {
  index: order_by
}

"""
columns and relationships of "fallguys_rounds"
"""
type fallguys_rounds {
  created_at: timestamptz!

  """An array relationship"""
  fallguys_match_rounds(
    """distinct select on columns"""
    distinct_on: [fallguys_match_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_match_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_match_rounds_bool_exp
  ): [fallguys_match_rounds!]!

  """An aggregate relationship"""
  fallguys_match_rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [fallguys_match_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_match_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_match_rounds_bool_exp
  ): fallguys_match_rounds_aggregate!
  id: uuid!
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "fallguys_rounds"
"""
type fallguys_rounds_aggregate {
  aggregate: fallguys_rounds_aggregate_fields
  nodes: [fallguys_rounds!]!
}

"""
aggregate fields of "fallguys_rounds"
"""
type fallguys_rounds_aggregate_fields {
  count(columns: [fallguys_rounds_select_column!], distinct: Boolean): Int!
  max: fallguys_rounds_max_fields
  min: fallguys_rounds_min_fields
}

"""
Boolean expression to filter rows from the table "fallguys_rounds". All fields are combined with a logical 'AND'.
"""
input fallguys_rounds_bool_exp {
  _and: [fallguys_rounds_bool_exp!]
  _not: fallguys_rounds_bool_exp
  _or: [fallguys_rounds_bool_exp!]
  created_at: timestamptz_comparison_exp
  fallguys_match_rounds: fallguys_match_rounds_bool_exp
  fallguys_match_rounds_aggregate: fallguys_match_rounds_aggregate_bool_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "fallguys_rounds"
"""
enum fallguys_rounds_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  fallguys_rounds_pkey
}

"""
input type for inserting data into table "fallguys_rounds"
"""
input fallguys_rounds_insert_input {
  created_at: timestamptz
  fallguys_match_rounds: fallguys_match_rounds_arr_rel_insert_input
  id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type fallguys_rounds_max_fields {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type fallguys_rounds_min_fields {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "fallguys_rounds"
"""
type fallguys_rounds_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [fallguys_rounds!]!
}

"""
input type for inserting object relation for remote table "fallguys_rounds"
"""
input fallguys_rounds_obj_rel_insert_input {
  data: fallguys_rounds_insert_input!

  """upsert condition"""
  on_conflict: fallguys_rounds_on_conflict
}

"""
on_conflict condition type for table "fallguys_rounds"
"""
input fallguys_rounds_on_conflict {
  constraint: fallguys_rounds_constraint!
  update_columns: [fallguys_rounds_update_column!]! = []
  where: fallguys_rounds_bool_exp
}

"""Ordering options when selecting data from "fallguys_rounds"."""
input fallguys_rounds_order_by {
  created_at: order_by
  fallguys_match_rounds_aggregate: fallguys_match_rounds_aggregate_order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: fallguys_rounds"""
input fallguys_rounds_pk_columns_input {
  id: uuid!
}

"""
select columns of table "fallguys_rounds"
"""
enum fallguys_rounds_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "fallguys_rounds"
"""
input fallguys_rounds_set_input {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "fallguys_rounds"
"""
input fallguys_rounds_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: fallguys_rounds_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input fallguys_rounds_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
update columns of table "fallguys_rounds"
"""
enum fallguys_rounds_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

input fallguys_rounds_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: fallguys_rounds_set_input

  """filter the rows which have to be updated"""
  where: fallguys_rounds_bool_exp!
}

"""
columns and relationships of "fediverse_accounts"
"""
type fediverse_accounts {
  created_at: timestamptz!
  fediverse_acct: String!
  id: uuid!
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "fediverse_accounts"
"""
type fediverse_accounts_aggregate {
  aggregate: fediverse_accounts_aggregate_fields
  nodes: [fediverse_accounts!]!
}

"""
aggregate fields of "fediverse_accounts"
"""
type fediverse_accounts_aggregate_fields {
  count(columns: [fediverse_accounts_select_column!], distinct: Boolean): Int!
  max: fediverse_accounts_max_fields
  min: fediverse_accounts_min_fields
}

"""
Boolean expression to filter rows from the table "fediverse_accounts". All fields are combined with a logical 'AND'.
"""
input fediverse_accounts_bool_exp {
  _and: [fediverse_accounts_bool_exp!]
  _not: fediverse_accounts_bool_exp
  _or: [fediverse_accounts_bool_exp!]
  created_at: timestamptz_comparison_exp
  fediverse_acct: String_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "fediverse_accounts"
"""
enum fediverse_accounts_constraint {
  """
  unique or primary key constraint on columns "fediverse_acct"
  """
  fediverse_accounts_fediverse_acct_key

  """
  unique or primary key constraint on columns "id"
  """
  fediverse_accounts_pkey
}

"""
input type for inserting data into table "fediverse_accounts"
"""
input fediverse_accounts_insert_input {
  created_at: timestamptz
  fediverse_acct: String
  id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type fediverse_accounts_max_fields {
  created_at: timestamptz
  fediverse_acct: String
  id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type fediverse_accounts_min_fields {
  created_at: timestamptz
  fediverse_acct: String
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "fediverse_accounts"
"""
type fediverse_accounts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [fediverse_accounts!]!
}

"""
input type for inserting object relation for remote table "fediverse_accounts"
"""
input fediverse_accounts_obj_rel_insert_input {
  data: fediverse_accounts_insert_input!

  """upsert condition"""
  on_conflict: fediverse_accounts_on_conflict
}

"""
on_conflict condition type for table "fediverse_accounts"
"""
input fediverse_accounts_on_conflict {
  constraint: fediverse_accounts_constraint!
  update_columns: [fediverse_accounts_update_column!]! = []
  where: fediverse_accounts_bool_exp
}

"""Ordering options when selecting data from "fediverse_accounts"."""
input fediverse_accounts_order_by {
  created_at: order_by
  fediverse_acct: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: fediverse_accounts"""
input fediverse_accounts_pk_columns_input {
  id: uuid!
}

"""
select columns of table "fediverse_accounts"
"""
enum fediverse_accounts_select_column {
  """column name"""
  created_at

  """column name"""
  fediverse_acct

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "fediverse_accounts"
"""
input fediverse_accounts_set_input {
  created_at: timestamptz
  fediverse_acct: String
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "fediverse_accounts"
"""
input fediverse_accounts_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: fediverse_accounts_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input fediverse_accounts_stream_cursor_value_input {
  created_at: timestamptz
  fediverse_acct: String
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
update columns of table "fediverse_accounts"
"""
enum fediverse_accounts_update_column {
  """column name"""
  created_at

  """column name"""
  fediverse_acct

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

input fediverse_accounts_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: fediverse_accounts_set_input

  """filter the rows which have to be updated"""
  where: fediverse_accounts_bool_exp!
}

"""
columns and relationships of "games"
"""
type games {
  apple_app_store_url: String
  created_at: timestamptz!
  epic_games_url: String
  google_play_store_url: String
  id: uuid!
  name: String!
  nintendo_switch_url: String
  playstation_url: String
  steam_url: String
  updated_at: timestamptz!
  website_url: String
}

"""
aggregated selection of "games"
"""
type games_aggregate {
  aggregate: games_aggregate_fields
  nodes: [games!]!
}

"""
aggregate fields of "games"
"""
type games_aggregate_fields {
  count(columns: [games_select_column!], distinct: Boolean): Int!
  max: games_max_fields
  min: games_min_fields
}

"""
Boolean expression to filter rows from the table "games". All fields are combined with a logical 'AND'.
"""
input games_bool_exp {
  _and: [games_bool_exp!]
  _not: games_bool_exp
  _or: [games_bool_exp!]
  apple_app_store_url: String_comparison_exp
  created_at: timestamptz_comparison_exp
  epic_games_url: String_comparison_exp
  google_play_store_url: String_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  nintendo_switch_url: String_comparison_exp
  playstation_url: String_comparison_exp
  steam_url: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  website_url: String_comparison_exp
}

"""
unique or primary key constraints on table "games"
"""
enum games_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  games_pkey
}

"""
input type for inserting data into table "games"
"""
input games_insert_input {
  apple_app_store_url: String
  created_at: timestamptz
  epic_games_url: String
  google_play_store_url: String
  id: uuid
  name: String
  nintendo_switch_url: String
  playstation_url: String
  steam_url: String
  updated_at: timestamptz
  website_url: String
}

"""aggregate max on columns"""
type games_max_fields {
  apple_app_store_url: String
  created_at: timestamptz
  epic_games_url: String
  google_play_store_url: String
  id: uuid
  name: String
  nintendo_switch_url: String
  playstation_url: String
  steam_url: String
  updated_at: timestamptz
  website_url: String
}

"""aggregate min on columns"""
type games_min_fields {
  apple_app_store_url: String
  created_at: timestamptz
  epic_games_url: String
  google_play_store_url: String
  id: uuid
  name: String
  nintendo_switch_url: String
  playstation_url: String
  steam_url: String
  updated_at: timestamptz
  website_url: String
}

"""
response of any mutation on the table "games"
"""
type games_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [games!]!
}

"""
input type for inserting object relation for remote table "games"
"""
input games_obj_rel_insert_input {
  data: games_insert_input!

  """upsert condition"""
  on_conflict: games_on_conflict
}

"""
on_conflict condition type for table "games"
"""
input games_on_conflict {
  constraint: games_constraint!
  update_columns: [games_update_column!]! = []
  where: games_bool_exp
}

"""Ordering options when selecting data from "games"."""
input games_order_by {
  apple_app_store_url: order_by
  created_at: order_by
  epic_games_url: order_by
  google_play_store_url: order_by
  id: order_by
  name: order_by
  nintendo_switch_url: order_by
  playstation_url: order_by
  steam_url: order_by
  updated_at: order_by
  website_url: order_by
}

"""primary key columns input for table: games"""
input games_pk_columns_input {
  id: uuid!
}

"""
select columns of table "games"
"""
enum games_select_column {
  """column name"""
  apple_app_store_url

  """column name"""
  created_at

  """column name"""
  epic_games_url

  """column name"""
  google_play_store_url

  """column name"""
  id

  """column name"""
  name

  """column name"""
  nintendo_switch_url

  """column name"""
  playstation_url

  """column name"""
  steam_url

  """column name"""
  updated_at

  """column name"""
  website_url
}

"""
input type for updating data in table "games"
"""
input games_set_input {
  apple_app_store_url: String
  created_at: timestamptz
  epic_games_url: String
  google_play_store_url: String
  id: uuid
  name: String
  nintendo_switch_url: String
  playstation_url: String
  steam_url: String
  updated_at: timestamptz
  website_url: String
}

"""
Streaming cursor of the table "games"
"""
input games_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: games_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input games_stream_cursor_value_input {
  apple_app_store_url: String
  created_at: timestamptz
  epic_games_url: String
  google_play_store_url: String
  id: uuid
  name: String
  nintendo_switch_url: String
  playstation_url: String
  steam_url: String
  updated_at: timestamptz
  website_url: String
}

"""
update columns of table "games"
"""
enum games_update_column {
  """column name"""
  apple_app_store_url

  """column name"""
  created_at

  """column name"""
  epic_games_url

  """column name"""
  google_play_store_url

  """column name"""
  id

  """column name"""
  name

  """column name"""
  nintendo_switch_url

  """column name"""
  playstation_url

  """column name"""
  steam_url

  """column name"""
  updated_at

  """column name"""
  website_url
}

input games_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: games_set_input

  """filter the rows which have to be updated"""
  where: games_bool_exp!
}

"""
columns and relationships of "mariokart8deluxe_battle_courses"
"""
type mariokart8deluxe_battle_courses {
  created_at: timestamptz!
  id: uuid!
  index: Int!

  """An array relationship"""
  mariokart8deluxe_battle_matches(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_matches_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_matches_bool_exp
  ): [mariokart8deluxe_battle_matches!]!

  """An aggregate relationship"""
  mariokart8deluxe_battle_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_matches_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_matches_bool_exp
  ): mariokart8deluxe_battle_matches_aggregate!

  """An object relationship"""
  mariokart8deluxe_console: mariokart8deluxe_consoles
  mariokart8deluxe_console_id: uuid
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "mariokart8deluxe_battle_courses"
"""
type mariokart8deluxe_battle_courses_aggregate {
  aggregate: mariokart8deluxe_battle_courses_aggregate_fields
  nodes: [mariokart8deluxe_battle_courses!]!
}

"""
aggregate fields of "mariokart8deluxe_battle_courses"
"""
type mariokart8deluxe_battle_courses_aggregate_fields {
  avg: mariokart8deluxe_battle_courses_avg_fields
  count(columns: [mariokart8deluxe_battle_courses_select_column!], distinct: Boolean): Int!
  max: mariokart8deluxe_battle_courses_max_fields
  min: mariokart8deluxe_battle_courses_min_fields
  stddev: mariokart8deluxe_battle_courses_stddev_fields
  stddev_pop: mariokart8deluxe_battle_courses_stddev_pop_fields
  stddev_samp: mariokart8deluxe_battle_courses_stddev_samp_fields
  sum: mariokart8deluxe_battle_courses_sum_fields
  var_pop: mariokart8deluxe_battle_courses_var_pop_fields
  var_samp: mariokart8deluxe_battle_courses_var_samp_fields
  variance: mariokart8deluxe_battle_courses_variance_fields
}

"""aggregate avg on columns"""
type mariokart8deluxe_battle_courses_avg_fields {
  index: Float
}

"""
Boolean expression to filter rows from the table "mariokart8deluxe_battle_courses". All fields are combined with a logical 'AND'.
"""
input mariokart8deluxe_battle_courses_bool_exp {
  _and: [mariokart8deluxe_battle_courses_bool_exp!]
  _not: mariokart8deluxe_battle_courses_bool_exp
  _or: [mariokart8deluxe_battle_courses_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  index: Int_comparison_exp
  mariokart8deluxe_battle_matches: mariokart8deluxe_battle_matches_bool_exp
  mariokart8deluxe_battle_matches_aggregate: mariokart8deluxe_battle_matches_aggregate_bool_exp
  mariokart8deluxe_console: mariokart8deluxe_consoles_bool_exp
  mariokart8deluxe_console_id: uuid_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "mariokart8deluxe_battle_courses"
"""
enum mariokart8deluxe_battle_courses_constraint {
  """
  unique or primary key constraint on columns "index"
  """
  mariokart8deluxe_battle_courses_index_key

  """
  unique or primary key constraint on columns "name"
  """
  mariokart8deluxe_battle_courses_name_key

  """
  unique or primary key constraint on columns "id"
  """
  mariokart8deluxe_battle_courses_pkey
}

"""
input type for incrementing numeric columns in table "mariokart8deluxe_battle_courses"
"""
input mariokart8deluxe_battle_courses_inc_input {
  index: Int
}

"""
input type for inserting data into table "mariokart8deluxe_battle_courses"
"""
input mariokart8deluxe_battle_courses_insert_input {
  created_at: timestamptz
  id: uuid
  index: Int
  mariokart8deluxe_battle_matches: mariokart8deluxe_battle_matches_arr_rel_insert_input
  mariokart8deluxe_console: mariokart8deluxe_consoles_obj_rel_insert_input
  mariokart8deluxe_console_id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type mariokart8deluxe_battle_courses_max_fields {
  created_at: timestamptz
  id: uuid
  index: Int
  mariokart8deluxe_console_id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type mariokart8deluxe_battle_courses_min_fields {
  created_at: timestamptz
  id: uuid
  index: Int
  mariokart8deluxe_console_id: uuid
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "mariokart8deluxe_battle_courses"
"""
type mariokart8deluxe_battle_courses_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [mariokart8deluxe_battle_courses!]!
}

"""
input type for inserting object relation for remote table "mariokart8deluxe_battle_courses"
"""
input mariokart8deluxe_battle_courses_obj_rel_insert_input {
  data: mariokart8deluxe_battle_courses_insert_input!

  """upsert condition"""
  on_conflict: mariokart8deluxe_battle_courses_on_conflict
}

"""
on_conflict condition type for table "mariokart8deluxe_battle_courses"
"""
input mariokart8deluxe_battle_courses_on_conflict {
  constraint: mariokart8deluxe_battle_courses_constraint!
  update_columns: [mariokart8deluxe_battle_courses_update_column!]! = []
  where: mariokart8deluxe_battle_courses_bool_exp
}

"""
Ordering options when selecting data from "mariokart8deluxe_battle_courses".
"""
input mariokart8deluxe_battle_courses_order_by {
  created_at: order_by
  id: order_by
  index: order_by
  mariokart8deluxe_battle_matches_aggregate: mariokart8deluxe_battle_matches_aggregate_order_by
  mariokart8deluxe_console: mariokart8deluxe_consoles_order_by
  mariokart8deluxe_console_id: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: mariokart8deluxe_battle_courses"""
input mariokart8deluxe_battle_courses_pk_columns_input {
  id: uuid!
}

"""
select columns of table "mariokart8deluxe_battle_courses"
"""
enum mariokart8deluxe_battle_courses_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  index

  """column name"""
  mariokart8deluxe_console_id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "mariokart8deluxe_battle_courses"
"""
input mariokart8deluxe_battle_courses_set_input {
  created_at: timestamptz
  id: uuid
  index: Int
  mariokart8deluxe_console_id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type mariokart8deluxe_battle_courses_stddev_fields {
  index: Float
}

"""aggregate stddev_pop on columns"""
type mariokart8deluxe_battle_courses_stddev_pop_fields {
  index: Float
}

"""aggregate stddev_samp on columns"""
type mariokart8deluxe_battle_courses_stddev_samp_fields {
  index: Float
}

"""
Streaming cursor of the table "mariokart8deluxe_battle_courses"
"""
input mariokart8deluxe_battle_courses_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mariokart8deluxe_battle_courses_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mariokart8deluxe_battle_courses_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  index: Int
  mariokart8deluxe_console_id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type mariokart8deluxe_battle_courses_sum_fields {
  index: Int
}

"""
update columns of table "mariokart8deluxe_battle_courses"
"""
enum mariokart8deluxe_battle_courses_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  index

  """column name"""
  mariokart8deluxe_console_id

  """column name"""
  name

  """column name"""
  updated_at
}

input mariokart8deluxe_battle_courses_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: mariokart8deluxe_battle_courses_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: mariokart8deluxe_battle_courses_set_input

  """filter the rows which have to be updated"""
  where: mariokart8deluxe_battle_courses_bool_exp!
}

"""aggregate var_pop on columns"""
type mariokart8deluxe_battle_courses_var_pop_fields {
  index: Float
}

"""aggregate var_samp on columns"""
type mariokart8deluxe_battle_courses_var_samp_fields {
  index: Float
}

"""aggregate variance on columns"""
type mariokart8deluxe_battle_courses_variance_fields {
  index: Float
}

"""
columns and relationships of "mariokart8deluxe_battle_match_players"
"""
type mariokart8deluxe_battle_match_players {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  mariokart8deluxe_battle_match: mariokart8deluxe_battle_matches!
  mariokart8deluxe_battle_match_id: uuid!
  nickname: String!

  """An object relationship"""
  person: persons
  person_id: uuid
  updated_at: timestamptz!
}

"""
aggregated selection of "mariokart8deluxe_battle_match_players"
"""
type mariokart8deluxe_battle_match_players_aggregate {
  aggregate: mariokart8deluxe_battle_match_players_aggregate_fields
  nodes: [mariokart8deluxe_battle_match_players!]!
}

input mariokart8deluxe_battle_match_players_aggregate_bool_exp {
  count: mariokart8deluxe_battle_match_players_aggregate_bool_exp_count
}

input mariokart8deluxe_battle_match_players_aggregate_bool_exp_count {
  arguments: [mariokart8deluxe_battle_match_players_select_column!]
  distinct: Boolean
  filter: mariokart8deluxe_battle_match_players_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "mariokart8deluxe_battle_match_players"
"""
type mariokart8deluxe_battle_match_players_aggregate_fields {
  count(columns: [mariokart8deluxe_battle_match_players_select_column!], distinct: Boolean): Int!
  max: mariokart8deluxe_battle_match_players_max_fields
  min: mariokart8deluxe_battle_match_players_min_fields
}

"""
order by aggregate values of table "mariokart8deluxe_battle_match_players"
"""
input mariokart8deluxe_battle_match_players_aggregate_order_by {
  count: order_by
  max: mariokart8deluxe_battle_match_players_max_order_by
  min: mariokart8deluxe_battle_match_players_min_order_by
}

"""
input type for inserting array relation for remote table "mariokart8deluxe_battle_match_players"
"""
input mariokart8deluxe_battle_match_players_arr_rel_insert_input {
  data: [mariokart8deluxe_battle_match_players_insert_input!]!

  """upsert condition"""
  on_conflict: mariokart8deluxe_battle_match_players_on_conflict
}

"""
Boolean expression to filter rows from the table "mariokart8deluxe_battle_match_players". All fields are combined with a logical 'AND'.
"""
input mariokart8deluxe_battle_match_players_bool_exp {
  _and: [mariokart8deluxe_battle_match_players_bool_exp!]
  _not: mariokart8deluxe_battle_match_players_bool_exp
  _or: [mariokart8deluxe_battle_match_players_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  mariokart8deluxe_battle_match: mariokart8deluxe_battle_matches_bool_exp
  mariokart8deluxe_battle_match_id: uuid_comparison_exp
  nickname: String_comparison_exp
  person: persons_bool_exp
  person_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "mariokart8deluxe_battle_match_players"
"""
enum mariokart8deluxe_battle_match_players_constraint {
  """
  unique or primary key constraint on columns "mariokart8deluxe_battle_match_id", "person_id"
  """
  mariokart8deluxe_battle_match_mariokart8deluxe_battle_matc_key1

  """
  unique or primary key constraint on columns "mariokart8deluxe_battle_match_id", "nickname"
  """
  mariokart8deluxe_battle_match_mariokart8deluxe_battle_match_key

  """
  unique or primary key constraint on columns "id"
  """
  mariokart8deluxe_battle_match_players_pkey
}

"""
input type for inserting data into table "mariokart8deluxe_battle_match_players"
"""
input mariokart8deluxe_battle_match_players_insert_input {
  created_at: timestamptz
  id: uuid
  mariokart8deluxe_battle_match: mariokart8deluxe_battle_matches_obj_rel_insert_input
  mariokart8deluxe_battle_match_id: uuid
  nickname: String
  person: persons_obj_rel_insert_input
  person_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type mariokart8deluxe_battle_match_players_max_fields {
  created_at: timestamptz
  id: uuid
  mariokart8deluxe_battle_match_id: uuid
  nickname: String
  person_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "mariokart8deluxe_battle_match_players"
"""
input mariokart8deluxe_battle_match_players_max_order_by {
  created_at: order_by
  id: order_by
  mariokart8deluxe_battle_match_id: order_by
  nickname: order_by
  person_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type mariokart8deluxe_battle_match_players_min_fields {
  created_at: timestamptz
  id: uuid
  mariokart8deluxe_battle_match_id: uuid
  nickname: String
  person_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "mariokart8deluxe_battle_match_players"
"""
input mariokart8deluxe_battle_match_players_min_order_by {
  created_at: order_by
  id: order_by
  mariokart8deluxe_battle_match_id: order_by
  nickname: order_by
  person_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "mariokart8deluxe_battle_match_players"
"""
type mariokart8deluxe_battle_match_players_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [mariokart8deluxe_battle_match_players!]!
}

"""
on_conflict condition type for table "mariokart8deluxe_battle_match_players"
"""
input mariokart8deluxe_battle_match_players_on_conflict {
  constraint: mariokart8deluxe_battle_match_players_constraint!
  update_columns: [mariokart8deluxe_battle_match_players_update_column!]! = []
  where: mariokart8deluxe_battle_match_players_bool_exp
}

"""
Ordering options when selecting data from "mariokart8deluxe_battle_match_players".
"""
input mariokart8deluxe_battle_match_players_order_by {
  created_at: order_by
  id: order_by
  mariokart8deluxe_battle_match: mariokart8deluxe_battle_matches_order_by
  mariokart8deluxe_battle_match_id: order_by
  nickname: order_by
  person: persons_order_by
  person_id: order_by
  updated_at: order_by
}

"""
primary key columns input for table: mariokart8deluxe_battle_match_players
"""
input mariokart8deluxe_battle_match_players_pk_columns_input {
  id: uuid!
}

"""
select columns of table "mariokart8deluxe_battle_match_players"
"""
enum mariokart8deluxe_battle_match_players_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  mariokart8deluxe_battle_match_id

  """column name"""
  nickname

  """column name"""
  person_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "mariokart8deluxe_battle_match_players"
"""
input mariokart8deluxe_battle_match_players_set_input {
  created_at: timestamptz
  id: uuid
  mariokart8deluxe_battle_match_id: uuid
  nickname: String
  person_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "mariokart8deluxe_battle_match_players"
"""
input mariokart8deluxe_battle_match_players_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mariokart8deluxe_battle_match_players_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mariokart8deluxe_battle_match_players_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  mariokart8deluxe_battle_match_id: uuid
  nickname: String
  person_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "mariokart8deluxe_battle_match_players"
"""
enum mariokart8deluxe_battle_match_players_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  mariokart8deluxe_battle_match_id

  """column name"""
  nickname

  """column name"""
  person_id

  """column name"""
  updated_at
}

input mariokart8deluxe_battle_match_players_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: mariokart8deluxe_battle_match_players_set_input

  """filter the rows which have to be updated"""
  where: mariokart8deluxe_battle_match_players_bool_exp!
}

"""
columns and relationships of "mariokart8deluxe_battle_matches"
"""
type mariokart8deluxe_battle_matches {
  created_at: timestamptz!
  end_time: timestamptz
  id: uuid!
  index: Int
  is_aborted: Boolean

  """An object relationship"""
  mariokart8deluxe_battle_course: mariokart8deluxe_battle_courses
  mariokart8deluxe_battle_course_id: uuid

  """An array relationship"""
  mariokart8deluxe_battle_match_players(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_match_players_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_match_players_bool_exp
  ): [mariokart8deluxe_battle_match_players!]!

  """An aggregate relationship"""
  mariokart8deluxe_battle_match_players_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_match_players_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_match_players_bool_exp
  ): mariokart8deluxe_battle_match_players_aggregate!

  """An object relationship"""
  mariokart8deluxe_battle_rule: mariokart8deluxe_battle_rules
  mariokart8deluxe_battle_rule_id: uuid

  """An object relationship"""
  program: programs!
  program_id: uuid!
  start_time: timestamptz!
  updated_at: timestamptz!
}

"""
aggregated selection of "mariokart8deluxe_battle_matches"
"""
type mariokart8deluxe_battle_matches_aggregate {
  aggregate: mariokart8deluxe_battle_matches_aggregate_fields
  nodes: [mariokart8deluxe_battle_matches!]!
}

input mariokart8deluxe_battle_matches_aggregate_bool_exp {
  bool_and: mariokart8deluxe_battle_matches_aggregate_bool_exp_bool_and
  bool_or: mariokart8deluxe_battle_matches_aggregate_bool_exp_bool_or
  count: mariokart8deluxe_battle_matches_aggregate_bool_exp_count
}

input mariokart8deluxe_battle_matches_aggregate_bool_exp_bool_and {
  arguments: mariokart8deluxe_battle_matches_select_column_mariokart8deluxe_battle_matches_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: mariokart8deluxe_battle_matches_bool_exp
  predicate: Boolean_comparison_exp!
}

input mariokart8deluxe_battle_matches_aggregate_bool_exp_bool_or {
  arguments: mariokart8deluxe_battle_matches_select_column_mariokart8deluxe_battle_matches_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: mariokart8deluxe_battle_matches_bool_exp
  predicate: Boolean_comparison_exp!
}

input mariokart8deluxe_battle_matches_aggregate_bool_exp_count {
  arguments: [mariokart8deluxe_battle_matches_select_column!]
  distinct: Boolean
  filter: mariokart8deluxe_battle_matches_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "mariokart8deluxe_battle_matches"
"""
type mariokart8deluxe_battle_matches_aggregate_fields {
  avg: mariokart8deluxe_battle_matches_avg_fields
  count(columns: [mariokart8deluxe_battle_matches_select_column!], distinct: Boolean): Int!
  max: mariokart8deluxe_battle_matches_max_fields
  min: mariokart8deluxe_battle_matches_min_fields
  stddev: mariokart8deluxe_battle_matches_stddev_fields
  stddev_pop: mariokart8deluxe_battle_matches_stddev_pop_fields
  stddev_samp: mariokart8deluxe_battle_matches_stddev_samp_fields
  sum: mariokart8deluxe_battle_matches_sum_fields
  var_pop: mariokart8deluxe_battle_matches_var_pop_fields
  var_samp: mariokart8deluxe_battle_matches_var_samp_fields
  variance: mariokart8deluxe_battle_matches_variance_fields
}

"""
order by aggregate values of table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_aggregate_order_by {
  avg: mariokart8deluxe_battle_matches_avg_order_by
  count: order_by
  max: mariokart8deluxe_battle_matches_max_order_by
  min: mariokart8deluxe_battle_matches_min_order_by
  stddev: mariokart8deluxe_battle_matches_stddev_order_by
  stddev_pop: mariokart8deluxe_battle_matches_stddev_pop_order_by
  stddev_samp: mariokart8deluxe_battle_matches_stddev_samp_order_by
  sum: mariokart8deluxe_battle_matches_sum_order_by
  var_pop: mariokart8deluxe_battle_matches_var_pop_order_by
  var_samp: mariokart8deluxe_battle_matches_var_samp_order_by
  variance: mariokart8deluxe_battle_matches_variance_order_by
}

"""
input type for inserting array relation for remote table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_arr_rel_insert_input {
  data: [mariokart8deluxe_battle_matches_insert_input!]!

  """upsert condition"""
  on_conflict: mariokart8deluxe_battle_matches_on_conflict
}

"""aggregate avg on columns"""
type mariokart8deluxe_battle_matches_avg_fields {
  index: Float
}

"""
order by avg() on columns of table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_avg_order_by {
  index: order_by
}

"""
Boolean expression to filter rows from the table "mariokart8deluxe_battle_matches". All fields are combined with a logical 'AND'.
"""
input mariokart8deluxe_battle_matches_bool_exp {
  _and: [mariokart8deluxe_battle_matches_bool_exp!]
  _not: mariokart8deluxe_battle_matches_bool_exp
  _or: [mariokart8deluxe_battle_matches_bool_exp!]
  created_at: timestamptz_comparison_exp
  end_time: timestamptz_comparison_exp
  id: uuid_comparison_exp
  index: Int_comparison_exp
  is_aborted: Boolean_comparison_exp
  mariokart8deluxe_battle_course: mariokart8deluxe_battle_courses_bool_exp
  mariokart8deluxe_battle_course_id: uuid_comparison_exp
  mariokart8deluxe_battle_match_players: mariokart8deluxe_battle_match_players_bool_exp
  mariokart8deluxe_battle_match_players_aggregate: mariokart8deluxe_battle_match_players_aggregate_bool_exp
  mariokart8deluxe_battle_rule: mariokart8deluxe_battle_rules_bool_exp
  mariokart8deluxe_battle_rule_id: uuid_comparison_exp
  program: programs_bool_exp
  program_id: uuid_comparison_exp
  start_time: timestamptz_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "mariokart8deluxe_battle_matches"
"""
enum mariokart8deluxe_battle_matches_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  mariokart8deluxe_battle_matches_pkey

  """
  unique or primary key constraint on columns "index", "program_id"
  """
  mariokart8deluxe_battle_matches_program_id_index_key
}

"""
input type for incrementing numeric columns in table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_inc_input {
  index: Int
}

"""
input type for inserting data into table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_insert_input {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  is_aborted: Boolean
  mariokart8deluxe_battle_course: mariokart8deluxe_battle_courses_obj_rel_insert_input
  mariokart8deluxe_battle_course_id: uuid
  mariokart8deluxe_battle_match_players: mariokart8deluxe_battle_match_players_arr_rel_insert_input
  mariokart8deluxe_battle_rule: mariokart8deluxe_battle_rules_obj_rel_insert_input
  mariokart8deluxe_battle_rule_id: uuid
  program: programs_obj_rel_insert_input
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate max on columns"""
type mariokart8deluxe_battle_matches_max_fields {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  mariokart8deluxe_battle_course_id: uuid
  mariokart8deluxe_battle_rule_id: uuid
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""
order by max() on columns of table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_max_order_by {
  created_at: order_by
  end_time: order_by
  id: order_by
  index: order_by
  mariokart8deluxe_battle_course_id: order_by
  mariokart8deluxe_battle_rule_id: order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type mariokart8deluxe_battle_matches_min_fields {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  mariokart8deluxe_battle_course_id: uuid
  mariokart8deluxe_battle_rule_id: uuid
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""
order by min() on columns of table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_min_order_by {
  created_at: order_by
  end_time: order_by
  id: order_by
  index: order_by
  mariokart8deluxe_battle_course_id: order_by
  mariokart8deluxe_battle_rule_id: order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "mariokart8deluxe_battle_matches"
"""
type mariokart8deluxe_battle_matches_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [mariokart8deluxe_battle_matches!]!
}

"""
input type for inserting object relation for remote table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_obj_rel_insert_input {
  data: mariokart8deluxe_battle_matches_insert_input!

  """upsert condition"""
  on_conflict: mariokart8deluxe_battle_matches_on_conflict
}

"""
on_conflict condition type for table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_on_conflict {
  constraint: mariokart8deluxe_battle_matches_constraint!
  update_columns: [mariokart8deluxe_battle_matches_update_column!]! = []
  where: mariokart8deluxe_battle_matches_bool_exp
}

"""
Ordering options when selecting data from "mariokart8deluxe_battle_matches".
"""
input mariokart8deluxe_battle_matches_order_by {
  created_at: order_by
  end_time: order_by
  id: order_by
  index: order_by
  is_aborted: order_by
  mariokart8deluxe_battle_course: mariokart8deluxe_battle_courses_order_by
  mariokart8deluxe_battle_course_id: order_by
  mariokart8deluxe_battle_match_players_aggregate: mariokart8deluxe_battle_match_players_aggregate_order_by
  mariokart8deluxe_battle_rule: mariokart8deluxe_battle_rules_order_by
  mariokart8deluxe_battle_rule_id: order_by
  program: programs_order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
}

"""primary key columns input for table: mariokart8deluxe_battle_matches"""
input mariokart8deluxe_battle_matches_pk_columns_input {
  id: uuid!
}

"""
select columns of table "mariokart8deluxe_battle_matches"
"""
enum mariokart8deluxe_battle_matches_select_column {
  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  index

  """column name"""
  is_aborted

  """column name"""
  mariokart8deluxe_battle_course_id

  """column name"""
  mariokart8deluxe_battle_rule_id

  """column name"""
  program_id

  """column name"""
  start_time

  """column name"""
  updated_at
}

"""
select "mariokart8deluxe_battle_matches_aggregate_bool_exp_bool_and_arguments_columns" columns of table "mariokart8deluxe_battle_matches"
"""
enum mariokart8deluxe_battle_matches_select_column_mariokart8deluxe_battle_matches_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_aborted
}

"""
select "mariokart8deluxe_battle_matches_aggregate_bool_exp_bool_or_arguments_columns" columns of table "mariokart8deluxe_battle_matches"
"""
enum mariokart8deluxe_battle_matches_select_column_mariokart8deluxe_battle_matches_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_aborted
}

"""
input type for updating data in table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_set_input {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  is_aborted: Boolean
  mariokart8deluxe_battle_course_id: uuid
  mariokart8deluxe_battle_rule_id: uuid
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type mariokart8deluxe_battle_matches_stddev_fields {
  index: Float
}

"""
order by stddev() on columns of table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_stddev_order_by {
  index: order_by
}

"""aggregate stddev_pop on columns"""
type mariokart8deluxe_battle_matches_stddev_pop_fields {
  index: Float
}

"""
order by stddev_pop() on columns of table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_stddev_pop_order_by {
  index: order_by
}

"""aggregate stddev_samp on columns"""
type mariokart8deluxe_battle_matches_stddev_samp_fields {
  index: Float
}

"""
order by stddev_samp() on columns of table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_stddev_samp_order_by {
  index: order_by
}

"""
Streaming cursor of the table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mariokart8deluxe_battle_matches_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mariokart8deluxe_battle_matches_stream_cursor_value_input {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  is_aborted: Boolean
  mariokart8deluxe_battle_course_id: uuid
  mariokart8deluxe_battle_rule_id: uuid
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type mariokart8deluxe_battle_matches_sum_fields {
  index: Int
}

"""
order by sum() on columns of table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_sum_order_by {
  index: order_by
}

"""
update columns of table "mariokart8deluxe_battle_matches"
"""
enum mariokart8deluxe_battle_matches_update_column {
  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  index

  """column name"""
  is_aborted

  """column name"""
  mariokart8deluxe_battle_course_id

  """column name"""
  mariokart8deluxe_battle_rule_id

  """column name"""
  program_id

  """column name"""
  start_time

  """column name"""
  updated_at
}

input mariokart8deluxe_battle_matches_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: mariokart8deluxe_battle_matches_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: mariokart8deluxe_battle_matches_set_input

  """filter the rows which have to be updated"""
  where: mariokart8deluxe_battle_matches_bool_exp!
}

"""aggregate var_pop on columns"""
type mariokart8deluxe_battle_matches_var_pop_fields {
  index: Float
}

"""
order by var_pop() on columns of table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_var_pop_order_by {
  index: order_by
}

"""aggregate var_samp on columns"""
type mariokart8deluxe_battle_matches_var_samp_fields {
  index: Float
}

"""
order by var_samp() on columns of table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_var_samp_order_by {
  index: order_by
}

"""aggregate variance on columns"""
type mariokart8deluxe_battle_matches_variance_fields {
  index: Float
}

"""
order by variance() on columns of table "mariokart8deluxe_battle_matches"
"""
input mariokart8deluxe_battle_matches_variance_order_by {
  index: order_by
}

"""
columns and relationships of "mariokart8deluxe_battle_rules"
"""
type mariokart8deluxe_battle_rules {
  created_at: timestamptz!
  id: uuid!
  index: Int!

  """An array relationship"""
  mariokart8deluxe_battle_matches(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_matches_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_matches_bool_exp
  ): [mariokart8deluxe_battle_matches!]!

  """An aggregate relationship"""
  mariokart8deluxe_battle_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_matches_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_matches_bool_exp
  ): mariokart8deluxe_battle_matches_aggregate!
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "mariokart8deluxe_battle_rules"
"""
type mariokart8deluxe_battle_rules_aggregate {
  aggregate: mariokart8deluxe_battle_rules_aggregate_fields
  nodes: [mariokart8deluxe_battle_rules!]!
}

"""
aggregate fields of "mariokart8deluxe_battle_rules"
"""
type mariokart8deluxe_battle_rules_aggregate_fields {
  avg: mariokart8deluxe_battle_rules_avg_fields
  count(columns: [mariokart8deluxe_battle_rules_select_column!], distinct: Boolean): Int!
  max: mariokart8deluxe_battle_rules_max_fields
  min: mariokart8deluxe_battle_rules_min_fields
  stddev: mariokart8deluxe_battle_rules_stddev_fields
  stddev_pop: mariokart8deluxe_battle_rules_stddev_pop_fields
  stddev_samp: mariokart8deluxe_battle_rules_stddev_samp_fields
  sum: mariokart8deluxe_battle_rules_sum_fields
  var_pop: mariokart8deluxe_battle_rules_var_pop_fields
  var_samp: mariokart8deluxe_battle_rules_var_samp_fields
  variance: mariokart8deluxe_battle_rules_variance_fields
}

"""aggregate avg on columns"""
type mariokart8deluxe_battle_rules_avg_fields {
  index: Float
}

"""
Boolean expression to filter rows from the table "mariokart8deluxe_battle_rules". All fields are combined with a logical 'AND'.
"""
input mariokart8deluxe_battle_rules_bool_exp {
  _and: [mariokart8deluxe_battle_rules_bool_exp!]
  _not: mariokart8deluxe_battle_rules_bool_exp
  _or: [mariokart8deluxe_battle_rules_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  index: Int_comparison_exp
  mariokart8deluxe_battle_matches: mariokart8deluxe_battle_matches_bool_exp
  mariokart8deluxe_battle_matches_aggregate: mariokart8deluxe_battle_matches_aggregate_bool_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "mariokart8deluxe_battle_rules"
"""
enum mariokart8deluxe_battle_rules_constraint {
  """
  unique or primary key constraint on columns "index"
  """
  mariokart8deluxe_battle_rules_index_key

  """
  unique or primary key constraint on columns "name"
  """
  mariokart8deluxe_battle_rules_name_key

  """
  unique or primary key constraint on columns "id"
  """
  mariokart8deluxe_battle_rules_pkey
}

"""
input type for incrementing numeric columns in table "mariokart8deluxe_battle_rules"
"""
input mariokart8deluxe_battle_rules_inc_input {
  index: Int
}

"""
input type for inserting data into table "mariokart8deluxe_battle_rules"
"""
input mariokart8deluxe_battle_rules_insert_input {
  created_at: timestamptz
  id: uuid
  index: Int
  mariokart8deluxe_battle_matches: mariokart8deluxe_battle_matches_arr_rel_insert_input
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type mariokart8deluxe_battle_rules_max_fields {
  created_at: timestamptz
  id: uuid
  index: Int
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type mariokart8deluxe_battle_rules_min_fields {
  created_at: timestamptz
  id: uuid
  index: Int
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "mariokart8deluxe_battle_rules"
"""
type mariokart8deluxe_battle_rules_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [mariokart8deluxe_battle_rules!]!
}

"""
input type for inserting object relation for remote table "mariokart8deluxe_battle_rules"
"""
input mariokart8deluxe_battle_rules_obj_rel_insert_input {
  data: mariokart8deluxe_battle_rules_insert_input!

  """upsert condition"""
  on_conflict: mariokart8deluxe_battle_rules_on_conflict
}

"""
on_conflict condition type for table "mariokart8deluxe_battle_rules"
"""
input mariokart8deluxe_battle_rules_on_conflict {
  constraint: mariokart8deluxe_battle_rules_constraint!
  update_columns: [mariokart8deluxe_battle_rules_update_column!]! = []
  where: mariokart8deluxe_battle_rules_bool_exp
}

"""
Ordering options when selecting data from "mariokart8deluxe_battle_rules".
"""
input mariokart8deluxe_battle_rules_order_by {
  created_at: order_by
  id: order_by
  index: order_by
  mariokart8deluxe_battle_matches_aggregate: mariokart8deluxe_battle_matches_aggregate_order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: mariokart8deluxe_battle_rules"""
input mariokart8deluxe_battle_rules_pk_columns_input {
  id: uuid!
}

"""
select columns of table "mariokart8deluxe_battle_rules"
"""
enum mariokart8deluxe_battle_rules_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  index

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "mariokart8deluxe_battle_rules"
"""
input mariokart8deluxe_battle_rules_set_input {
  created_at: timestamptz
  id: uuid
  index: Int
  name: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type mariokart8deluxe_battle_rules_stddev_fields {
  index: Float
}

"""aggregate stddev_pop on columns"""
type mariokart8deluxe_battle_rules_stddev_pop_fields {
  index: Float
}

"""aggregate stddev_samp on columns"""
type mariokart8deluxe_battle_rules_stddev_samp_fields {
  index: Float
}

"""
Streaming cursor of the table "mariokart8deluxe_battle_rules"
"""
input mariokart8deluxe_battle_rules_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mariokart8deluxe_battle_rules_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mariokart8deluxe_battle_rules_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  index: Int
  name: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type mariokart8deluxe_battle_rules_sum_fields {
  index: Int
}

"""
update columns of table "mariokart8deluxe_battle_rules"
"""
enum mariokart8deluxe_battle_rules_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  index

  """column name"""
  name

  """column name"""
  updated_at
}

input mariokart8deluxe_battle_rules_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: mariokart8deluxe_battle_rules_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: mariokart8deluxe_battle_rules_set_input

  """filter the rows which have to be updated"""
  where: mariokart8deluxe_battle_rules_bool_exp!
}

"""aggregate var_pop on columns"""
type mariokart8deluxe_battle_rules_var_pop_fields {
  index: Float
}

"""aggregate var_samp on columns"""
type mariokart8deluxe_battle_rules_var_samp_fields {
  index: Float
}

"""aggregate variance on columns"""
type mariokart8deluxe_battle_rules_variance_fields {
  index: Float
}

"""コースに紐づくGBA, 3DS, Tourなどのコンソール名"""
type mariokart8deluxe_consoles {
  created_at: timestamptz!
  id: uuid!

  """An array relationship"""
  mariokart8deluxe_courses(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_courses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_courses_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_courses_bool_exp
  ): [mariokart8deluxe_courses!]!

  """An aggregate relationship"""
  mariokart8deluxe_courses_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_courses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_courses_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_courses_bool_exp
  ): mariokart8deluxe_courses_aggregate!
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "mariokart8deluxe_consoles"
"""
type mariokart8deluxe_consoles_aggregate {
  aggregate: mariokart8deluxe_consoles_aggregate_fields
  nodes: [mariokart8deluxe_consoles!]!
}

"""
aggregate fields of "mariokart8deluxe_consoles"
"""
type mariokart8deluxe_consoles_aggregate_fields {
  count(columns: [mariokart8deluxe_consoles_select_column!], distinct: Boolean): Int!
  max: mariokart8deluxe_consoles_max_fields
  min: mariokart8deluxe_consoles_min_fields
}

"""
Boolean expression to filter rows from the table "mariokart8deluxe_consoles". All fields are combined with a logical 'AND'.
"""
input mariokart8deluxe_consoles_bool_exp {
  _and: [mariokart8deluxe_consoles_bool_exp!]
  _not: mariokart8deluxe_consoles_bool_exp
  _or: [mariokart8deluxe_consoles_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  mariokart8deluxe_courses: mariokart8deluxe_courses_bool_exp
  mariokart8deluxe_courses_aggregate: mariokart8deluxe_courses_aggregate_bool_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "mariokart8deluxe_consoles"
"""
enum mariokart8deluxe_consoles_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  mariokart8deluxe_consoles_name_key

  """
  unique or primary key constraint on columns "id"
  """
  mariokart8deluxe_consoles_pkey
}

"""
input type for inserting data into table "mariokart8deluxe_consoles"
"""
input mariokart8deluxe_consoles_insert_input {
  created_at: timestamptz
  id: uuid
  mariokart8deluxe_courses: mariokart8deluxe_courses_arr_rel_insert_input
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type mariokart8deluxe_consoles_max_fields {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type mariokart8deluxe_consoles_min_fields {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "mariokart8deluxe_consoles"
"""
type mariokart8deluxe_consoles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [mariokart8deluxe_consoles!]!
}

"""
input type for inserting object relation for remote table "mariokart8deluxe_consoles"
"""
input mariokart8deluxe_consoles_obj_rel_insert_input {
  data: mariokart8deluxe_consoles_insert_input!

  """upsert condition"""
  on_conflict: mariokart8deluxe_consoles_on_conflict
}

"""
on_conflict condition type for table "mariokart8deluxe_consoles"
"""
input mariokart8deluxe_consoles_on_conflict {
  constraint: mariokart8deluxe_consoles_constraint!
  update_columns: [mariokart8deluxe_consoles_update_column!]! = []
  where: mariokart8deluxe_consoles_bool_exp
}

"""Ordering options when selecting data from "mariokart8deluxe_consoles"."""
input mariokart8deluxe_consoles_order_by {
  created_at: order_by
  id: order_by
  mariokart8deluxe_courses_aggregate: mariokart8deluxe_courses_aggregate_order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: mariokart8deluxe_consoles"""
input mariokart8deluxe_consoles_pk_columns_input {
  id: uuid!
}

"""
select columns of table "mariokart8deluxe_consoles"
"""
enum mariokart8deluxe_consoles_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "mariokart8deluxe_consoles"
"""
input mariokart8deluxe_consoles_set_input {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "mariokart8deluxe_consoles"
"""
input mariokart8deluxe_consoles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mariokart8deluxe_consoles_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mariokart8deluxe_consoles_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
update columns of table "mariokart8deluxe_consoles"
"""
enum mariokart8deluxe_consoles_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

input mariokart8deluxe_consoles_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: mariokart8deluxe_consoles_set_input

  """filter the rows which have to be updated"""
  where: mariokart8deluxe_consoles_bool_exp!
}

"""
columns and relationships of "mariokart8deluxe_courses"
"""
type mariokart8deluxe_courses {
  created_at: timestamptz!
  id: uuid!
  in_cup_index: Int!

  """An object relationship"""
  mariokart8deluxe_console: mariokart8deluxe_consoles
  mariokart8deluxe_console_id: uuid

  """An object relationship"""
  mariokart8deluxe_cup: mariokart8deluxe_cups!
  mariokart8deluxe_cup_id: uuid!

  """An array relationship"""
  mariokart8deluxe_races(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_races_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_races_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_races_bool_exp
  ): [mariokart8deluxe_races!]!

  """An aggregate relationship"""
  mariokart8deluxe_races_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_races_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_races_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_races_bool_exp
  ): mariokart8deluxe_races_aggregate!
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "mariokart8deluxe_courses"
"""
type mariokart8deluxe_courses_aggregate {
  aggregate: mariokart8deluxe_courses_aggregate_fields
  nodes: [mariokart8deluxe_courses!]!
}

input mariokart8deluxe_courses_aggregate_bool_exp {
  count: mariokart8deluxe_courses_aggregate_bool_exp_count
}

input mariokart8deluxe_courses_aggregate_bool_exp_count {
  arguments: [mariokart8deluxe_courses_select_column!]
  distinct: Boolean
  filter: mariokart8deluxe_courses_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "mariokart8deluxe_courses"
"""
type mariokart8deluxe_courses_aggregate_fields {
  avg: mariokart8deluxe_courses_avg_fields
  count(columns: [mariokart8deluxe_courses_select_column!], distinct: Boolean): Int!
  max: mariokart8deluxe_courses_max_fields
  min: mariokart8deluxe_courses_min_fields
  stddev: mariokart8deluxe_courses_stddev_fields
  stddev_pop: mariokart8deluxe_courses_stddev_pop_fields
  stddev_samp: mariokart8deluxe_courses_stddev_samp_fields
  sum: mariokart8deluxe_courses_sum_fields
  var_pop: mariokart8deluxe_courses_var_pop_fields
  var_samp: mariokart8deluxe_courses_var_samp_fields
  variance: mariokart8deluxe_courses_variance_fields
}

"""
order by aggregate values of table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_aggregate_order_by {
  avg: mariokart8deluxe_courses_avg_order_by
  count: order_by
  max: mariokart8deluxe_courses_max_order_by
  min: mariokart8deluxe_courses_min_order_by
  stddev: mariokart8deluxe_courses_stddev_order_by
  stddev_pop: mariokart8deluxe_courses_stddev_pop_order_by
  stddev_samp: mariokart8deluxe_courses_stddev_samp_order_by
  sum: mariokart8deluxe_courses_sum_order_by
  var_pop: mariokart8deluxe_courses_var_pop_order_by
  var_samp: mariokart8deluxe_courses_var_samp_order_by
  variance: mariokart8deluxe_courses_variance_order_by
}

"""
input type for inserting array relation for remote table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_arr_rel_insert_input {
  data: [mariokart8deluxe_courses_insert_input!]!

  """upsert condition"""
  on_conflict: mariokart8deluxe_courses_on_conflict
}

"""aggregate avg on columns"""
type mariokart8deluxe_courses_avg_fields {
  in_cup_index: Float
}

"""
order by avg() on columns of table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_avg_order_by {
  in_cup_index: order_by
}

"""
Boolean expression to filter rows from the table "mariokart8deluxe_courses". All fields are combined with a logical 'AND'.
"""
input mariokart8deluxe_courses_bool_exp {
  _and: [mariokart8deluxe_courses_bool_exp!]
  _not: mariokart8deluxe_courses_bool_exp
  _or: [mariokart8deluxe_courses_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  in_cup_index: Int_comparison_exp
  mariokart8deluxe_console: mariokart8deluxe_consoles_bool_exp
  mariokart8deluxe_console_id: uuid_comparison_exp
  mariokart8deluxe_cup: mariokart8deluxe_cups_bool_exp
  mariokart8deluxe_cup_id: uuid_comparison_exp
  mariokart8deluxe_races: mariokart8deluxe_races_bool_exp
  mariokart8deluxe_races_aggregate: mariokart8deluxe_races_aggregate_bool_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "mariokart8deluxe_courses"
"""
enum mariokart8deluxe_courses_constraint {
  """
  unique or primary key constraint on columns "mariokart8deluxe_console_id", "name"
  """
  mariokart8deluxe_courses_mariokart8deluxe_console_id_name_key

  """
  unique or primary key constraint on columns "mariokart8deluxe_cup_id", "in_cup_index"
  """
  mariokart8deluxe_courses_mariokart8deluxe_cup_id_in_cup_index_k

  """
  unique or primary key constraint on columns "id"
  """
  mariokart8deluxe_courses_pkey
}

"""
input type for incrementing numeric columns in table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_inc_input {
  in_cup_index: Int
}

"""
input type for inserting data into table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_insert_input {
  created_at: timestamptz
  id: uuid
  in_cup_index: Int
  mariokart8deluxe_console: mariokart8deluxe_consoles_obj_rel_insert_input
  mariokart8deluxe_console_id: uuid
  mariokart8deluxe_cup: mariokart8deluxe_cups_obj_rel_insert_input
  mariokart8deluxe_cup_id: uuid
  mariokart8deluxe_races: mariokart8deluxe_races_arr_rel_insert_input
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type mariokart8deluxe_courses_max_fields {
  created_at: timestamptz
  id: uuid
  in_cup_index: Int
  mariokart8deluxe_console_id: uuid
  mariokart8deluxe_cup_id: uuid
  name: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_max_order_by {
  created_at: order_by
  id: order_by
  in_cup_index: order_by
  mariokart8deluxe_console_id: order_by
  mariokart8deluxe_cup_id: order_by
  name: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type mariokart8deluxe_courses_min_fields {
  created_at: timestamptz
  id: uuid
  in_cup_index: Int
  mariokart8deluxe_console_id: uuid
  mariokart8deluxe_cup_id: uuid
  name: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_min_order_by {
  created_at: order_by
  id: order_by
  in_cup_index: order_by
  mariokart8deluxe_console_id: order_by
  mariokart8deluxe_cup_id: order_by
  name: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "mariokart8deluxe_courses"
"""
type mariokart8deluxe_courses_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [mariokart8deluxe_courses!]!
}

"""
input type for inserting object relation for remote table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_obj_rel_insert_input {
  data: mariokart8deluxe_courses_insert_input!

  """upsert condition"""
  on_conflict: mariokart8deluxe_courses_on_conflict
}

"""
on_conflict condition type for table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_on_conflict {
  constraint: mariokart8deluxe_courses_constraint!
  update_columns: [mariokart8deluxe_courses_update_column!]! = []
  where: mariokart8deluxe_courses_bool_exp
}

"""Ordering options when selecting data from "mariokart8deluxe_courses"."""
input mariokart8deluxe_courses_order_by {
  created_at: order_by
  id: order_by
  in_cup_index: order_by
  mariokart8deluxe_console: mariokart8deluxe_consoles_order_by
  mariokart8deluxe_console_id: order_by
  mariokart8deluxe_cup: mariokart8deluxe_cups_order_by
  mariokart8deluxe_cup_id: order_by
  mariokart8deluxe_races_aggregate: mariokart8deluxe_races_aggregate_order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: mariokart8deluxe_courses"""
input mariokart8deluxe_courses_pk_columns_input {
  id: uuid!
}

"""
select columns of table "mariokart8deluxe_courses"
"""
enum mariokart8deluxe_courses_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  in_cup_index

  """column name"""
  mariokart8deluxe_console_id

  """column name"""
  mariokart8deluxe_cup_id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_set_input {
  created_at: timestamptz
  id: uuid
  in_cup_index: Int
  mariokart8deluxe_console_id: uuid
  mariokart8deluxe_cup_id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type mariokart8deluxe_courses_stddev_fields {
  in_cup_index: Float
}

"""
order by stddev() on columns of table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_stddev_order_by {
  in_cup_index: order_by
}

"""aggregate stddev_pop on columns"""
type mariokart8deluxe_courses_stddev_pop_fields {
  in_cup_index: Float
}

"""
order by stddev_pop() on columns of table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_stddev_pop_order_by {
  in_cup_index: order_by
}

"""aggregate stddev_samp on columns"""
type mariokart8deluxe_courses_stddev_samp_fields {
  in_cup_index: Float
}

"""
order by stddev_samp() on columns of table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_stddev_samp_order_by {
  in_cup_index: order_by
}

"""
Streaming cursor of the table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mariokart8deluxe_courses_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mariokart8deluxe_courses_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  in_cup_index: Int
  mariokart8deluxe_console_id: uuid
  mariokart8deluxe_cup_id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type mariokart8deluxe_courses_sum_fields {
  in_cup_index: Int
}

"""
order by sum() on columns of table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_sum_order_by {
  in_cup_index: order_by
}

"""
update columns of table "mariokart8deluxe_courses"
"""
enum mariokart8deluxe_courses_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  in_cup_index

  """column name"""
  mariokart8deluxe_console_id

  """column name"""
  mariokart8deluxe_cup_id

  """column name"""
  name

  """column name"""
  updated_at
}

input mariokart8deluxe_courses_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: mariokart8deluxe_courses_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: mariokart8deluxe_courses_set_input

  """filter the rows which have to be updated"""
  where: mariokart8deluxe_courses_bool_exp!
}

"""aggregate var_pop on columns"""
type mariokart8deluxe_courses_var_pop_fields {
  in_cup_index: Float
}

"""
order by var_pop() on columns of table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_var_pop_order_by {
  in_cup_index: order_by
}

"""aggregate var_samp on columns"""
type mariokart8deluxe_courses_var_samp_fields {
  in_cup_index: Float
}

"""
order by var_samp() on columns of table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_var_samp_order_by {
  in_cup_index: order_by
}

"""aggregate variance on columns"""
type mariokart8deluxe_courses_variance_fields {
  in_cup_index: Float
}

"""
order by variance() on columns of table "mariokart8deluxe_courses"
"""
input mariokart8deluxe_courses_variance_order_by {
  in_cup_index: order_by
}

"""
columns and relationships of "mariokart8deluxe_cups"
"""
type mariokart8deluxe_cups {
  created_at: timestamptz!
  id: uuid!
  index: Int!

  """An array relationship"""
  mariokart8deluxe_courses(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_courses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_courses_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_courses_bool_exp
  ): [mariokart8deluxe_courses!]!

  """An aggregate relationship"""
  mariokart8deluxe_courses_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_courses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_courses_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_courses_bool_exp
  ): mariokart8deluxe_courses_aggregate!
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "mariokart8deluxe_cups"
"""
type mariokart8deluxe_cups_aggregate {
  aggregate: mariokart8deluxe_cups_aggregate_fields
  nodes: [mariokart8deluxe_cups!]!
}

"""
aggregate fields of "mariokart8deluxe_cups"
"""
type mariokart8deluxe_cups_aggregate_fields {
  avg: mariokart8deluxe_cups_avg_fields
  count(columns: [mariokart8deluxe_cups_select_column!], distinct: Boolean): Int!
  max: mariokart8deluxe_cups_max_fields
  min: mariokart8deluxe_cups_min_fields
  stddev: mariokart8deluxe_cups_stddev_fields
  stddev_pop: mariokart8deluxe_cups_stddev_pop_fields
  stddev_samp: mariokart8deluxe_cups_stddev_samp_fields
  sum: mariokart8deluxe_cups_sum_fields
  var_pop: mariokart8deluxe_cups_var_pop_fields
  var_samp: mariokart8deluxe_cups_var_samp_fields
  variance: mariokart8deluxe_cups_variance_fields
}

"""aggregate avg on columns"""
type mariokart8deluxe_cups_avg_fields {
  index: Float
}

"""
Boolean expression to filter rows from the table "mariokart8deluxe_cups". All fields are combined with a logical 'AND'.
"""
input mariokart8deluxe_cups_bool_exp {
  _and: [mariokart8deluxe_cups_bool_exp!]
  _not: mariokart8deluxe_cups_bool_exp
  _or: [mariokart8deluxe_cups_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  index: Int_comparison_exp
  mariokart8deluxe_courses: mariokart8deluxe_courses_bool_exp
  mariokart8deluxe_courses_aggregate: mariokart8deluxe_courses_aggregate_bool_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "mariokart8deluxe_cups"
"""
enum mariokart8deluxe_cups_constraint {
  """
  unique or primary key constraint on columns "index"
  """
  mariokart8deluxe_cups_index_key

  """
  unique or primary key constraint on columns "name"
  """
  mariokart8deluxe_cups_name_key

  """
  unique or primary key constraint on columns "id"
  """
  mariokart8deluxe_cups_pkey
}

"""
input type for incrementing numeric columns in table "mariokart8deluxe_cups"
"""
input mariokart8deluxe_cups_inc_input {
  index: Int
}

"""
input type for inserting data into table "mariokart8deluxe_cups"
"""
input mariokart8deluxe_cups_insert_input {
  created_at: timestamptz
  id: uuid
  index: Int
  mariokart8deluxe_courses: mariokart8deluxe_courses_arr_rel_insert_input
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type mariokart8deluxe_cups_max_fields {
  created_at: timestamptz
  id: uuid
  index: Int
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type mariokart8deluxe_cups_min_fields {
  created_at: timestamptz
  id: uuid
  index: Int
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "mariokart8deluxe_cups"
"""
type mariokart8deluxe_cups_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [mariokart8deluxe_cups!]!
}

"""
input type for inserting object relation for remote table "mariokart8deluxe_cups"
"""
input mariokart8deluxe_cups_obj_rel_insert_input {
  data: mariokart8deluxe_cups_insert_input!

  """upsert condition"""
  on_conflict: mariokart8deluxe_cups_on_conflict
}

"""
on_conflict condition type for table "mariokart8deluxe_cups"
"""
input mariokart8deluxe_cups_on_conflict {
  constraint: mariokart8deluxe_cups_constraint!
  update_columns: [mariokart8deluxe_cups_update_column!]! = []
  where: mariokart8deluxe_cups_bool_exp
}

"""Ordering options when selecting data from "mariokart8deluxe_cups"."""
input mariokart8deluxe_cups_order_by {
  created_at: order_by
  id: order_by
  index: order_by
  mariokart8deluxe_courses_aggregate: mariokart8deluxe_courses_aggregate_order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: mariokart8deluxe_cups"""
input mariokart8deluxe_cups_pk_columns_input {
  id: uuid!
}

"""
select columns of table "mariokart8deluxe_cups"
"""
enum mariokart8deluxe_cups_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  index

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "mariokart8deluxe_cups"
"""
input mariokart8deluxe_cups_set_input {
  created_at: timestamptz
  id: uuid
  index: Int
  name: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type mariokart8deluxe_cups_stddev_fields {
  index: Float
}

"""aggregate stddev_pop on columns"""
type mariokart8deluxe_cups_stddev_pop_fields {
  index: Float
}

"""aggregate stddev_samp on columns"""
type mariokart8deluxe_cups_stddev_samp_fields {
  index: Float
}

"""
Streaming cursor of the table "mariokart8deluxe_cups"
"""
input mariokart8deluxe_cups_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mariokart8deluxe_cups_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mariokart8deluxe_cups_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  index: Int
  name: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type mariokart8deluxe_cups_sum_fields {
  index: Int
}

"""
update columns of table "mariokart8deluxe_cups"
"""
enum mariokart8deluxe_cups_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  index

  """column name"""
  name

  """column name"""
  updated_at
}

input mariokart8deluxe_cups_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: mariokart8deluxe_cups_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: mariokart8deluxe_cups_set_input

  """filter the rows which have to be updated"""
  where: mariokart8deluxe_cups_bool_exp!
}

"""aggregate var_pop on columns"""
type mariokart8deluxe_cups_var_pop_fields {
  index: Float
}

"""aggregate var_samp on columns"""
type mariokart8deluxe_cups_var_samp_fields {
  index: Float
}

"""aggregate variance on columns"""
type mariokart8deluxe_cups_variance_fields {
  index: Float
}

"""
columns and relationships of "mariokart8deluxe_race_players"
"""
type mariokart8deluxe_race_players {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  mariokart8deluxe_race: mariokart8deluxe_races!
  mariokart8deluxe_race_id: uuid!
  nickname: String!

  """An object relationship"""
  person: persons
  person_id: uuid
  updated_at: timestamptz!
}

"""
aggregated selection of "mariokart8deluxe_race_players"
"""
type mariokart8deluxe_race_players_aggregate {
  aggregate: mariokart8deluxe_race_players_aggregate_fields
  nodes: [mariokart8deluxe_race_players!]!
}

input mariokart8deluxe_race_players_aggregate_bool_exp {
  count: mariokart8deluxe_race_players_aggregate_bool_exp_count
}

input mariokart8deluxe_race_players_aggregate_bool_exp_count {
  arguments: [mariokart8deluxe_race_players_select_column!]
  distinct: Boolean
  filter: mariokart8deluxe_race_players_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "mariokart8deluxe_race_players"
"""
type mariokart8deluxe_race_players_aggregate_fields {
  count(columns: [mariokart8deluxe_race_players_select_column!], distinct: Boolean): Int!
  max: mariokart8deluxe_race_players_max_fields
  min: mariokart8deluxe_race_players_min_fields
}

"""
order by aggregate values of table "mariokart8deluxe_race_players"
"""
input mariokart8deluxe_race_players_aggregate_order_by {
  count: order_by
  max: mariokart8deluxe_race_players_max_order_by
  min: mariokart8deluxe_race_players_min_order_by
}

"""
input type for inserting array relation for remote table "mariokart8deluxe_race_players"
"""
input mariokart8deluxe_race_players_arr_rel_insert_input {
  data: [mariokart8deluxe_race_players_insert_input!]!

  """upsert condition"""
  on_conflict: mariokart8deluxe_race_players_on_conflict
}

"""
Boolean expression to filter rows from the table "mariokart8deluxe_race_players". All fields are combined with a logical 'AND'.
"""
input mariokart8deluxe_race_players_bool_exp {
  _and: [mariokart8deluxe_race_players_bool_exp!]
  _not: mariokart8deluxe_race_players_bool_exp
  _or: [mariokart8deluxe_race_players_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  mariokart8deluxe_race: mariokart8deluxe_races_bool_exp
  mariokart8deluxe_race_id: uuid_comparison_exp
  nickname: String_comparison_exp
  person: persons_bool_exp
  person_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "mariokart8deluxe_race_players"
"""
enum mariokart8deluxe_race_players_constraint {
  """
  unique or primary key constraint on columns "mariokart8deluxe_race_id", "nickname"
  """
  mariokart8deluxe_race_players_mariokart8deluxe_race_id_nick_key

  """
  unique or primary key constraint on columns "mariokart8deluxe_race_id", "person_id"
  """
  mariokart8deluxe_race_players_mariokart8deluxe_race_id_pers_key

  """
  unique or primary key constraint on columns "id"
  """
  mariokart8deluxe_race_players_pkey
}

"""
input type for inserting data into table "mariokart8deluxe_race_players"
"""
input mariokart8deluxe_race_players_insert_input {
  created_at: timestamptz
  id: uuid
  mariokart8deluxe_race: mariokart8deluxe_races_obj_rel_insert_input
  mariokart8deluxe_race_id: uuid
  nickname: String
  person: persons_obj_rel_insert_input
  person_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type mariokart8deluxe_race_players_max_fields {
  created_at: timestamptz
  id: uuid
  mariokart8deluxe_race_id: uuid
  nickname: String
  person_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "mariokart8deluxe_race_players"
"""
input mariokart8deluxe_race_players_max_order_by {
  created_at: order_by
  id: order_by
  mariokart8deluxe_race_id: order_by
  nickname: order_by
  person_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type mariokart8deluxe_race_players_min_fields {
  created_at: timestamptz
  id: uuid
  mariokart8deluxe_race_id: uuid
  nickname: String
  person_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "mariokart8deluxe_race_players"
"""
input mariokart8deluxe_race_players_min_order_by {
  created_at: order_by
  id: order_by
  mariokart8deluxe_race_id: order_by
  nickname: order_by
  person_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "mariokart8deluxe_race_players"
"""
type mariokart8deluxe_race_players_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [mariokart8deluxe_race_players!]!
}

"""
on_conflict condition type for table "mariokart8deluxe_race_players"
"""
input mariokart8deluxe_race_players_on_conflict {
  constraint: mariokart8deluxe_race_players_constraint!
  update_columns: [mariokart8deluxe_race_players_update_column!]! = []
  where: mariokart8deluxe_race_players_bool_exp
}

"""
Ordering options when selecting data from "mariokart8deluxe_race_players".
"""
input mariokart8deluxe_race_players_order_by {
  created_at: order_by
  id: order_by
  mariokart8deluxe_race: mariokart8deluxe_races_order_by
  mariokart8deluxe_race_id: order_by
  nickname: order_by
  person: persons_order_by
  person_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: mariokart8deluxe_race_players"""
input mariokart8deluxe_race_players_pk_columns_input {
  id: uuid!
}

"""
select columns of table "mariokart8deluxe_race_players"
"""
enum mariokart8deluxe_race_players_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  mariokart8deluxe_race_id

  """column name"""
  nickname

  """column name"""
  person_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "mariokart8deluxe_race_players"
"""
input mariokart8deluxe_race_players_set_input {
  created_at: timestamptz
  id: uuid
  mariokart8deluxe_race_id: uuid
  nickname: String
  person_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "mariokart8deluxe_race_players"
"""
input mariokart8deluxe_race_players_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mariokart8deluxe_race_players_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mariokart8deluxe_race_players_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  mariokart8deluxe_race_id: uuid
  nickname: String
  person_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "mariokart8deluxe_race_players"
"""
enum mariokart8deluxe_race_players_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  mariokart8deluxe_race_id

  """column name"""
  nickname

  """column name"""
  person_id

  """column name"""
  updated_at
}

input mariokart8deluxe_race_players_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: mariokart8deluxe_race_players_set_input

  """filter the rows which have to be updated"""
  where: mariokart8deluxe_race_players_bool_exp!
}

"""
columns and relationships of "mariokart8deluxe_race_rules"
"""
type mariokart8deluxe_race_rules {
  created_at: timestamptz!
  id: uuid!
  index: Int!
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "mariokart8deluxe_race_rules"
"""
type mariokart8deluxe_race_rules_aggregate {
  aggregate: mariokart8deluxe_race_rules_aggregate_fields
  nodes: [mariokart8deluxe_race_rules!]!
}

"""
aggregate fields of "mariokart8deluxe_race_rules"
"""
type mariokart8deluxe_race_rules_aggregate_fields {
  avg: mariokart8deluxe_race_rules_avg_fields
  count(columns: [mariokart8deluxe_race_rules_select_column!], distinct: Boolean): Int!
  max: mariokart8deluxe_race_rules_max_fields
  min: mariokart8deluxe_race_rules_min_fields
  stddev: mariokart8deluxe_race_rules_stddev_fields
  stddev_pop: mariokart8deluxe_race_rules_stddev_pop_fields
  stddev_samp: mariokart8deluxe_race_rules_stddev_samp_fields
  sum: mariokart8deluxe_race_rules_sum_fields
  var_pop: mariokart8deluxe_race_rules_var_pop_fields
  var_samp: mariokart8deluxe_race_rules_var_samp_fields
  variance: mariokart8deluxe_race_rules_variance_fields
}

"""aggregate avg on columns"""
type mariokart8deluxe_race_rules_avg_fields {
  index: Float
}

"""
Boolean expression to filter rows from the table "mariokart8deluxe_race_rules". All fields are combined with a logical 'AND'.
"""
input mariokart8deluxe_race_rules_bool_exp {
  _and: [mariokart8deluxe_race_rules_bool_exp!]
  _not: mariokart8deluxe_race_rules_bool_exp
  _or: [mariokart8deluxe_race_rules_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  index: Int_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "mariokart8deluxe_race_rules"
"""
enum mariokart8deluxe_race_rules_constraint {
  """
  unique or primary key constraint on columns "index"
  """
  mariokart8deluxe_race_rules_index_key

  """
  unique or primary key constraint on columns "name"
  """
  mariokart8deluxe_race_rules_name_key

  """
  unique or primary key constraint on columns "id"
  """
  mariokart8deluxe_race_rules_pkey
}

"""
input type for incrementing numeric columns in table "mariokart8deluxe_race_rules"
"""
input mariokart8deluxe_race_rules_inc_input {
  index: Int
}

"""
input type for inserting data into table "mariokart8deluxe_race_rules"
"""
input mariokart8deluxe_race_rules_insert_input {
  created_at: timestamptz
  id: uuid
  index: Int
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type mariokart8deluxe_race_rules_max_fields {
  created_at: timestamptz
  id: uuid
  index: Int
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type mariokart8deluxe_race_rules_min_fields {
  created_at: timestamptz
  id: uuid
  index: Int
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "mariokart8deluxe_race_rules"
"""
type mariokart8deluxe_race_rules_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [mariokart8deluxe_race_rules!]!
}

"""
input type for inserting object relation for remote table "mariokart8deluxe_race_rules"
"""
input mariokart8deluxe_race_rules_obj_rel_insert_input {
  data: mariokart8deluxe_race_rules_insert_input!

  """upsert condition"""
  on_conflict: mariokart8deluxe_race_rules_on_conflict
}

"""
on_conflict condition type for table "mariokart8deluxe_race_rules"
"""
input mariokart8deluxe_race_rules_on_conflict {
  constraint: mariokart8deluxe_race_rules_constraint!
  update_columns: [mariokart8deluxe_race_rules_update_column!]! = []
  where: mariokart8deluxe_race_rules_bool_exp
}

"""
Ordering options when selecting data from "mariokart8deluxe_race_rules".
"""
input mariokart8deluxe_race_rules_order_by {
  created_at: order_by
  id: order_by
  index: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: mariokart8deluxe_race_rules"""
input mariokart8deluxe_race_rules_pk_columns_input {
  id: uuid!
}

"""
select columns of table "mariokart8deluxe_race_rules"
"""
enum mariokart8deluxe_race_rules_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  index

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "mariokart8deluxe_race_rules"
"""
input mariokart8deluxe_race_rules_set_input {
  created_at: timestamptz
  id: uuid
  index: Int
  name: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type mariokart8deluxe_race_rules_stddev_fields {
  index: Float
}

"""aggregate stddev_pop on columns"""
type mariokart8deluxe_race_rules_stddev_pop_fields {
  index: Float
}

"""aggregate stddev_samp on columns"""
type mariokart8deluxe_race_rules_stddev_samp_fields {
  index: Float
}

"""
Streaming cursor of the table "mariokart8deluxe_race_rules"
"""
input mariokart8deluxe_race_rules_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mariokart8deluxe_race_rules_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mariokart8deluxe_race_rules_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  index: Int
  name: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type mariokart8deluxe_race_rules_sum_fields {
  index: Int
}

"""
update columns of table "mariokart8deluxe_race_rules"
"""
enum mariokart8deluxe_race_rules_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  index

  """column name"""
  name

  """column name"""
  updated_at
}

input mariokart8deluxe_race_rules_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: mariokart8deluxe_race_rules_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: mariokart8deluxe_race_rules_set_input

  """filter the rows which have to be updated"""
  where: mariokart8deluxe_race_rules_bool_exp!
}

"""aggregate var_pop on columns"""
type mariokart8deluxe_race_rules_var_pop_fields {
  index: Float
}

"""aggregate var_samp on columns"""
type mariokart8deluxe_race_rules_var_samp_fields {
  index: Float
}

"""aggregate variance on columns"""
type mariokart8deluxe_race_rules_variance_fields {
  index: Float
}

"""
columns and relationships of "mariokart8deluxe_races"
"""
type mariokart8deluxe_races {
  created_at: timestamptz!
  end_time: timestamptz
  id: uuid!
  index: Int
  is_aborted: Boolean

  """An object relationship"""
  mariokart8deluxe_course: mariokart8deluxe_courses
  mariokart8deluxe_course_id: uuid

  """An array relationship"""
  mariokart8deluxe_race_players(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_race_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_race_players_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_race_players_bool_exp
  ): [mariokart8deluxe_race_players!]!

  """An aggregate relationship"""
  mariokart8deluxe_race_players_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_race_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_race_players_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_race_players_bool_exp
  ): mariokart8deluxe_race_players_aggregate!

  """An object relationship"""
  mariokart8deluxe_race_rule: mariokart8deluxe_race_rules
  mariokart8deluxe_race_rule_id: uuid

  """An object relationship"""
  program: programs!
  program_id: uuid!
  start_time: timestamptz!
  updated_at: timestamptz!
}

"""
aggregated selection of "mariokart8deluxe_races"
"""
type mariokart8deluxe_races_aggregate {
  aggregate: mariokart8deluxe_races_aggregate_fields
  nodes: [mariokart8deluxe_races!]!
}

input mariokart8deluxe_races_aggregate_bool_exp {
  bool_and: mariokart8deluxe_races_aggregate_bool_exp_bool_and
  bool_or: mariokart8deluxe_races_aggregate_bool_exp_bool_or
  count: mariokart8deluxe_races_aggregate_bool_exp_count
}

input mariokart8deluxe_races_aggregate_bool_exp_bool_and {
  arguments: mariokart8deluxe_races_select_column_mariokart8deluxe_races_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: mariokart8deluxe_races_bool_exp
  predicate: Boolean_comparison_exp!
}

input mariokart8deluxe_races_aggregate_bool_exp_bool_or {
  arguments: mariokart8deluxe_races_select_column_mariokart8deluxe_races_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: mariokart8deluxe_races_bool_exp
  predicate: Boolean_comparison_exp!
}

input mariokart8deluxe_races_aggregate_bool_exp_count {
  arguments: [mariokart8deluxe_races_select_column!]
  distinct: Boolean
  filter: mariokart8deluxe_races_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "mariokart8deluxe_races"
"""
type mariokart8deluxe_races_aggregate_fields {
  avg: mariokart8deluxe_races_avg_fields
  count(columns: [mariokart8deluxe_races_select_column!], distinct: Boolean): Int!
  max: mariokart8deluxe_races_max_fields
  min: mariokart8deluxe_races_min_fields
  stddev: mariokart8deluxe_races_stddev_fields
  stddev_pop: mariokart8deluxe_races_stddev_pop_fields
  stddev_samp: mariokart8deluxe_races_stddev_samp_fields
  sum: mariokart8deluxe_races_sum_fields
  var_pop: mariokart8deluxe_races_var_pop_fields
  var_samp: mariokart8deluxe_races_var_samp_fields
  variance: mariokart8deluxe_races_variance_fields
}

"""
order by aggregate values of table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_aggregate_order_by {
  avg: mariokart8deluxe_races_avg_order_by
  count: order_by
  max: mariokart8deluxe_races_max_order_by
  min: mariokart8deluxe_races_min_order_by
  stddev: mariokart8deluxe_races_stddev_order_by
  stddev_pop: mariokart8deluxe_races_stddev_pop_order_by
  stddev_samp: mariokart8deluxe_races_stddev_samp_order_by
  sum: mariokart8deluxe_races_sum_order_by
  var_pop: mariokart8deluxe_races_var_pop_order_by
  var_samp: mariokart8deluxe_races_var_samp_order_by
  variance: mariokart8deluxe_races_variance_order_by
}

"""
input type for inserting array relation for remote table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_arr_rel_insert_input {
  data: [mariokart8deluxe_races_insert_input!]!

  """upsert condition"""
  on_conflict: mariokart8deluxe_races_on_conflict
}

"""aggregate avg on columns"""
type mariokart8deluxe_races_avg_fields {
  index: Float
}

"""
order by avg() on columns of table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_avg_order_by {
  index: order_by
}

"""
Boolean expression to filter rows from the table "mariokart8deluxe_races". All fields are combined with a logical 'AND'.
"""
input mariokart8deluxe_races_bool_exp {
  _and: [mariokart8deluxe_races_bool_exp!]
  _not: mariokart8deluxe_races_bool_exp
  _or: [mariokart8deluxe_races_bool_exp!]
  created_at: timestamptz_comparison_exp
  end_time: timestamptz_comparison_exp
  id: uuid_comparison_exp
  index: Int_comparison_exp
  is_aborted: Boolean_comparison_exp
  mariokart8deluxe_course: mariokart8deluxe_courses_bool_exp
  mariokart8deluxe_course_id: uuid_comparison_exp
  mariokart8deluxe_race_players: mariokart8deluxe_race_players_bool_exp
  mariokart8deluxe_race_players_aggregate: mariokart8deluxe_race_players_aggregate_bool_exp
  mariokart8deluxe_race_rule: mariokart8deluxe_race_rules_bool_exp
  mariokart8deluxe_race_rule_id: uuid_comparison_exp
  program: programs_bool_exp
  program_id: uuid_comparison_exp
  start_time: timestamptz_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "mariokart8deluxe_races"
"""
enum mariokart8deluxe_races_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  mariokart8deluxe_races_pkey

  """
  unique or primary key constraint on columns "index", "program_id"
  """
  mariokart8deluxe_races_program_id_index_key
}

"""
input type for incrementing numeric columns in table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_inc_input {
  index: Int
}

"""
input type for inserting data into table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_insert_input {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  is_aborted: Boolean
  mariokart8deluxe_course: mariokart8deluxe_courses_obj_rel_insert_input
  mariokart8deluxe_course_id: uuid
  mariokart8deluxe_race_players: mariokart8deluxe_race_players_arr_rel_insert_input
  mariokart8deluxe_race_rule: mariokart8deluxe_race_rules_obj_rel_insert_input
  mariokart8deluxe_race_rule_id: uuid
  program: programs_obj_rel_insert_input
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate max on columns"""
type mariokart8deluxe_races_max_fields {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  mariokart8deluxe_course_id: uuid
  mariokart8deluxe_race_rule_id: uuid
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""
order by max() on columns of table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_max_order_by {
  created_at: order_by
  end_time: order_by
  id: order_by
  index: order_by
  mariokart8deluxe_course_id: order_by
  mariokart8deluxe_race_rule_id: order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type mariokart8deluxe_races_min_fields {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  mariokart8deluxe_course_id: uuid
  mariokart8deluxe_race_rule_id: uuid
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""
order by min() on columns of table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_min_order_by {
  created_at: order_by
  end_time: order_by
  id: order_by
  index: order_by
  mariokart8deluxe_course_id: order_by
  mariokart8deluxe_race_rule_id: order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "mariokart8deluxe_races"
"""
type mariokart8deluxe_races_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [mariokart8deluxe_races!]!
}

"""
input type for inserting object relation for remote table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_obj_rel_insert_input {
  data: mariokart8deluxe_races_insert_input!

  """upsert condition"""
  on_conflict: mariokart8deluxe_races_on_conflict
}

"""
on_conflict condition type for table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_on_conflict {
  constraint: mariokart8deluxe_races_constraint!
  update_columns: [mariokart8deluxe_races_update_column!]! = []
  where: mariokart8deluxe_races_bool_exp
}

"""Ordering options when selecting data from "mariokart8deluxe_races"."""
input mariokart8deluxe_races_order_by {
  created_at: order_by
  end_time: order_by
  id: order_by
  index: order_by
  is_aborted: order_by
  mariokart8deluxe_course: mariokart8deluxe_courses_order_by
  mariokart8deluxe_course_id: order_by
  mariokart8deluxe_race_players_aggregate: mariokart8deluxe_race_players_aggregate_order_by
  mariokart8deluxe_race_rule: mariokart8deluxe_race_rules_order_by
  mariokart8deluxe_race_rule_id: order_by
  program: programs_order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
}

"""primary key columns input for table: mariokart8deluxe_races"""
input mariokart8deluxe_races_pk_columns_input {
  id: uuid!
}

"""
select columns of table "mariokart8deluxe_races"
"""
enum mariokart8deluxe_races_select_column {
  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  index

  """column name"""
  is_aborted

  """column name"""
  mariokart8deluxe_course_id

  """column name"""
  mariokart8deluxe_race_rule_id

  """column name"""
  program_id

  """column name"""
  start_time

  """column name"""
  updated_at
}

"""
select "mariokart8deluxe_races_aggregate_bool_exp_bool_and_arguments_columns" columns of table "mariokart8deluxe_races"
"""
enum mariokart8deluxe_races_select_column_mariokart8deluxe_races_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_aborted
}

"""
select "mariokart8deluxe_races_aggregate_bool_exp_bool_or_arguments_columns" columns of table "mariokart8deluxe_races"
"""
enum mariokart8deluxe_races_select_column_mariokart8deluxe_races_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_aborted
}

"""
input type for updating data in table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_set_input {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  is_aborted: Boolean
  mariokart8deluxe_course_id: uuid
  mariokart8deluxe_race_rule_id: uuid
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type mariokart8deluxe_races_stddev_fields {
  index: Float
}

"""
order by stddev() on columns of table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_stddev_order_by {
  index: order_by
}

"""aggregate stddev_pop on columns"""
type mariokart8deluxe_races_stddev_pop_fields {
  index: Float
}

"""
order by stddev_pop() on columns of table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_stddev_pop_order_by {
  index: order_by
}

"""aggregate stddev_samp on columns"""
type mariokart8deluxe_races_stddev_samp_fields {
  index: Float
}

"""
order by stddev_samp() on columns of table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_stddev_samp_order_by {
  index: order_by
}

"""
Streaming cursor of the table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mariokart8deluxe_races_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mariokart8deluxe_races_stream_cursor_value_input {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  index: Int
  is_aborted: Boolean
  mariokart8deluxe_course_id: uuid
  mariokart8deluxe_race_rule_id: uuid
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type mariokart8deluxe_races_sum_fields {
  index: Int
}

"""
order by sum() on columns of table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_sum_order_by {
  index: order_by
}

"""
update columns of table "mariokart8deluxe_races"
"""
enum mariokart8deluxe_races_update_column {
  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  index

  """column name"""
  is_aborted

  """column name"""
  mariokart8deluxe_course_id

  """column name"""
  mariokart8deluxe_race_rule_id

  """column name"""
  program_id

  """column name"""
  start_time

  """column name"""
  updated_at
}

input mariokart8deluxe_races_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: mariokart8deluxe_races_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: mariokart8deluxe_races_set_input

  """filter the rows which have to be updated"""
  where: mariokart8deluxe_races_bool_exp!
}

"""aggregate var_pop on columns"""
type mariokart8deluxe_races_var_pop_fields {
  index: Float
}

"""
order by var_pop() on columns of table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_var_pop_order_by {
  index: order_by
}

"""aggregate var_samp on columns"""
type mariokart8deluxe_races_var_samp_fields {
  index: Float
}

"""
order by var_samp() on columns of table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_var_samp_order_by {
  index: order_by
}

"""aggregate variance on columns"""
type mariokart8deluxe_races_variance_fields {
  index: Float
}

"""
order by variance() on columns of table "mariokart8deluxe_races"
"""
input mariokart8deluxe_races_variance_order_by {
  index: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "amongus_maps"
  """
  delete_amongus_maps(
    """filter the rows which have to be deleted"""
    where: amongus_maps_bool_exp!
  ): amongus_maps_mutation_response

  """
  delete single row from the table: "amongus_maps"
  """
  delete_amongus_maps_by_pk(id: uuid!): amongus_maps

  """
  delete data from the table: "amongus_match_mods"
  """
  delete_amongus_match_mods(
    """filter the rows which have to be deleted"""
    where: amongus_match_mods_bool_exp!
  ): amongus_match_mods_mutation_response

  """
  delete single row from the table: "amongus_match_mods"
  """
  delete_amongus_match_mods_by_pk(id: uuid!): amongus_match_mods

  """
  delete data from the table: "amongus_match_player_result_roles"
  """
  delete_amongus_match_player_result_roles(
    """filter the rows which have to be deleted"""
    where: amongus_match_player_result_roles_bool_exp!
  ): amongus_match_player_result_roles_mutation_response

  """
  delete single row from the table: "amongus_match_player_result_roles"
  """
  delete_amongus_match_player_result_roles_by_pk(id: uuid!): amongus_match_player_result_roles

  """
  delete data from the table: "amongus_match_players"
  """
  delete_amongus_match_players(
    """filter the rows which have to be deleted"""
    where: amongus_match_players_bool_exp!
  ): amongus_match_players_mutation_response

  """
  delete single row from the table: "amongus_match_players"
  """
  delete_amongus_match_players_by_pk(id: uuid!): amongus_match_players

  """
  delete data from the table: "amongus_matches"
  """
  delete_amongus_matches(
    """filter the rows which have to be deleted"""
    where: amongus_matches_bool_exp!
  ): amongus_matches_mutation_response

  """
  delete single row from the table: "amongus_matches"
  """
  delete_amongus_matches_by_pk(id: uuid!): amongus_matches

  """
  delete data from the table: "amongus_mod_versions"
  """
  delete_amongus_mod_versions(
    """filter the rows which have to be deleted"""
    where: amongus_mod_versions_bool_exp!
  ): amongus_mod_versions_mutation_response

  """
  delete single row from the table: "amongus_mod_versions"
  """
  delete_amongus_mod_versions_by_pk(id: uuid!): amongus_mod_versions

  """
  delete data from the table: "amongus_mods"
  """
  delete_amongus_mods(
    """filter the rows which have to be deleted"""
    where: amongus_mods_bool_exp!
  ): amongus_mods_mutation_response

  """
  delete single row from the table: "amongus_mods"
  """
  delete_amongus_mods_by_pk(id: uuid!): amongus_mods

  """
  delete data from the table: "amongus_roles"
  """
  delete_amongus_roles(
    """filter the rows which have to be deleted"""
    where: amongus_roles_bool_exp!
  ): amongus_roles_mutation_response

  """
  delete single row from the table: "amongus_roles"
  """
  delete_amongus_roles_by_pk(id: uuid!): amongus_roles

  """
  delete data from the table: "amongus_vanilla_versions"
  """
  delete_amongus_vanilla_versions(
    """filter the rows which have to be deleted"""
    where: amongus_vanilla_versions_bool_exp!
  ): amongus_vanilla_versions_mutation_response

  """
  delete single row from the table: "amongus_vanilla_versions"
  """
  delete_amongus_vanilla_versions_by_pk(id: uuid!): amongus_vanilla_versions

  """
  delete data from the table: "amongusvr_maps"
  """
  delete_amongusvr_maps(
    """filter the rows which have to be deleted"""
    where: amongusvr_maps_bool_exp!
  ): amongusvr_maps_mutation_response

  """
  delete single row from the table: "amongusvr_maps"
  """
  delete_amongusvr_maps_by_pk(id: uuid!): amongusvr_maps

  """
  delete data from the table: "amongusvr_match_players"
  """
  delete_amongusvr_match_players(
    """filter the rows which have to be deleted"""
    where: amongusvr_match_players_bool_exp!
  ): amongusvr_match_players_mutation_response

  """
  delete single row from the table: "amongusvr_match_players"
  """
  delete_amongusvr_match_players_by_pk(id: uuid!): amongusvr_match_players

  """
  delete data from the table: "amongusvr_matches"
  """
  delete_amongusvr_matches(
    """filter the rows which have to be deleted"""
    where: amongusvr_matches_bool_exp!
  ): amongusvr_matches_mutation_response

  """
  delete single row from the table: "amongusvr_matches"
  """
  delete_amongusvr_matches_by_pk(id: uuid!): amongusvr_matches

  """
  delete data from the table: "fallguys_custom_round_twitter_announcements"
  """
  delete_fallguys_custom_round_twitter_announcements(
    """filter the rows which have to be deleted"""
    where: fallguys_custom_round_twitter_announcements_bool_exp!
  ): fallguys_custom_round_twitter_announcements_mutation_response

  """
  delete single row from the table: "fallguys_custom_round_twitter_announcements"
  """
  delete_fallguys_custom_round_twitter_announcements_by_pk(id: uuid!): fallguys_custom_round_twitter_announcements

  """
  delete data from the table: "fallguys_custom_rounds"
  """
  delete_fallguys_custom_rounds(
    """filter the rows which have to be deleted"""
    where: fallguys_custom_rounds_bool_exp!
  ): fallguys_custom_rounds_mutation_response

  """
  delete single row from the table: "fallguys_custom_rounds"
  """
  delete_fallguys_custom_rounds_by_pk(id: uuid!): fallguys_custom_rounds

  """
  delete data from the table: "fallguys_match_rounds"
  """
  delete_fallguys_match_rounds(
    """filter the rows which have to be deleted"""
    where: fallguys_match_rounds_bool_exp!
  ): fallguys_match_rounds_mutation_response

  """
  delete single row from the table: "fallguys_match_rounds"
  """
  delete_fallguys_match_rounds_by_pk(id: uuid!): fallguys_match_rounds

  """
  delete data from the table: "fallguys_matches"
  """
  delete_fallguys_matches(
    """filter the rows which have to be deleted"""
    where: fallguys_matches_bool_exp!
  ): fallguys_matches_mutation_response

  """
  delete single row from the table: "fallguys_matches"
  """
  delete_fallguys_matches_by_pk(id: uuid!): fallguys_matches

  """
  delete data from the table: "fallguys_rounds"
  """
  delete_fallguys_rounds(
    """filter the rows which have to be deleted"""
    where: fallguys_rounds_bool_exp!
  ): fallguys_rounds_mutation_response

  """
  delete single row from the table: "fallguys_rounds"
  """
  delete_fallguys_rounds_by_pk(id: uuid!): fallguys_rounds

  """
  delete data from the table: "fediverse_accounts"
  """
  delete_fediverse_accounts(
    """filter the rows which have to be deleted"""
    where: fediverse_accounts_bool_exp!
  ): fediverse_accounts_mutation_response

  """
  delete single row from the table: "fediverse_accounts"
  """
  delete_fediverse_accounts_by_pk(id: uuid!): fediverse_accounts

  """
  delete data from the table: "games"
  """
  delete_games(
    """filter the rows which have to be deleted"""
    where: games_bool_exp!
  ): games_mutation_response

  """
  delete single row from the table: "games"
  """
  delete_games_by_pk(id: uuid!): games

  """
  delete data from the table: "mariokart8deluxe_battle_courses"
  """
  delete_mariokart8deluxe_battle_courses(
    """filter the rows which have to be deleted"""
    where: mariokart8deluxe_battle_courses_bool_exp!
  ): mariokart8deluxe_battle_courses_mutation_response

  """
  delete single row from the table: "mariokart8deluxe_battle_courses"
  """
  delete_mariokart8deluxe_battle_courses_by_pk(id: uuid!): mariokart8deluxe_battle_courses

  """
  delete data from the table: "mariokart8deluxe_battle_match_players"
  """
  delete_mariokart8deluxe_battle_match_players(
    """filter the rows which have to be deleted"""
    where: mariokart8deluxe_battle_match_players_bool_exp!
  ): mariokart8deluxe_battle_match_players_mutation_response

  """
  delete single row from the table: "mariokart8deluxe_battle_match_players"
  """
  delete_mariokart8deluxe_battle_match_players_by_pk(id: uuid!): mariokart8deluxe_battle_match_players

  """
  delete data from the table: "mariokart8deluxe_battle_matches"
  """
  delete_mariokart8deluxe_battle_matches(
    """filter the rows which have to be deleted"""
    where: mariokart8deluxe_battle_matches_bool_exp!
  ): mariokart8deluxe_battle_matches_mutation_response

  """
  delete single row from the table: "mariokart8deluxe_battle_matches"
  """
  delete_mariokart8deluxe_battle_matches_by_pk(id: uuid!): mariokart8deluxe_battle_matches

  """
  delete data from the table: "mariokart8deluxe_battle_rules"
  """
  delete_mariokart8deluxe_battle_rules(
    """filter the rows which have to be deleted"""
    where: mariokart8deluxe_battle_rules_bool_exp!
  ): mariokart8deluxe_battle_rules_mutation_response

  """
  delete single row from the table: "mariokart8deluxe_battle_rules"
  """
  delete_mariokart8deluxe_battle_rules_by_pk(id: uuid!): mariokart8deluxe_battle_rules

  """
  delete data from the table: "mariokart8deluxe_consoles"
  """
  delete_mariokart8deluxe_consoles(
    """filter the rows which have to be deleted"""
    where: mariokart8deluxe_consoles_bool_exp!
  ): mariokart8deluxe_consoles_mutation_response

  """
  delete single row from the table: "mariokart8deluxe_consoles"
  """
  delete_mariokart8deluxe_consoles_by_pk(id: uuid!): mariokart8deluxe_consoles

  """
  delete data from the table: "mariokart8deluxe_courses"
  """
  delete_mariokart8deluxe_courses(
    """filter the rows which have to be deleted"""
    where: mariokart8deluxe_courses_bool_exp!
  ): mariokart8deluxe_courses_mutation_response

  """
  delete single row from the table: "mariokart8deluxe_courses"
  """
  delete_mariokart8deluxe_courses_by_pk(id: uuid!): mariokart8deluxe_courses

  """
  delete data from the table: "mariokart8deluxe_cups"
  """
  delete_mariokart8deluxe_cups(
    """filter the rows which have to be deleted"""
    where: mariokart8deluxe_cups_bool_exp!
  ): mariokart8deluxe_cups_mutation_response

  """
  delete single row from the table: "mariokart8deluxe_cups"
  """
  delete_mariokart8deluxe_cups_by_pk(id: uuid!): mariokart8deluxe_cups

  """
  delete data from the table: "mariokart8deluxe_race_players"
  """
  delete_mariokart8deluxe_race_players(
    """filter the rows which have to be deleted"""
    where: mariokart8deluxe_race_players_bool_exp!
  ): mariokart8deluxe_race_players_mutation_response

  """
  delete single row from the table: "mariokart8deluxe_race_players"
  """
  delete_mariokart8deluxe_race_players_by_pk(id: uuid!): mariokart8deluxe_race_players

  """
  delete data from the table: "mariokart8deluxe_race_rules"
  """
  delete_mariokart8deluxe_race_rules(
    """filter the rows which have to be deleted"""
    where: mariokart8deluxe_race_rules_bool_exp!
  ): mariokart8deluxe_race_rules_mutation_response

  """
  delete single row from the table: "mariokart8deluxe_race_rules"
  """
  delete_mariokart8deluxe_race_rules_by_pk(id: uuid!): mariokart8deluxe_race_rules

  """
  delete data from the table: "mariokart8deluxe_races"
  """
  delete_mariokart8deluxe_races(
    """filter the rows which have to be deleted"""
    where: mariokart8deluxe_races_bool_exp!
  ): mariokart8deluxe_races_mutation_response

  """
  delete single row from the table: "mariokart8deluxe_races"
  """
  delete_mariokart8deluxe_races_by_pk(id: uuid!): mariokart8deluxe_races

  """
  delete data from the table: "niconico_accounts"
  """
  delete_niconico_accounts(
    """filter the rows which have to be deleted"""
    where: niconico_accounts_bool_exp!
  ): niconico_accounts_mutation_response

  """
  delete single row from the table: "niconico_accounts"
  """
  delete_niconico_accounts_by_pk(id: uuid!): niconico_accounts

  """
  delete data from the table: "niconico_channels"
  """
  delete_niconico_channels(
    """filter the rows which have to be deleted"""
    where: niconico_channels_bool_exp!
  ): niconico_channels_mutation_response

  """
  delete single row from the table: "niconico_channels"
  """
  delete_niconico_channels_by_pk(id: uuid!): niconico_channels

  """
  delete data from the table: "niconico_communities"
  """
  delete_niconico_communities(
    """filter the rows which have to be deleted"""
    where: niconico_communities_bool_exp!
  ): niconico_communities_mutation_response

  """
  delete single row from the table: "niconico_communities"
  """
  delete_niconico_communities_by_pk(id: uuid!): niconico_communities

  """
  delete data from the table: "niconico_plus_channels"
  """
  delete_niconico_plus_channels(
    """filter the rows which have to be deleted"""
    where: niconico_plus_channels_bool_exp!
  ): niconico_plus_channels_mutation_response

  """
  delete single row from the table: "niconico_plus_channels"
  """
  delete_niconico_plus_channels_by_pk(id: uuid!): niconico_plus_channels

  """
  delete data from the table: "niconico_videos"
  """
  delete_niconico_videos(
    """filter the rows which have to be deleted"""
    where: niconico_videos_bool_exp!
  ): niconico_videos_mutation_response

  """
  delete single row from the table: "niconico_videos"
  """
  delete_niconico_videos_by_pk(id: uuid!): niconico_videos

  """
  delete data from the table: "person_fediverse_accounts"
  """
  delete_person_fediverse_accounts(
    """filter the rows which have to be deleted"""
    where: person_fediverse_accounts_bool_exp!
  ): person_fediverse_accounts_mutation_response

  """
  delete single row from the table: "person_fediverse_accounts"
  """
  delete_person_fediverse_accounts_by_pk(id: uuid!): person_fediverse_accounts

  """
  delete data from the table: "person_niconico_accounts"
  """
  delete_person_niconico_accounts(
    """filter the rows which have to be deleted"""
    where: person_niconico_accounts_bool_exp!
  ): person_niconico_accounts_mutation_response

  """
  delete single row from the table: "person_niconico_accounts"
  """
  delete_person_niconico_accounts_by_pk(id: uuid!): person_niconico_accounts

  """
  delete data from the table: "person_niconico_channels"
  """
  delete_person_niconico_channels(
    """filter the rows which have to be deleted"""
    where: person_niconico_channels_bool_exp!
  ): person_niconico_channels_mutation_response

  """
  delete single row from the table: "person_niconico_channels"
  """
  delete_person_niconico_channels_by_pk(id: uuid!): person_niconico_channels

  """
  delete data from the table: "person_niconico_communities"
  """
  delete_person_niconico_communities(
    """filter the rows which have to be deleted"""
    where: person_niconico_communities_bool_exp!
  ): person_niconico_communities_mutation_response

  """
  delete single row from the table: "person_niconico_communities"
  """
  delete_person_niconico_communities_by_pk(id: uuid!): person_niconico_communities

  """
  delete data from the table: "person_niconico_plus_channels"
  """
  delete_person_niconico_plus_channels(
    """filter the rows which have to be deleted"""
    where: person_niconico_plus_channels_bool_exp!
  ): person_niconico_plus_channels_mutation_response

  """
  delete single row from the table: "person_niconico_plus_channels"
  """
  delete_person_niconico_plus_channels_by_pk(id: uuid!): person_niconico_plus_channels

  """
  delete data from the table: "person_twitter_accounts"
  """
  delete_person_twitter_accounts(
    """filter the rows which have to be deleted"""
    where: person_twitter_accounts_bool_exp!
  ): person_twitter_accounts_mutation_response

  """
  delete single row from the table: "person_twitter_accounts"
  """
  delete_person_twitter_accounts_by_pk(id: uuid!): person_twitter_accounts

  """
  delete data from the table: "person_youtube_channels"
  """
  delete_person_youtube_channels(
    """filter the rows which have to be deleted"""
    where: person_youtube_channels_bool_exp!
  ): person_youtube_channels_mutation_response

  """
  delete single row from the table: "person_youtube_channels"
  """
  delete_person_youtube_channels_by_pk(id: uuid!): person_youtube_channels

  """
  delete data from the table: "persons"
  """
  delete_persons(
    """filter the rows which have to be deleted"""
    where: persons_bool_exp!
  ): persons_mutation_response

  """
  delete single row from the table: "persons"
  """
  delete_persons_by_pk(id: uuid!): persons

  """
  delete data from the table: "program_amongus_maps"
  """
  delete_program_amongus_maps(
    """filter the rows which have to be deleted"""
    where: program_amongus_maps_bool_exp!
  ): program_amongus_maps_mutation_response

  """
  delete single row from the table: "program_amongus_maps"
  """
  delete_program_amongus_maps_by_pk(id: uuid!): program_amongus_maps

  """
  delete data from the table: "program_amongus_mods"
  """
  delete_program_amongus_mods(
    """filter the rows which have to be deleted"""
    where: program_amongus_mods_bool_exp!
  ): program_amongus_mods_mutation_response

  """
  delete single row from the table: "program_amongus_mods"
  """
  delete_program_amongus_mods_by_pk(id: uuid!): program_amongus_mods

  """
  delete data from the table: "program_amongus_vanilla_versions"
  """
  delete_program_amongus_vanilla_versions(
    """filter the rows which have to be deleted"""
    where: program_amongus_vanilla_versions_bool_exp!
  ): program_amongus_vanilla_versions_mutation_response

  """
  delete single row from the table: "program_amongus_vanilla_versions"
  """
  delete_program_amongus_vanilla_versions_by_pk(id: uuid!): program_amongus_vanilla_versions

  """
  delete data from the table: "program_live_archives"
  """
  delete_program_live_archives(
    """filter the rows which have to be deleted"""
    where: program_live_archives_bool_exp!
  ): program_live_archives_mutation_response

  """
  delete single row from the table: "program_live_archives"
  """
  delete_program_live_archives_by_pk(id: uuid!): program_live_archives

  """
  delete data from the table: "program_niconico_videos"
  """
  delete_program_niconico_videos(
    """filter the rows which have to be deleted"""
    where: program_niconico_videos_bool_exp!
  ): program_niconico_videos_mutation_response

  """
  delete single row from the table: "program_niconico_videos"
  """
  delete_program_niconico_videos_by_pk(id: uuid!): program_niconico_videos

  """
  delete data from the table: "program_persons"
  """
  delete_program_persons(
    """filter the rows which have to be deleted"""
    where: program_persons_bool_exp!
  ): program_persons_mutation_response

  """
  delete single row from the table: "program_persons"
  """
  delete_program_persons_by_pk(id: uuid!): program_persons

  """
  delete data from the table: "program_projects"
  """
  delete_program_projects(
    """filter the rows which have to be deleted"""
    where: program_projects_bool_exp!
  ): program_projects_mutation_response

  """
  delete single row from the table: "program_projects"
  """
  delete_program_projects_by_pk(id: uuid!): program_projects

  """
  delete data from the table: "program_twitter_announcements"
  """
  delete_program_twitter_announcements(
    """filter the rows which have to be deleted"""
    where: program_twitter_announcements_bool_exp!
  ): program_twitter_announcements_mutation_response

  """
  delete single row from the table: "program_twitter_announcements"
  """
  delete_program_twitter_announcements_by_pk(id: uuid!): program_twitter_announcements

  """
  delete data from the table: "programs"
  """
  delete_programs(
    """filter the rows which have to be deleted"""
    where: programs_bool_exp!
  ): programs_mutation_response

  """
  delete single row from the table: "programs"
  """
  delete_programs_by_pk(id: uuid!): programs

  """
  delete data from the table: "project_niconico_videos"
  """
  delete_project_niconico_videos(
    """filter the rows which have to be deleted"""
    where: project_niconico_videos_bool_exp!
  ): project_niconico_videos_mutation_response

  """
  delete single row from the table: "project_niconico_videos"
  """
  delete_project_niconico_videos_by_pk(id: uuid!): project_niconico_videos

  """
  delete data from the table: "projects"
  """
  delete_projects(
    """filter the rows which have to be deleted"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  delete single row from the table: "projects"
  """
  delete_projects_by_pk(id: uuid!): projects

  """
  delete data from the table: "twitter_accounts"
  """
  delete_twitter_accounts(
    """filter the rows which have to be deleted"""
    where: twitter_accounts_bool_exp!
  ): twitter_accounts_mutation_response

  """
  delete single row from the table: "twitter_accounts"
  """
  delete_twitter_accounts_by_pk(id: uuid!): twitter_accounts

  """
  delete data from the table: "twitter_tweet_images"
  """
  delete_twitter_tweet_images(
    """filter the rows which have to be deleted"""
    where: twitter_tweet_images_bool_exp!
  ): twitter_tweet_images_mutation_response

  """
  delete single row from the table: "twitter_tweet_images"
  """
  delete_twitter_tweet_images_by_pk(id: uuid!): twitter_tweet_images

  """
  delete data from the table: "twitter_tweets"
  """
  delete_twitter_tweets(
    """filter the rows which have to be deleted"""
    where: twitter_tweets_bool_exp!
  ): twitter_tweets_mutation_response

  """
  delete single row from the table: "twitter_tweets"
  """
  delete_twitter_tweets_by_pk(id: uuid!): twitter_tweets

  """
  delete data from the table: "youtube_channels"
  """
  delete_youtube_channels(
    """filter the rows which have to be deleted"""
    where: youtube_channels_bool_exp!
  ): youtube_channels_mutation_response

  """
  delete single row from the table: "youtube_channels"
  """
  delete_youtube_channels_by_pk(id: uuid!): youtube_channels

  """
  delete data from the table: "youtube_lives"
  """
  delete_youtube_lives(
    """filter the rows which have to be deleted"""
    where: youtube_lives_bool_exp!
  ): youtube_lives_mutation_response

  """
  delete single row from the table: "youtube_lives"
  """
  delete_youtube_lives_by_pk(id: uuid!): youtube_lives

  """
  delete data from the table: "youtube_videos"
  """
  delete_youtube_videos(
    """filter the rows which have to be deleted"""
    where: youtube_videos_bool_exp!
  ): youtube_videos_mutation_response

  """
  delete single row from the table: "youtube_videos"
  """
  delete_youtube_videos_by_pk(id: uuid!): youtube_videos

  """
  insert data into the table: "amongus_maps"
  """
  insert_amongus_maps(
    """the rows to be inserted"""
    objects: [amongus_maps_insert_input!]!

    """upsert condition"""
    on_conflict: amongus_maps_on_conflict
  ): amongus_maps_mutation_response

  """
  insert a single row into the table: "amongus_maps"
  """
  insert_amongus_maps_one(
    """the row to be inserted"""
    object: amongus_maps_insert_input!

    """upsert condition"""
    on_conflict: amongus_maps_on_conflict
  ): amongus_maps

  """
  insert data into the table: "amongus_match_mods"
  """
  insert_amongus_match_mods(
    """the rows to be inserted"""
    objects: [amongus_match_mods_insert_input!]!

    """upsert condition"""
    on_conflict: amongus_match_mods_on_conflict
  ): amongus_match_mods_mutation_response

  """
  insert a single row into the table: "amongus_match_mods"
  """
  insert_amongus_match_mods_one(
    """the row to be inserted"""
    object: amongus_match_mods_insert_input!

    """upsert condition"""
    on_conflict: amongus_match_mods_on_conflict
  ): amongus_match_mods

  """
  insert data into the table: "amongus_match_player_result_roles"
  """
  insert_amongus_match_player_result_roles(
    """the rows to be inserted"""
    objects: [amongus_match_player_result_roles_insert_input!]!

    """upsert condition"""
    on_conflict: amongus_match_player_result_roles_on_conflict
  ): amongus_match_player_result_roles_mutation_response

  """
  insert a single row into the table: "amongus_match_player_result_roles"
  """
  insert_amongus_match_player_result_roles_one(
    """the row to be inserted"""
    object: amongus_match_player_result_roles_insert_input!

    """upsert condition"""
    on_conflict: amongus_match_player_result_roles_on_conflict
  ): amongus_match_player_result_roles

  """
  insert data into the table: "amongus_match_players"
  """
  insert_amongus_match_players(
    """the rows to be inserted"""
    objects: [amongus_match_players_insert_input!]!

    """upsert condition"""
    on_conflict: amongus_match_players_on_conflict
  ): amongus_match_players_mutation_response

  """
  insert a single row into the table: "amongus_match_players"
  """
  insert_amongus_match_players_one(
    """the row to be inserted"""
    object: amongus_match_players_insert_input!

    """upsert condition"""
    on_conflict: amongus_match_players_on_conflict
  ): amongus_match_players

  """
  insert data into the table: "amongus_matches"
  """
  insert_amongus_matches(
    """the rows to be inserted"""
    objects: [amongus_matches_insert_input!]!

    """upsert condition"""
    on_conflict: amongus_matches_on_conflict
  ): amongus_matches_mutation_response

  """
  insert a single row into the table: "amongus_matches"
  """
  insert_amongus_matches_one(
    """the row to be inserted"""
    object: amongus_matches_insert_input!

    """upsert condition"""
    on_conflict: amongus_matches_on_conflict
  ): amongus_matches

  """
  insert data into the table: "amongus_mod_versions"
  """
  insert_amongus_mod_versions(
    """the rows to be inserted"""
    objects: [amongus_mod_versions_insert_input!]!

    """upsert condition"""
    on_conflict: amongus_mod_versions_on_conflict
  ): amongus_mod_versions_mutation_response

  """
  insert a single row into the table: "amongus_mod_versions"
  """
  insert_amongus_mod_versions_one(
    """the row to be inserted"""
    object: amongus_mod_versions_insert_input!

    """upsert condition"""
    on_conflict: amongus_mod_versions_on_conflict
  ): amongus_mod_versions

  """
  insert data into the table: "amongus_mods"
  """
  insert_amongus_mods(
    """the rows to be inserted"""
    objects: [amongus_mods_insert_input!]!

    """upsert condition"""
    on_conflict: amongus_mods_on_conflict
  ): amongus_mods_mutation_response

  """
  insert a single row into the table: "amongus_mods"
  """
  insert_amongus_mods_one(
    """the row to be inserted"""
    object: amongus_mods_insert_input!

    """upsert condition"""
    on_conflict: amongus_mods_on_conflict
  ): amongus_mods

  """
  insert data into the table: "amongus_roles"
  """
  insert_amongus_roles(
    """the rows to be inserted"""
    objects: [amongus_roles_insert_input!]!

    """upsert condition"""
    on_conflict: amongus_roles_on_conflict
  ): amongus_roles_mutation_response

  """
  insert a single row into the table: "amongus_roles"
  """
  insert_amongus_roles_one(
    """the row to be inserted"""
    object: amongus_roles_insert_input!

    """upsert condition"""
    on_conflict: amongus_roles_on_conflict
  ): amongus_roles

  """
  insert data into the table: "amongus_vanilla_versions"
  """
  insert_amongus_vanilla_versions(
    """the rows to be inserted"""
    objects: [amongus_vanilla_versions_insert_input!]!

    """upsert condition"""
    on_conflict: amongus_vanilla_versions_on_conflict
  ): amongus_vanilla_versions_mutation_response

  """
  insert a single row into the table: "amongus_vanilla_versions"
  """
  insert_amongus_vanilla_versions_one(
    """the row to be inserted"""
    object: amongus_vanilla_versions_insert_input!

    """upsert condition"""
    on_conflict: amongus_vanilla_versions_on_conflict
  ): amongus_vanilla_versions

  """
  insert data into the table: "amongusvr_maps"
  """
  insert_amongusvr_maps(
    """the rows to be inserted"""
    objects: [amongusvr_maps_insert_input!]!

    """upsert condition"""
    on_conflict: amongusvr_maps_on_conflict
  ): amongusvr_maps_mutation_response

  """
  insert a single row into the table: "amongusvr_maps"
  """
  insert_amongusvr_maps_one(
    """the row to be inserted"""
    object: amongusvr_maps_insert_input!

    """upsert condition"""
    on_conflict: amongusvr_maps_on_conflict
  ): amongusvr_maps

  """
  insert data into the table: "amongusvr_match_players"
  """
  insert_amongusvr_match_players(
    """the rows to be inserted"""
    objects: [amongusvr_match_players_insert_input!]!

    """upsert condition"""
    on_conflict: amongusvr_match_players_on_conflict
  ): amongusvr_match_players_mutation_response

  """
  insert a single row into the table: "amongusvr_match_players"
  """
  insert_amongusvr_match_players_one(
    """the row to be inserted"""
    object: amongusvr_match_players_insert_input!

    """upsert condition"""
    on_conflict: amongusvr_match_players_on_conflict
  ): amongusvr_match_players

  """
  insert data into the table: "amongusvr_matches"
  """
  insert_amongusvr_matches(
    """the rows to be inserted"""
    objects: [amongusvr_matches_insert_input!]!

    """upsert condition"""
    on_conflict: amongusvr_matches_on_conflict
  ): amongusvr_matches_mutation_response

  """
  insert a single row into the table: "amongusvr_matches"
  """
  insert_amongusvr_matches_one(
    """the row to be inserted"""
    object: amongusvr_matches_insert_input!

    """upsert condition"""
    on_conflict: amongusvr_matches_on_conflict
  ): amongusvr_matches

  """
  insert data into the table: "fallguys_custom_round_twitter_announcements"
  """
  insert_fallguys_custom_round_twitter_announcements(
    """the rows to be inserted"""
    objects: [fallguys_custom_round_twitter_announcements_insert_input!]!

    """upsert condition"""
    on_conflict: fallguys_custom_round_twitter_announcements_on_conflict
  ): fallguys_custom_round_twitter_announcements_mutation_response

  """
  insert a single row into the table: "fallguys_custom_round_twitter_announcements"
  """
  insert_fallguys_custom_round_twitter_announcements_one(
    """the row to be inserted"""
    object: fallguys_custom_round_twitter_announcements_insert_input!

    """upsert condition"""
    on_conflict: fallguys_custom_round_twitter_announcements_on_conflict
  ): fallguys_custom_round_twitter_announcements

  """
  insert data into the table: "fallguys_custom_rounds"
  """
  insert_fallguys_custom_rounds(
    """the rows to be inserted"""
    objects: [fallguys_custom_rounds_insert_input!]!

    """upsert condition"""
    on_conflict: fallguys_custom_rounds_on_conflict
  ): fallguys_custom_rounds_mutation_response

  """
  insert a single row into the table: "fallguys_custom_rounds"
  """
  insert_fallguys_custom_rounds_one(
    """the row to be inserted"""
    object: fallguys_custom_rounds_insert_input!

    """upsert condition"""
    on_conflict: fallguys_custom_rounds_on_conflict
  ): fallguys_custom_rounds

  """
  insert data into the table: "fallguys_match_rounds"
  """
  insert_fallguys_match_rounds(
    """the rows to be inserted"""
    objects: [fallguys_match_rounds_insert_input!]!

    """upsert condition"""
    on_conflict: fallguys_match_rounds_on_conflict
  ): fallguys_match_rounds_mutation_response

  """
  insert a single row into the table: "fallguys_match_rounds"
  """
  insert_fallguys_match_rounds_one(
    """the row to be inserted"""
    object: fallguys_match_rounds_insert_input!

    """upsert condition"""
    on_conflict: fallguys_match_rounds_on_conflict
  ): fallguys_match_rounds

  """
  insert data into the table: "fallguys_matches"
  """
  insert_fallguys_matches(
    """the rows to be inserted"""
    objects: [fallguys_matches_insert_input!]!

    """upsert condition"""
    on_conflict: fallguys_matches_on_conflict
  ): fallguys_matches_mutation_response

  """
  insert a single row into the table: "fallguys_matches"
  """
  insert_fallguys_matches_one(
    """the row to be inserted"""
    object: fallguys_matches_insert_input!

    """upsert condition"""
    on_conflict: fallguys_matches_on_conflict
  ): fallguys_matches

  """
  insert data into the table: "fallguys_rounds"
  """
  insert_fallguys_rounds(
    """the rows to be inserted"""
    objects: [fallguys_rounds_insert_input!]!

    """upsert condition"""
    on_conflict: fallguys_rounds_on_conflict
  ): fallguys_rounds_mutation_response

  """
  insert a single row into the table: "fallguys_rounds"
  """
  insert_fallguys_rounds_one(
    """the row to be inserted"""
    object: fallguys_rounds_insert_input!

    """upsert condition"""
    on_conflict: fallguys_rounds_on_conflict
  ): fallguys_rounds

  """
  insert data into the table: "fediverse_accounts"
  """
  insert_fediverse_accounts(
    """the rows to be inserted"""
    objects: [fediverse_accounts_insert_input!]!

    """upsert condition"""
    on_conflict: fediverse_accounts_on_conflict
  ): fediverse_accounts_mutation_response

  """
  insert a single row into the table: "fediverse_accounts"
  """
  insert_fediverse_accounts_one(
    """the row to be inserted"""
    object: fediverse_accounts_insert_input!

    """upsert condition"""
    on_conflict: fediverse_accounts_on_conflict
  ): fediverse_accounts

  """
  insert data into the table: "games"
  """
  insert_games(
    """the rows to be inserted"""
    objects: [games_insert_input!]!

    """upsert condition"""
    on_conflict: games_on_conflict
  ): games_mutation_response

  """
  insert a single row into the table: "games"
  """
  insert_games_one(
    """the row to be inserted"""
    object: games_insert_input!

    """upsert condition"""
    on_conflict: games_on_conflict
  ): games

  """
  insert data into the table: "mariokart8deluxe_battle_courses"
  """
  insert_mariokart8deluxe_battle_courses(
    """the rows to be inserted"""
    objects: [mariokart8deluxe_battle_courses_insert_input!]!

    """upsert condition"""
    on_conflict: mariokart8deluxe_battle_courses_on_conflict
  ): mariokart8deluxe_battle_courses_mutation_response

  """
  insert a single row into the table: "mariokart8deluxe_battle_courses"
  """
  insert_mariokart8deluxe_battle_courses_one(
    """the row to be inserted"""
    object: mariokart8deluxe_battle_courses_insert_input!

    """upsert condition"""
    on_conflict: mariokart8deluxe_battle_courses_on_conflict
  ): mariokart8deluxe_battle_courses

  """
  insert data into the table: "mariokart8deluxe_battle_match_players"
  """
  insert_mariokart8deluxe_battle_match_players(
    """the rows to be inserted"""
    objects: [mariokart8deluxe_battle_match_players_insert_input!]!

    """upsert condition"""
    on_conflict: mariokart8deluxe_battle_match_players_on_conflict
  ): mariokart8deluxe_battle_match_players_mutation_response

  """
  insert a single row into the table: "mariokart8deluxe_battle_match_players"
  """
  insert_mariokart8deluxe_battle_match_players_one(
    """the row to be inserted"""
    object: mariokart8deluxe_battle_match_players_insert_input!

    """upsert condition"""
    on_conflict: mariokart8deluxe_battle_match_players_on_conflict
  ): mariokart8deluxe_battle_match_players

  """
  insert data into the table: "mariokart8deluxe_battle_matches"
  """
  insert_mariokart8deluxe_battle_matches(
    """the rows to be inserted"""
    objects: [mariokart8deluxe_battle_matches_insert_input!]!

    """upsert condition"""
    on_conflict: mariokart8deluxe_battle_matches_on_conflict
  ): mariokart8deluxe_battle_matches_mutation_response

  """
  insert a single row into the table: "mariokart8deluxe_battle_matches"
  """
  insert_mariokart8deluxe_battle_matches_one(
    """the row to be inserted"""
    object: mariokart8deluxe_battle_matches_insert_input!

    """upsert condition"""
    on_conflict: mariokart8deluxe_battle_matches_on_conflict
  ): mariokart8deluxe_battle_matches

  """
  insert data into the table: "mariokart8deluxe_battle_rules"
  """
  insert_mariokart8deluxe_battle_rules(
    """the rows to be inserted"""
    objects: [mariokart8deluxe_battle_rules_insert_input!]!

    """upsert condition"""
    on_conflict: mariokart8deluxe_battle_rules_on_conflict
  ): mariokart8deluxe_battle_rules_mutation_response

  """
  insert a single row into the table: "mariokart8deluxe_battle_rules"
  """
  insert_mariokart8deluxe_battle_rules_one(
    """the row to be inserted"""
    object: mariokart8deluxe_battle_rules_insert_input!

    """upsert condition"""
    on_conflict: mariokart8deluxe_battle_rules_on_conflict
  ): mariokart8deluxe_battle_rules

  """
  insert data into the table: "mariokart8deluxe_consoles"
  """
  insert_mariokart8deluxe_consoles(
    """the rows to be inserted"""
    objects: [mariokart8deluxe_consoles_insert_input!]!

    """upsert condition"""
    on_conflict: mariokart8deluxe_consoles_on_conflict
  ): mariokart8deluxe_consoles_mutation_response

  """
  insert a single row into the table: "mariokart8deluxe_consoles"
  """
  insert_mariokart8deluxe_consoles_one(
    """the row to be inserted"""
    object: mariokart8deluxe_consoles_insert_input!

    """upsert condition"""
    on_conflict: mariokart8deluxe_consoles_on_conflict
  ): mariokart8deluxe_consoles

  """
  insert data into the table: "mariokart8deluxe_courses"
  """
  insert_mariokart8deluxe_courses(
    """the rows to be inserted"""
    objects: [mariokart8deluxe_courses_insert_input!]!

    """upsert condition"""
    on_conflict: mariokart8deluxe_courses_on_conflict
  ): mariokart8deluxe_courses_mutation_response

  """
  insert a single row into the table: "mariokart8deluxe_courses"
  """
  insert_mariokart8deluxe_courses_one(
    """the row to be inserted"""
    object: mariokart8deluxe_courses_insert_input!

    """upsert condition"""
    on_conflict: mariokart8deluxe_courses_on_conflict
  ): mariokart8deluxe_courses

  """
  insert data into the table: "mariokart8deluxe_cups"
  """
  insert_mariokart8deluxe_cups(
    """the rows to be inserted"""
    objects: [mariokart8deluxe_cups_insert_input!]!

    """upsert condition"""
    on_conflict: mariokart8deluxe_cups_on_conflict
  ): mariokart8deluxe_cups_mutation_response

  """
  insert a single row into the table: "mariokart8deluxe_cups"
  """
  insert_mariokart8deluxe_cups_one(
    """the row to be inserted"""
    object: mariokart8deluxe_cups_insert_input!

    """upsert condition"""
    on_conflict: mariokart8deluxe_cups_on_conflict
  ): mariokart8deluxe_cups

  """
  insert data into the table: "mariokart8deluxe_race_players"
  """
  insert_mariokart8deluxe_race_players(
    """the rows to be inserted"""
    objects: [mariokart8deluxe_race_players_insert_input!]!

    """upsert condition"""
    on_conflict: mariokart8deluxe_race_players_on_conflict
  ): mariokart8deluxe_race_players_mutation_response

  """
  insert a single row into the table: "mariokart8deluxe_race_players"
  """
  insert_mariokart8deluxe_race_players_one(
    """the row to be inserted"""
    object: mariokart8deluxe_race_players_insert_input!

    """upsert condition"""
    on_conflict: mariokart8deluxe_race_players_on_conflict
  ): mariokart8deluxe_race_players

  """
  insert data into the table: "mariokart8deluxe_race_rules"
  """
  insert_mariokart8deluxe_race_rules(
    """the rows to be inserted"""
    objects: [mariokart8deluxe_race_rules_insert_input!]!

    """upsert condition"""
    on_conflict: mariokart8deluxe_race_rules_on_conflict
  ): mariokart8deluxe_race_rules_mutation_response

  """
  insert a single row into the table: "mariokart8deluxe_race_rules"
  """
  insert_mariokart8deluxe_race_rules_one(
    """the row to be inserted"""
    object: mariokart8deluxe_race_rules_insert_input!

    """upsert condition"""
    on_conflict: mariokart8deluxe_race_rules_on_conflict
  ): mariokart8deluxe_race_rules

  """
  insert data into the table: "mariokart8deluxe_races"
  """
  insert_mariokart8deluxe_races(
    """the rows to be inserted"""
    objects: [mariokart8deluxe_races_insert_input!]!

    """upsert condition"""
    on_conflict: mariokart8deluxe_races_on_conflict
  ): mariokart8deluxe_races_mutation_response

  """
  insert a single row into the table: "mariokart8deluxe_races"
  """
  insert_mariokart8deluxe_races_one(
    """the row to be inserted"""
    object: mariokart8deluxe_races_insert_input!

    """upsert condition"""
    on_conflict: mariokart8deluxe_races_on_conflict
  ): mariokart8deluxe_races

  """
  insert data into the table: "niconico_accounts"
  """
  insert_niconico_accounts(
    """the rows to be inserted"""
    objects: [niconico_accounts_insert_input!]!

    """upsert condition"""
    on_conflict: niconico_accounts_on_conflict
  ): niconico_accounts_mutation_response

  """
  insert a single row into the table: "niconico_accounts"
  """
  insert_niconico_accounts_one(
    """the row to be inserted"""
    object: niconico_accounts_insert_input!

    """upsert condition"""
    on_conflict: niconico_accounts_on_conflict
  ): niconico_accounts

  """
  insert data into the table: "niconico_channels"
  """
  insert_niconico_channels(
    """the rows to be inserted"""
    objects: [niconico_channels_insert_input!]!

    """upsert condition"""
    on_conflict: niconico_channels_on_conflict
  ): niconico_channels_mutation_response

  """
  insert a single row into the table: "niconico_channels"
  """
  insert_niconico_channels_one(
    """the row to be inserted"""
    object: niconico_channels_insert_input!

    """upsert condition"""
    on_conflict: niconico_channels_on_conflict
  ): niconico_channels

  """
  insert data into the table: "niconico_communities"
  """
  insert_niconico_communities(
    """the rows to be inserted"""
    objects: [niconico_communities_insert_input!]!

    """upsert condition"""
    on_conflict: niconico_communities_on_conflict
  ): niconico_communities_mutation_response

  """
  insert a single row into the table: "niconico_communities"
  """
  insert_niconico_communities_one(
    """the row to be inserted"""
    object: niconico_communities_insert_input!

    """upsert condition"""
    on_conflict: niconico_communities_on_conflict
  ): niconico_communities

  """
  insert data into the table: "niconico_plus_channels"
  """
  insert_niconico_plus_channels(
    """the rows to be inserted"""
    objects: [niconico_plus_channels_insert_input!]!

    """upsert condition"""
    on_conflict: niconico_plus_channels_on_conflict
  ): niconico_plus_channels_mutation_response

  """
  insert a single row into the table: "niconico_plus_channels"
  """
  insert_niconico_plus_channels_one(
    """the row to be inserted"""
    object: niconico_plus_channels_insert_input!

    """upsert condition"""
    on_conflict: niconico_plus_channels_on_conflict
  ): niconico_plus_channels

  """
  insert data into the table: "niconico_videos"
  """
  insert_niconico_videos(
    """the rows to be inserted"""
    objects: [niconico_videos_insert_input!]!

    """upsert condition"""
    on_conflict: niconico_videos_on_conflict
  ): niconico_videos_mutation_response

  """
  insert a single row into the table: "niconico_videos"
  """
  insert_niconico_videos_one(
    """the row to be inserted"""
    object: niconico_videos_insert_input!

    """upsert condition"""
    on_conflict: niconico_videos_on_conflict
  ): niconico_videos

  """
  insert data into the table: "person_fediverse_accounts"
  """
  insert_person_fediverse_accounts(
    """the rows to be inserted"""
    objects: [person_fediverse_accounts_insert_input!]!

    """upsert condition"""
    on_conflict: person_fediverse_accounts_on_conflict
  ): person_fediverse_accounts_mutation_response

  """
  insert a single row into the table: "person_fediverse_accounts"
  """
  insert_person_fediverse_accounts_one(
    """the row to be inserted"""
    object: person_fediverse_accounts_insert_input!

    """upsert condition"""
    on_conflict: person_fediverse_accounts_on_conflict
  ): person_fediverse_accounts

  """
  insert data into the table: "person_niconico_accounts"
  """
  insert_person_niconico_accounts(
    """the rows to be inserted"""
    objects: [person_niconico_accounts_insert_input!]!

    """upsert condition"""
    on_conflict: person_niconico_accounts_on_conflict
  ): person_niconico_accounts_mutation_response

  """
  insert a single row into the table: "person_niconico_accounts"
  """
  insert_person_niconico_accounts_one(
    """the row to be inserted"""
    object: person_niconico_accounts_insert_input!

    """upsert condition"""
    on_conflict: person_niconico_accounts_on_conflict
  ): person_niconico_accounts

  """
  insert data into the table: "person_niconico_channels"
  """
  insert_person_niconico_channels(
    """the rows to be inserted"""
    objects: [person_niconico_channels_insert_input!]!

    """upsert condition"""
    on_conflict: person_niconico_channels_on_conflict
  ): person_niconico_channels_mutation_response

  """
  insert a single row into the table: "person_niconico_channels"
  """
  insert_person_niconico_channels_one(
    """the row to be inserted"""
    object: person_niconico_channels_insert_input!

    """upsert condition"""
    on_conflict: person_niconico_channels_on_conflict
  ): person_niconico_channels

  """
  insert data into the table: "person_niconico_communities"
  """
  insert_person_niconico_communities(
    """the rows to be inserted"""
    objects: [person_niconico_communities_insert_input!]!

    """upsert condition"""
    on_conflict: person_niconico_communities_on_conflict
  ): person_niconico_communities_mutation_response

  """
  insert a single row into the table: "person_niconico_communities"
  """
  insert_person_niconico_communities_one(
    """the row to be inserted"""
    object: person_niconico_communities_insert_input!

    """upsert condition"""
    on_conflict: person_niconico_communities_on_conflict
  ): person_niconico_communities

  """
  insert data into the table: "person_niconico_plus_channels"
  """
  insert_person_niconico_plus_channels(
    """the rows to be inserted"""
    objects: [person_niconico_plus_channels_insert_input!]!

    """upsert condition"""
    on_conflict: person_niconico_plus_channels_on_conflict
  ): person_niconico_plus_channels_mutation_response

  """
  insert a single row into the table: "person_niconico_plus_channels"
  """
  insert_person_niconico_plus_channels_one(
    """the row to be inserted"""
    object: person_niconico_plus_channels_insert_input!

    """upsert condition"""
    on_conflict: person_niconico_plus_channels_on_conflict
  ): person_niconico_plus_channels

  """
  insert data into the table: "person_twitter_accounts"
  """
  insert_person_twitter_accounts(
    """the rows to be inserted"""
    objects: [person_twitter_accounts_insert_input!]!

    """upsert condition"""
    on_conflict: person_twitter_accounts_on_conflict
  ): person_twitter_accounts_mutation_response

  """
  insert a single row into the table: "person_twitter_accounts"
  """
  insert_person_twitter_accounts_one(
    """the row to be inserted"""
    object: person_twitter_accounts_insert_input!

    """upsert condition"""
    on_conflict: person_twitter_accounts_on_conflict
  ): person_twitter_accounts

  """
  insert data into the table: "person_youtube_channels"
  """
  insert_person_youtube_channels(
    """the rows to be inserted"""
    objects: [person_youtube_channels_insert_input!]!

    """upsert condition"""
    on_conflict: person_youtube_channels_on_conflict
  ): person_youtube_channels_mutation_response

  """
  insert a single row into the table: "person_youtube_channels"
  """
  insert_person_youtube_channels_one(
    """the row to be inserted"""
    object: person_youtube_channels_insert_input!

    """upsert condition"""
    on_conflict: person_youtube_channels_on_conflict
  ): person_youtube_channels

  """
  insert data into the table: "persons"
  """
  insert_persons(
    """the rows to be inserted"""
    objects: [persons_insert_input!]!

    """upsert condition"""
    on_conflict: persons_on_conflict
  ): persons_mutation_response

  """
  insert a single row into the table: "persons"
  """
  insert_persons_one(
    """the row to be inserted"""
    object: persons_insert_input!

    """upsert condition"""
    on_conflict: persons_on_conflict
  ): persons

  """
  insert data into the table: "program_amongus_maps"
  """
  insert_program_amongus_maps(
    """the rows to be inserted"""
    objects: [program_amongus_maps_insert_input!]!

    """upsert condition"""
    on_conflict: program_amongus_maps_on_conflict
  ): program_amongus_maps_mutation_response

  """
  insert a single row into the table: "program_amongus_maps"
  """
  insert_program_amongus_maps_one(
    """the row to be inserted"""
    object: program_amongus_maps_insert_input!

    """upsert condition"""
    on_conflict: program_amongus_maps_on_conflict
  ): program_amongus_maps

  """
  insert data into the table: "program_amongus_mods"
  """
  insert_program_amongus_mods(
    """the rows to be inserted"""
    objects: [program_amongus_mods_insert_input!]!

    """upsert condition"""
    on_conflict: program_amongus_mods_on_conflict
  ): program_amongus_mods_mutation_response

  """
  insert a single row into the table: "program_amongus_mods"
  """
  insert_program_amongus_mods_one(
    """the row to be inserted"""
    object: program_amongus_mods_insert_input!

    """upsert condition"""
    on_conflict: program_amongus_mods_on_conflict
  ): program_amongus_mods

  """
  insert data into the table: "program_amongus_vanilla_versions"
  """
  insert_program_amongus_vanilla_versions(
    """the rows to be inserted"""
    objects: [program_amongus_vanilla_versions_insert_input!]!

    """upsert condition"""
    on_conflict: program_amongus_vanilla_versions_on_conflict
  ): program_amongus_vanilla_versions_mutation_response

  """
  insert a single row into the table: "program_amongus_vanilla_versions"
  """
  insert_program_amongus_vanilla_versions_one(
    """the row to be inserted"""
    object: program_amongus_vanilla_versions_insert_input!

    """upsert condition"""
    on_conflict: program_amongus_vanilla_versions_on_conflict
  ): program_amongus_vanilla_versions

  """
  insert data into the table: "program_live_archives"
  """
  insert_program_live_archives(
    """the rows to be inserted"""
    objects: [program_live_archives_insert_input!]!

    """upsert condition"""
    on_conflict: program_live_archives_on_conflict
  ): program_live_archives_mutation_response

  """
  insert a single row into the table: "program_live_archives"
  """
  insert_program_live_archives_one(
    """the row to be inserted"""
    object: program_live_archives_insert_input!

    """upsert condition"""
    on_conflict: program_live_archives_on_conflict
  ): program_live_archives

  """
  insert data into the table: "program_niconico_videos"
  """
  insert_program_niconico_videos(
    """the rows to be inserted"""
    objects: [program_niconico_videos_insert_input!]!

    """upsert condition"""
    on_conflict: program_niconico_videos_on_conflict
  ): program_niconico_videos_mutation_response

  """
  insert a single row into the table: "program_niconico_videos"
  """
  insert_program_niconico_videos_one(
    """the row to be inserted"""
    object: program_niconico_videos_insert_input!

    """upsert condition"""
    on_conflict: program_niconico_videos_on_conflict
  ): program_niconico_videos

  """
  insert data into the table: "program_persons"
  """
  insert_program_persons(
    """the rows to be inserted"""
    objects: [program_persons_insert_input!]!

    """upsert condition"""
    on_conflict: program_persons_on_conflict
  ): program_persons_mutation_response

  """
  insert a single row into the table: "program_persons"
  """
  insert_program_persons_one(
    """the row to be inserted"""
    object: program_persons_insert_input!

    """upsert condition"""
    on_conflict: program_persons_on_conflict
  ): program_persons

  """
  insert data into the table: "program_projects"
  """
  insert_program_projects(
    """the rows to be inserted"""
    objects: [program_projects_insert_input!]!

    """upsert condition"""
    on_conflict: program_projects_on_conflict
  ): program_projects_mutation_response

  """
  insert a single row into the table: "program_projects"
  """
  insert_program_projects_one(
    """the row to be inserted"""
    object: program_projects_insert_input!

    """upsert condition"""
    on_conflict: program_projects_on_conflict
  ): program_projects

  """
  insert data into the table: "program_twitter_announcements"
  """
  insert_program_twitter_announcements(
    """the rows to be inserted"""
    objects: [program_twitter_announcements_insert_input!]!

    """upsert condition"""
    on_conflict: program_twitter_announcements_on_conflict
  ): program_twitter_announcements_mutation_response

  """
  insert a single row into the table: "program_twitter_announcements"
  """
  insert_program_twitter_announcements_one(
    """the row to be inserted"""
    object: program_twitter_announcements_insert_input!

    """upsert condition"""
    on_conflict: program_twitter_announcements_on_conflict
  ): program_twitter_announcements

  """
  insert data into the table: "programs"
  """
  insert_programs(
    """the rows to be inserted"""
    objects: [programs_insert_input!]!

    """upsert condition"""
    on_conflict: programs_on_conflict
  ): programs_mutation_response

  """
  insert a single row into the table: "programs"
  """
  insert_programs_one(
    """the row to be inserted"""
    object: programs_insert_input!

    """upsert condition"""
    on_conflict: programs_on_conflict
  ): programs

  """
  insert data into the table: "project_niconico_videos"
  """
  insert_project_niconico_videos(
    """the rows to be inserted"""
    objects: [project_niconico_videos_insert_input!]!

    """upsert condition"""
    on_conflict: project_niconico_videos_on_conflict
  ): project_niconico_videos_mutation_response

  """
  insert a single row into the table: "project_niconico_videos"
  """
  insert_project_niconico_videos_one(
    """the row to be inserted"""
    object: project_niconico_videos_insert_input!

    """upsert condition"""
    on_conflict: project_niconico_videos_on_conflict
  ): project_niconico_videos

  """
  insert data into the table: "projects"
  """
  insert_projects(
    """the rows to be inserted"""
    objects: [projects_insert_input!]!

    """upsert condition"""
    on_conflict: projects_on_conflict
  ): projects_mutation_response

  """
  insert a single row into the table: "projects"
  """
  insert_projects_one(
    """the row to be inserted"""
    object: projects_insert_input!

    """upsert condition"""
    on_conflict: projects_on_conflict
  ): projects

  """
  insert data into the table: "twitter_accounts"
  """
  insert_twitter_accounts(
    """the rows to be inserted"""
    objects: [twitter_accounts_insert_input!]!

    """upsert condition"""
    on_conflict: twitter_accounts_on_conflict
  ): twitter_accounts_mutation_response

  """
  insert a single row into the table: "twitter_accounts"
  """
  insert_twitter_accounts_one(
    """the row to be inserted"""
    object: twitter_accounts_insert_input!

    """upsert condition"""
    on_conflict: twitter_accounts_on_conflict
  ): twitter_accounts

  """
  insert data into the table: "twitter_tweet_images"
  """
  insert_twitter_tweet_images(
    """the rows to be inserted"""
    objects: [twitter_tweet_images_insert_input!]!

    """upsert condition"""
    on_conflict: twitter_tweet_images_on_conflict
  ): twitter_tweet_images_mutation_response

  """
  insert a single row into the table: "twitter_tweet_images"
  """
  insert_twitter_tweet_images_one(
    """the row to be inserted"""
    object: twitter_tweet_images_insert_input!

    """upsert condition"""
    on_conflict: twitter_tweet_images_on_conflict
  ): twitter_tweet_images

  """
  insert data into the table: "twitter_tweets"
  """
  insert_twitter_tweets(
    """the rows to be inserted"""
    objects: [twitter_tweets_insert_input!]!

    """upsert condition"""
    on_conflict: twitter_tweets_on_conflict
  ): twitter_tweets_mutation_response

  """
  insert a single row into the table: "twitter_tweets"
  """
  insert_twitter_tweets_one(
    """the row to be inserted"""
    object: twitter_tweets_insert_input!

    """upsert condition"""
    on_conflict: twitter_tweets_on_conflict
  ): twitter_tweets

  """
  insert data into the table: "youtube_channels"
  """
  insert_youtube_channels(
    """the rows to be inserted"""
    objects: [youtube_channels_insert_input!]!

    """upsert condition"""
    on_conflict: youtube_channels_on_conflict
  ): youtube_channels_mutation_response

  """
  insert a single row into the table: "youtube_channels"
  """
  insert_youtube_channels_one(
    """the row to be inserted"""
    object: youtube_channels_insert_input!

    """upsert condition"""
    on_conflict: youtube_channels_on_conflict
  ): youtube_channels

  """
  insert data into the table: "youtube_lives"
  """
  insert_youtube_lives(
    """the rows to be inserted"""
    objects: [youtube_lives_insert_input!]!

    """upsert condition"""
    on_conflict: youtube_lives_on_conflict
  ): youtube_lives_mutation_response

  """
  insert a single row into the table: "youtube_lives"
  """
  insert_youtube_lives_one(
    """the row to be inserted"""
    object: youtube_lives_insert_input!

    """upsert condition"""
    on_conflict: youtube_lives_on_conflict
  ): youtube_lives

  """
  insert data into the table: "youtube_videos"
  """
  insert_youtube_videos(
    """the rows to be inserted"""
    objects: [youtube_videos_insert_input!]!

    """upsert condition"""
    on_conflict: youtube_videos_on_conflict
  ): youtube_videos_mutation_response

  """
  insert a single row into the table: "youtube_videos"
  """
  insert_youtube_videos_one(
    """the row to be inserted"""
    object: youtube_videos_insert_input!

    """upsert condition"""
    on_conflict: youtube_videos_on_conflict
  ): youtube_videos

  """
  update data of the table: "amongus_maps"
  """
  update_amongus_maps(
    """sets the columns of the filtered rows to the given values"""
    _set: amongus_maps_set_input

    """filter the rows which have to be updated"""
    where: amongus_maps_bool_exp!
  ): amongus_maps_mutation_response

  """
  update single row of the table: "amongus_maps"
  """
  update_amongus_maps_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: amongus_maps_set_input
    pk_columns: amongus_maps_pk_columns_input!
  ): amongus_maps

  """
  update multiples rows of table: "amongus_maps"
  """
  update_amongus_maps_many(
    """updates to execute, in order"""
    updates: [amongus_maps_updates!]!
  ): [amongus_maps_mutation_response]

  """
  update data of the table: "amongus_match_mods"
  """
  update_amongus_match_mods(
    """sets the columns of the filtered rows to the given values"""
    _set: amongus_match_mods_set_input

    """filter the rows which have to be updated"""
    where: amongus_match_mods_bool_exp!
  ): amongus_match_mods_mutation_response

  """
  update single row of the table: "amongus_match_mods"
  """
  update_amongus_match_mods_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: amongus_match_mods_set_input
    pk_columns: amongus_match_mods_pk_columns_input!
  ): amongus_match_mods

  """
  update multiples rows of table: "amongus_match_mods"
  """
  update_amongus_match_mods_many(
    """updates to execute, in order"""
    updates: [amongus_match_mods_updates!]!
  ): [amongus_match_mods_mutation_response]

  """
  update data of the table: "amongus_match_player_result_roles"
  """
  update_amongus_match_player_result_roles(
    """increments the numeric columns with given value of the filtered values"""
    _inc: amongus_match_player_result_roles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: amongus_match_player_result_roles_set_input

    """filter the rows which have to be updated"""
    where: amongus_match_player_result_roles_bool_exp!
  ): amongus_match_player_result_roles_mutation_response

  """
  update single row of the table: "amongus_match_player_result_roles"
  """
  update_amongus_match_player_result_roles_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: amongus_match_player_result_roles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: amongus_match_player_result_roles_set_input
    pk_columns: amongus_match_player_result_roles_pk_columns_input!
  ): amongus_match_player_result_roles

  """
  update multiples rows of table: "amongus_match_player_result_roles"
  """
  update_amongus_match_player_result_roles_many(
    """updates to execute, in order"""
    updates: [amongus_match_player_result_roles_updates!]!
  ): [amongus_match_player_result_roles_mutation_response]

  """
  update data of the table: "amongus_match_players"
  """
  update_amongus_match_players(
    """sets the columns of the filtered rows to the given values"""
    _set: amongus_match_players_set_input

    """filter the rows which have to be updated"""
    where: amongus_match_players_bool_exp!
  ): amongus_match_players_mutation_response

  """
  update single row of the table: "amongus_match_players"
  """
  update_amongus_match_players_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: amongus_match_players_set_input
    pk_columns: amongus_match_players_pk_columns_input!
  ): amongus_match_players

  """
  update multiples rows of table: "amongus_match_players"
  """
  update_amongus_match_players_many(
    """updates to execute, in order"""
    updates: [amongus_match_players_updates!]!
  ): [amongus_match_players_mutation_response]

  """
  update data of the table: "amongus_matches"
  """
  update_amongus_matches(
    """increments the numeric columns with given value of the filtered values"""
    _inc: amongus_matches_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: amongus_matches_set_input

    """filter the rows which have to be updated"""
    where: amongus_matches_bool_exp!
  ): amongus_matches_mutation_response

  """
  update single row of the table: "amongus_matches"
  """
  update_amongus_matches_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: amongus_matches_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: amongus_matches_set_input
    pk_columns: amongus_matches_pk_columns_input!
  ): amongus_matches

  """
  update multiples rows of table: "amongus_matches"
  """
  update_amongus_matches_many(
    """updates to execute, in order"""
    updates: [amongus_matches_updates!]!
  ): [amongus_matches_mutation_response]

  """
  update data of the table: "amongus_mod_versions"
  """
  update_amongus_mod_versions(
    """sets the columns of the filtered rows to the given values"""
    _set: amongus_mod_versions_set_input

    """filter the rows which have to be updated"""
    where: amongus_mod_versions_bool_exp!
  ): amongus_mod_versions_mutation_response

  """
  update single row of the table: "amongus_mod_versions"
  """
  update_amongus_mod_versions_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: amongus_mod_versions_set_input
    pk_columns: amongus_mod_versions_pk_columns_input!
  ): amongus_mod_versions

  """
  update multiples rows of table: "amongus_mod_versions"
  """
  update_amongus_mod_versions_many(
    """updates to execute, in order"""
    updates: [amongus_mod_versions_updates!]!
  ): [amongus_mod_versions_mutation_response]

  """
  update data of the table: "amongus_mods"
  """
  update_amongus_mods(
    """sets the columns of the filtered rows to the given values"""
    _set: amongus_mods_set_input

    """filter the rows which have to be updated"""
    where: amongus_mods_bool_exp!
  ): amongus_mods_mutation_response

  """
  update single row of the table: "amongus_mods"
  """
  update_amongus_mods_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: amongus_mods_set_input
    pk_columns: amongus_mods_pk_columns_input!
  ): amongus_mods

  """
  update multiples rows of table: "amongus_mods"
  """
  update_amongus_mods_many(
    """updates to execute, in order"""
    updates: [amongus_mods_updates!]!
  ): [amongus_mods_mutation_response]

  """
  update data of the table: "amongus_roles"
  """
  update_amongus_roles(
    """increments the numeric columns with given value of the filtered values"""
    _inc: amongus_roles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: amongus_roles_set_input

    """filter the rows which have to be updated"""
    where: amongus_roles_bool_exp!
  ): amongus_roles_mutation_response

  """
  update single row of the table: "amongus_roles"
  """
  update_amongus_roles_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: amongus_roles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: amongus_roles_set_input
    pk_columns: amongus_roles_pk_columns_input!
  ): amongus_roles

  """
  update multiples rows of table: "amongus_roles"
  """
  update_amongus_roles_many(
    """updates to execute, in order"""
    updates: [amongus_roles_updates!]!
  ): [amongus_roles_mutation_response]

  """
  update data of the table: "amongus_vanilla_versions"
  """
  update_amongus_vanilla_versions(
    """sets the columns of the filtered rows to the given values"""
    _set: amongus_vanilla_versions_set_input

    """filter the rows which have to be updated"""
    where: amongus_vanilla_versions_bool_exp!
  ): amongus_vanilla_versions_mutation_response

  """
  update single row of the table: "amongus_vanilla_versions"
  """
  update_amongus_vanilla_versions_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: amongus_vanilla_versions_set_input
    pk_columns: amongus_vanilla_versions_pk_columns_input!
  ): amongus_vanilla_versions

  """
  update multiples rows of table: "amongus_vanilla_versions"
  """
  update_amongus_vanilla_versions_many(
    """updates to execute, in order"""
    updates: [amongus_vanilla_versions_updates!]!
  ): [amongus_vanilla_versions_mutation_response]

  """
  update data of the table: "amongusvr_maps"
  """
  update_amongusvr_maps(
    """sets the columns of the filtered rows to the given values"""
    _set: amongusvr_maps_set_input

    """filter the rows which have to be updated"""
    where: amongusvr_maps_bool_exp!
  ): amongusvr_maps_mutation_response

  """
  update single row of the table: "amongusvr_maps"
  """
  update_amongusvr_maps_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: amongusvr_maps_set_input
    pk_columns: amongusvr_maps_pk_columns_input!
  ): amongusvr_maps

  """
  update multiples rows of table: "amongusvr_maps"
  """
  update_amongusvr_maps_many(
    """updates to execute, in order"""
    updates: [amongusvr_maps_updates!]!
  ): [amongusvr_maps_mutation_response]

  """
  update data of the table: "amongusvr_match_players"
  """
  update_amongusvr_match_players(
    """sets the columns of the filtered rows to the given values"""
    _set: amongusvr_match_players_set_input

    """filter the rows which have to be updated"""
    where: amongusvr_match_players_bool_exp!
  ): amongusvr_match_players_mutation_response

  """
  update single row of the table: "amongusvr_match_players"
  """
  update_amongusvr_match_players_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: amongusvr_match_players_set_input
    pk_columns: amongusvr_match_players_pk_columns_input!
  ): amongusvr_match_players

  """
  update multiples rows of table: "amongusvr_match_players"
  """
  update_amongusvr_match_players_many(
    """updates to execute, in order"""
    updates: [amongusvr_match_players_updates!]!
  ): [amongusvr_match_players_mutation_response]

  """
  update data of the table: "amongusvr_matches"
  """
  update_amongusvr_matches(
    """increments the numeric columns with given value of the filtered values"""
    _inc: amongusvr_matches_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: amongusvr_matches_set_input

    """filter the rows which have to be updated"""
    where: amongusvr_matches_bool_exp!
  ): amongusvr_matches_mutation_response

  """
  update single row of the table: "amongusvr_matches"
  """
  update_amongusvr_matches_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: amongusvr_matches_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: amongusvr_matches_set_input
    pk_columns: amongusvr_matches_pk_columns_input!
  ): amongusvr_matches

  """
  update multiples rows of table: "amongusvr_matches"
  """
  update_amongusvr_matches_many(
    """updates to execute, in order"""
    updates: [amongusvr_matches_updates!]!
  ): [amongusvr_matches_mutation_response]

  """
  update data of the table: "fallguys_custom_round_twitter_announcements"
  """
  update_fallguys_custom_round_twitter_announcements(
    """sets the columns of the filtered rows to the given values"""
    _set: fallguys_custom_round_twitter_announcements_set_input

    """filter the rows which have to be updated"""
    where: fallguys_custom_round_twitter_announcements_bool_exp!
  ): fallguys_custom_round_twitter_announcements_mutation_response

  """
  update single row of the table: "fallguys_custom_round_twitter_announcements"
  """
  update_fallguys_custom_round_twitter_announcements_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: fallguys_custom_round_twitter_announcements_set_input
    pk_columns: fallguys_custom_round_twitter_announcements_pk_columns_input!
  ): fallguys_custom_round_twitter_announcements

  """
  update multiples rows of table: "fallguys_custom_round_twitter_announcements"
  """
  update_fallguys_custom_round_twitter_announcements_many(
    """updates to execute, in order"""
    updates: [fallguys_custom_round_twitter_announcements_updates!]!
  ): [fallguys_custom_round_twitter_announcements_mutation_response]

  """
  update data of the table: "fallguys_custom_rounds"
  """
  update_fallguys_custom_rounds(
    """sets the columns of the filtered rows to the given values"""
    _set: fallguys_custom_rounds_set_input

    """filter the rows which have to be updated"""
    where: fallguys_custom_rounds_bool_exp!
  ): fallguys_custom_rounds_mutation_response

  """
  update single row of the table: "fallguys_custom_rounds"
  """
  update_fallguys_custom_rounds_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: fallguys_custom_rounds_set_input
    pk_columns: fallguys_custom_rounds_pk_columns_input!
  ): fallguys_custom_rounds

  """
  update multiples rows of table: "fallguys_custom_rounds"
  """
  update_fallguys_custom_rounds_many(
    """updates to execute, in order"""
    updates: [fallguys_custom_rounds_updates!]!
  ): [fallguys_custom_rounds_mutation_response]

  """
  update data of the table: "fallguys_match_rounds"
  """
  update_fallguys_match_rounds(
    """increments the numeric columns with given value of the filtered values"""
    _inc: fallguys_match_rounds_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: fallguys_match_rounds_set_input

    """filter the rows which have to be updated"""
    where: fallguys_match_rounds_bool_exp!
  ): fallguys_match_rounds_mutation_response

  """
  update single row of the table: "fallguys_match_rounds"
  """
  update_fallguys_match_rounds_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: fallguys_match_rounds_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: fallguys_match_rounds_set_input
    pk_columns: fallguys_match_rounds_pk_columns_input!
  ): fallguys_match_rounds

  """
  update multiples rows of table: "fallguys_match_rounds"
  """
  update_fallguys_match_rounds_many(
    """updates to execute, in order"""
    updates: [fallguys_match_rounds_updates!]!
  ): [fallguys_match_rounds_mutation_response]

  """
  update data of the table: "fallguys_matches"
  """
  update_fallguys_matches(
    """increments the numeric columns with given value of the filtered values"""
    _inc: fallguys_matches_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: fallguys_matches_set_input

    """filter the rows which have to be updated"""
    where: fallguys_matches_bool_exp!
  ): fallguys_matches_mutation_response

  """
  update single row of the table: "fallguys_matches"
  """
  update_fallguys_matches_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: fallguys_matches_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: fallguys_matches_set_input
    pk_columns: fallguys_matches_pk_columns_input!
  ): fallguys_matches

  """
  update multiples rows of table: "fallguys_matches"
  """
  update_fallguys_matches_many(
    """updates to execute, in order"""
    updates: [fallguys_matches_updates!]!
  ): [fallguys_matches_mutation_response]

  """
  update data of the table: "fallguys_rounds"
  """
  update_fallguys_rounds(
    """sets the columns of the filtered rows to the given values"""
    _set: fallguys_rounds_set_input

    """filter the rows which have to be updated"""
    where: fallguys_rounds_bool_exp!
  ): fallguys_rounds_mutation_response

  """
  update single row of the table: "fallguys_rounds"
  """
  update_fallguys_rounds_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: fallguys_rounds_set_input
    pk_columns: fallguys_rounds_pk_columns_input!
  ): fallguys_rounds

  """
  update multiples rows of table: "fallguys_rounds"
  """
  update_fallguys_rounds_many(
    """updates to execute, in order"""
    updates: [fallguys_rounds_updates!]!
  ): [fallguys_rounds_mutation_response]

  """
  update data of the table: "fediverse_accounts"
  """
  update_fediverse_accounts(
    """sets the columns of the filtered rows to the given values"""
    _set: fediverse_accounts_set_input

    """filter the rows which have to be updated"""
    where: fediverse_accounts_bool_exp!
  ): fediverse_accounts_mutation_response

  """
  update single row of the table: "fediverse_accounts"
  """
  update_fediverse_accounts_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: fediverse_accounts_set_input
    pk_columns: fediverse_accounts_pk_columns_input!
  ): fediverse_accounts

  """
  update multiples rows of table: "fediverse_accounts"
  """
  update_fediverse_accounts_many(
    """updates to execute, in order"""
    updates: [fediverse_accounts_updates!]!
  ): [fediverse_accounts_mutation_response]

  """
  update data of the table: "games"
  """
  update_games(
    """sets the columns of the filtered rows to the given values"""
    _set: games_set_input

    """filter the rows which have to be updated"""
    where: games_bool_exp!
  ): games_mutation_response

  """
  update single row of the table: "games"
  """
  update_games_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: games_set_input
    pk_columns: games_pk_columns_input!
  ): games

  """
  update multiples rows of table: "games"
  """
  update_games_many(
    """updates to execute, in order"""
    updates: [games_updates!]!
  ): [games_mutation_response]

  """
  update data of the table: "mariokart8deluxe_battle_courses"
  """
  update_mariokart8deluxe_battle_courses(
    """increments the numeric columns with given value of the filtered values"""
    _inc: mariokart8deluxe_battle_courses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_battle_courses_set_input

    """filter the rows which have to be updated"""
    where: mariokart8deluxe_battle_courses_bool_exp!
  ): mariokart8deluxe_battle_courses_mutation_response

  """
  update single row of the table: "mariokart8deluxe_battle_courses"
  """
  update_mariokart8deluxe_battle_courses_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: mariokart8deluxe_battle_courses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_battle_courses_set_input
    pk_columns: mariokart8deluxe_battle_courses_pk_columns_input!
  ): mariokart8deluxe_battle_courses

  """
  update multiples rows of table: "mariokart8deluxe_battle_courses"
  """
  update_mariokart8deluxe_battle_courses_many(
    """updates to execute, in order"""
    updates: [mariokart8deluxe_battle_courses_updates!]!
  ): [mariokart8deluxe_battle_courses_mutation_response]

  """
  update data of the table: "mariokart8deluxe_battle_match_players"
  """
  update_mariokart8deluxe_battle_match_players(
    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_battle_match_players_set_input

    """filter the rows which have to be updated"""
    where: mariokart8deluxe_battle_match_players_bool_exp!
  ): mariokart8deluxe_battle_match_players_mutation_response

  """
  update single row of the table: "mariokart8deluxe_battle_match_players"
  """
  update_mariokart8deluxe_battle_match_players_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_battle_match_players_set_input
    pk_columns: mariokart8deluxe_battle_match_players_pk_columns_input!
  ): mariokart8deluxe_battle_match_players

  """
  update multiples rows of table: "mariokart8deluxe_battle_match_players"
  """
  update_mariokart8deluxe_battle_match_players_many(
    """updates to execute, in order"""
    updates: [mariokart8deluxe_battle_match_players_updates!]!
  ): [mariokart8deluxe_battle_match_players_mutation_response]

  """
  update data of the table: "mariokart8deluxe_battle_matches"
  """
  update_mariokart8deluxe_battle_matches(
    """increments the numeric columns with given value of the filtered values"""
    _inc: mariokart8deluxe_battle_matches_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_battle_matches_set_input

    """filter the rows which have to be updated"""
    where: mariokart8deluxe_battle_matches_bool_exp!
  ): mariokart8deluxe_battle_matches_mutation_response

  """
  update single row of the table: "mariokart8deluxe_battle_matches"
  """
  update_mariokart8deluxe_battle_matches_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: mariokart8deluxe_battle_matches_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_battle_matches_set_input
    pk_columns: mariokart8deluxe_battle_matches_pk_columns_input!
  ): mariokart8deluxe_battle_matches

  """
  update multiples rows of table: "mariokart8deluxe_battle_matches"
  """
  update_mariokart8deluxe_battle_matches_many(
    """updates to execute, in order"""
    updates: [mariokart8deluxe_battle_matches_updates!]!
  ): [mariokart8deluxe_battle_matches_mutation_response]

  """
  update data of the table: "mariokart8deluxe_battle_rules"
  """
  update_mariokart8deluxe_battle_rules(
    """increments the numeric columns with given value of the filtered values"""
    _inc: mariokart8deluxe_battle_rules_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_battle_rules_set_input

    """filter the rows which have to be updated"""
    where: mariokart8deluxe_battle_rules_bool_exp!
  ): mariokart8deluxe_battle_rules_mutation_response

  """
  update single row of the table: "mariokart8deluxe_battle_rules"
  """
  update_mariokart8deluxe_battle_rules_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: mariokart8deluxe_battle_rules_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_battle_rules_set_input
    pk_columns: mariokart8deluxe_battle_rules_pk_columns_input!
  ): mariokart8deluxe_battle_rules

  """
  update multiples rows of table: "mariokart8deluxe_battle_rules"
  """
  update_mariokart8deluxe_battle_rules_many(
    """updates to execute, in order"""
    updates: [mariokart8deluxe_battle_rules_updates!]!
  ): [mariokart8deluxe_battle_rules_mutation_response]

  """
  update data of the table: "mariokart8deluxe_consoles"
  """
  update_mariokart8deluxe_consoles(
    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_consoles_set_input

    """filter the rows which have to be updated"""
    where: mariokart8deluxe_consoles_bool_exp!
  ): mariokart8deluxe_consoles_mutation_response

  """
  update single row of the table: "mariokart8deluxe_consoles"
  """
  update_mariokart8deluxe_consoles_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_consoles_set_input
    pk_columns: mariokart8deluxe_consoles_pk_columns_input!
  ): mariokart8deluxe_consoles

  """
  update multiples rows of table: "mariokart8deluxe_consoles"
  """
  update_mariokart8deluxe_consoles_many(
    """updates to execute, in order"""
    updates: [mariokart8deluxe_consoles_updates!]!
  ): [mariokart8deluxe_consoles_mutation_response]

  """
  update data of the table: "mariokart8deluxe_courses"
  """
  update_mariokart8deluxe_courses(
    """increments the numeric columns with given value of the filtered values"""
    _inc: mariokart8deluxe_courses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_courses_set_input

    """filter the rows which have to be updated"""
    where: mariokart8deluxe_courses_bool_exp!
  ): mariokart8deluxe_courses_mutation_response

  """
  update single row of the table: "mariokart8deluxe_courses"
  """
  update_mariokart8deluxe_courses_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: mariokart8deluxe_courses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_courses_set_input
    pk_columns: mariokart8deluxe_courses_pk_columns_input!
  ): mariokart8deluxe_courses

  """
  update multiples rows of table: "mariokart8deluxe_courses"
  """
  update_mariokart8deluxe_courses_many(
    """updates to execute, in order"""
    updates: [mariokart8deluxe_courses_updates!]!
  ): [mariokart8deluxe_courses_mutation_response]

  """
  update data of the table: "mariokart8deluxe_cups"
  """
  update_mariokart8deluxe_cups(
    """increments the numeric columns with given value of the filtered values"""
    _inc: mariokart8deluxe_cups_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_cups_set_input

    """filter the rows which have to be updated"""
    where: mariokart8deluxe_cups_bool_exp!
  ): mariokart8deluxe_cups_mutation_response

  """
  update single row of the table: "mariokart8deluxe_cups"
  """
  update_mariokart8deluxe_cups_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: mariokart8deluxe_cups_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_cups_set_input
    pk_columns: mariokart8deluxe_cups_pk_columns_input!
  ): mariokart8deluxe_cups

  """
  update multiples rows of table: "mariokart8deluxe_cups"
  """
  update_mariokart8deluxe_cups_many(
    """updates to execute, in order"""
    updates: [mariokart8deluxe_cups_updates!]!
  ): [mariokart8deluxe_cups_mutation_response]

  """
  update data of the table: "mariokart8deluxe_race_players"
  """
  update_mariokart8deluxe_race_players(
    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_race_players_set_input

    """filter the rows which have to be updated"""
    where: mariokart8deluxe_race_players_bool_exp!
  ): mariokart8deluxe_race_players_mutation_response

  """
  update single row of the table: "mariokart8deluxe_race_players"
  """
  update_mariokart8deluxe_race_players_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_race_players_set_input
    pk_columns: mariokart8deluxe_race_players_pk_columns_input!
  ): mariokart8deluxe_race_players

  """
  update multiples rows of table: "mariokart8deluxe_race_players"
  """
  update_mariokart8deluxe_race_players_many(
    """updates to execute, in order"""
    updates: [mariokart8deluxe_race_players_updates!]!
  ): [mariokart8deluxe_race_players_mutation_response]

  """
  update data of the table: "mariokart8deluxe_race_rules"
  """
  update_mariokart8deluxe_race_rules(
    """increments the numeric columns with given value of the filtered values"""
    _inc: mariokart8deluxe_race_rules_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_race_rules_set_input

    """filter the rows which have to be updated"""
    where: mariokart8deluxe_race_rules_bool_exp!
  ): mariokart8deluxe_race_rules_mutation_response

  """
  update single row of the table: "mariokart8deluxe_race_rules"
  """
  update_mariokart8deluxe_race_rules_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: mariokart8deluxe_race_rules_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_race_rules_set_input
    pk_columns: mariokart8deluxe_race_rules_pk_columns_input!
  ): mariokart8deluxe_race_rules

  """
  update multiples rows of table: "mariokart8deluxe_race_rules"
  """
  update_mariokart8deluxe_race_rules_many(
    """updates to execute, in order"""
    updates: [mariokart8deluxe_race_rules_updates!]!
  ): [mariokart8deluxe_race_rules_mutation_response]

  """
  update data of the table: "mariokart8deluxe_races"
  """
  update_mariokart8deluxe_races(
    """increments the numeric columns with given value of the filtered values"""
    _inc: mariokart8deluxe_races_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_races_set_input

    """filter the rows which have to be updated"""
    where: mariokart8deluxe_races_bool_exp!
  ): mariokart8deluxe_races_mutation_response

  """
  update single row of the table: "mariokart8deluxe_races"
  """
  update_mariokart8deluxe_races_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: mariokart8deluxe_races_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mariokart8deluxe_races_set_input
    pk_columns: mariokart8deluxe_races_pk_columns_input!
  ): mariokart8deluxe_races

  """
  update multiples rows of table: "mariokart8deluxe_races"
  """
  update_mariokart8deluxe_races_many(
    """updates to execute, in order"""
    updates: [mariokart8deluxe_races_updates!]!
  ): [mariokart8deluxe_races_mutation_response]

  """
  update data of the table: "niconico_accounts"
  """
  update_niconico_accounts(
    """sets the columns of the filtered rows to the given values"""
    _set: niconico_accounts_set_input

    """filter the rows which have to be updated"""
    where: niconico_accounts_bool_exp!
  ): niconico_accounts_mutation_response

  """
  update single row of the table: "niconico_accounts"
  """
  update_niconico_accounts_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: niconico_accounts_set_input
    pk_columns: niconico_accounts_pk_columns_input!
  ): niconico_accounts

  """
  update multiples rows of table: "niconico_accounts"
  """
  update_niconico_accounts_many(
    """updates to execute, in order"""
    updates: [niconico_accounts_updates!]!
  ): [niconico_accounts_mutation_response]

  """
  update data of the table: "niconico_channels"
  """
  update_niconico_channels(
    """sets the columns of the filtered rows to the given values"""
    _set: niconico_channels_set_input

    """filter the rows which have to be updated"""
    where: niconico_channels_bool_exp!
  ): niconico_channels_mutation_response

  """
  update single row of the table: "niconico_channels"
  """
  update_niconico_channels_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: niconico_channels_set_input
    pk_columns: niconico_channels_pk_columns_input!
  ): niconico_channels

  """
  update multiples rows of table: "niconico_channels"
  """
  update_niconico_channels_many(
    """updates to execute, in order"""
    updates: [niconico_channels_updates!]!
  ): [niconico_channels_mutation_response]

  """
  update data of the table: "niconico_communities"
  """
  update_niconico_communities(
    """sets the columns of the filtered rows to the given values"""
    _set: niconico_communities_set_input

    """filter the rows which have to be updated"""
    where: niconico_communities_bool_exp!
  ): niconico_communities_mutation_response

  """
  update single row of the table: "niconico_communities"
  """
  update_niconico_communities_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: niconico_communities_set_input
    pk_columns: niconico_communities_pk_columns_input!
  ): niconico_communities

  """
  update multiples rows of table: "niconico_communities"
  """
  update_niconico_communities_many(
    """updates to execute, in order"""
    updates: [niconico_communities_updates!]!
  ): [niconico_communities_mutation_response]

  """
  update data of the table: "niconico_plus_channels"
  """
  update_niconico_plus_channels(
    """sets the columns of the filtered rows to the given values"""
    _set: niconico_plus_channels_set_input

    """filter the rows which have to be updated"""
    where: niconico_plus_channels_bool_exp!
  ): niconico_plus_channels_mutation_response

  """
  update single row of the table: "niconico_plus_channels"
  """
  update_niconico_plus_channels_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: niconico_plus_channels_set_input
    pk_columns: niconico_plus_channels_pk_columns_input!
  ): niconico_plus_channels

  """
  update multiples rows of table: "niconico_plus_channels"
  """
  update_niconico_plus_channels_many(
    """updates to execute, in order"""
    updates: [niconico_plus_channels_updates!]!
  ): [niconico_plus_channels_mutation_response]

  """
  update data of the table: "niconico_videos"
  """
  update_niconico_videos(
    """sets the columns of the filtered rows to the given values"""
    _set: niconico_videos_set_input

    """filter the rows which have to be updated"""
    where: niconico_videos_bool_exp!
  ): niconico_videos_mutation_response

  """
  update single row of the table: "niconico_videos"
  """
  update_niconico_videos_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: niconico_videos_set_input
    pk_columns: niconico_videos_pk_columns_input!
  ): niconico_videos

  """
  update multiples rows of table: "niconico_videos"
  """
  update_niconico_videos_many(
    """updates to execute, in order"""
    updates: [niconico_videos_updates!]!
  ): [niconico_videos_mutation_response]

  """
  update data of the table: "person_fediverse_accounts"
  """
  update_person_fediverse_accounts(
    """sets the columns of the filtered rows to the given values"""
    _set: person_fediverse_accounts_set_input

    """filter the rows which have to be updated"""
    where: person_fediverse_accounts_bool_exp!
  ): person_fediverse_accounts_mutation_response

  """
  update single row of the table: "person_fediverse_accounts"
  """
  update_person_fediverse_accounts_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: person_fediverse_accounts_set_input
    pk_columns: person_fediverse_accounts_pk_columns_input!
  ): person_fediverse_accounts

  """
  update multiples rows of table: "person_fediverse_accounts"
  """
  update_person_fediverse_accounts_many(
    """updates to execute, in order"""
    updates: [person_fediverse_accounts_updates!]!
  ): [person_fediverse_accounts_mutation_response]

  """
  update data of the table: "person_niconico_accounts"
  """
  update_person_niconico_accounts(
    """sets the columns of the filtered rows to the given values"""
    _set: person_niconico_accounts_set_input

    """filter the rows which have to be updated"""
    where: person_niconico_accounts_bool_exp!
  ): person_niconico_accounts_mutation_response

  """
  update single row of the table: "person_niconico_accounts"
  """
  update_person_niconico_accounts_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: person_niconico_accounts_set_input
    pk_columns: person_niconico_accounts_pk_columns_input!
  ): person_niconico_accounts

  """
  update multiples rows of table: "person_niconico_accounts"
  """
  update_person_niconico_accounts_many(
    """updates to execute, in order"""
    updates: [person_niconico_accounts_updates!]!
  ): [person_niconico_accounts_mutation_response]

  """
  update data of the table: "person_niconico_channels"
  """
  update_person_niconico_channels(
    """sets the columns of the filtered rows to the given values"""
    _set: person_niconico_channels_set_input

    """filter the rows which have to be updated"""
    where: person_niconico_channels_bool_exp!
  ): person_niconico_channels_mutation_response

  """
  update single row of the table: "person_niconico_channels"
  """
  update_person_niconico_channels_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: person_niconico_channels_set_input
    pk_columns: person_niconico_channels_pk_columns_input!
  ): person_niconico_channels

  """
  update multiples rows of table: "person_niconico_channels"
  """
  update_person_niconico_channels_many(
    """updates to execute, in order"""
    updates: [person_niconico_channels_updates!]!
  ): [person_niconico_channels_mutation_response]

  """
  update data of the table: "person_niconico_communities"
  """
  update_person_niconico_communities(
    """sets the columns of the filtered rows to the given values"""
    _set: person_niconico_communities_set_input

    """filter the rows which have to be updated"""
    where: person_niconico_communities_bool_exp!
  ): person_niconico_communities_mutation_response

  """
  update single row of the table: "person_niconico_communities"
  """
  update_person_niconico_communities_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: person_niconico_communities_set_input
    pk_columns: person_niconico_communities_pk_columns_input!
  ): person_niconico_communities

  """
  update multiples rows of table: "person_niconico_communities"
  """
  update_person_niconico_communities_many(
    """updates to execute, in order"""
    updates: [person_niconico_communities_updates!]!
  ): [person_niconico_communities_mutation_response]

  """
  update data of the table: "person_niconico_plus_channels"
  """
  update_person_niconico_plus_channels(
    """sets the columns of the filtered rows to the given values"""
    _set: person_niconico_plus_channels_set_input

    """filter the rows which have to be updated"""
    where: person_niconico_plus_channels_bool_exp!
  ): person_niconico_plus_channels_mutation_response

  """
  update single row of the table: "person_niconico_plus_channels"
  """
  update_person_niconico_plus_channels_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: person_niconico_plus_channels_set_input
    pk_columns: person_niconico_plus_channels_pk_columns_input!
  ): person_niconico_plus_channels

  """
  update multiples rows of table: "person_niconico_plus_channels"
  """
  update_person_niconico_plus_channels_many(
    """updates to execute, in order"""
    updates: [person_niconico_plus_channels_updates!]!
  ): [person_niconico_plus_channels_mutation_response]

  """
  update data of the table: "person_twitter_accounts"
  """
  update_person_twitter_accounts(
    """sets the columns of the filtered rows to the given values"""
    _set: person_twitter_accounts_set_input

    """filter the rows which have to be updated"""
    where: person_twitter_accounts_bool_exp!
  ): person_twitter_accounts_mutation_response

  """
  update single row of the table: "person_twitter_accounts"
  """
  update_person_twitter_accounts_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: person_twitter_accounts_set_input
    pk_columns: person_twitter_accounts_pk_columns_input!
  ): person_twitter_accounts

  """
  update multiples rows of table: "person_twitter_accounts"
  """
  update_person_twitter_accounts_many(
    """updates to execute, in order"""
    updates: [person_twitter_accounts_updates!]!
  ): [person_twitter_accounts_mutation_response]

  """
  update data of the table: "person_youtube_channels"
  """
  update_person_youtube_channels(
    """sets the columns of the filtered rows to the given values"""
    _set: person_youtube_channels_set_input

    """filter the rows which have to be updated"""
    where: person_youtube_channels_bool_exp!
  ): person_youtube_channels_mutation_response

  """
  update single row of the table: "person_youtube_channels"
  """
  update_person_youtube_channels_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: person_youtube_channels_set_input
    pk_columns: person_youtube_channels_pk_columns_input!
  ): person_youtube_channels

  """
  update multiples rows of table: "person_youtube_channels"
  """
  update_person_youtube_channels_many(
    """updates to execute, in order"""
    updates: [person_youtube_channels_updates!]!
  ): [person_youtube_channels_mutation_response]

  """
  update data of the table: "persons"
  """
  update_persons(
    """sets the columns of the filtered rows to the given values"""
    _set: persons_set_input

    """filter the rows which have to be updated"""
    where: persons_bool_exp!
  ): persons_mutation_response

  """
  update single row of the table: "persons"
  """
  update_persons_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: persons_set_input
    pk_columns: persons_pk_columns_input!
  ): persons

  """
  update multiples rows of table: "persons"
  """
  update_persons_many(
    """updates to execute, in order"""
    updates: [persons_updates!]!
  ): [persons_mutation_response]

  """
  update data of the table: "program_amongus_maps"
  """
  update_program_amongus_maps(
    """sets the columns of the filtered rows to the given values"""
    _set: program_amongus_maps_set_input

    """filter the rows which have to be updated"""
    where: program_amongus_maps_bool_exp!
  ): program_amongus_maps_mutation_response

  """
  update single row of the table: "program_amongus_maps"
  """
  update_program_amongus_maps_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: program_amongus_maps_set_input
    pk_columns: program_amongus_maps_pk_columns_input!
  ): program_amongus_maps

  """
  update multiples rows of table: "program_amongus_maps"
  """
  update_program_amongus_maps_many(
    """updates to execute, in order"""
    updates: [program_amongus_maps_updates!]!
  ): [program_amongus_maps_mutation_response]

  """
  update data of the table: "program_amongus_mods"
  """
  update_program_amongus_mods(
    """sets the columns of the filtered rows to the given values"""
    _set: program_amongus_mods_set_input

    """filter the rows which have to be updated"""
    where: program_amongus_mods_bool_exp!
  ): program_amongus_mods_mutation_response

  """
  update single row of the table: "program_amongus_mods"
  """
  update_program_amongus_mods_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: program_amongus_mods_set_input
    pk_columns: program_amongus_mods_pk_columns_input!
  ): program_amongus_mods

  """
  update multiples rows of table: "program_amongus_mods"
  """
  update_program_amongus_mods_many(
    """updates to execute, in order"""
    updates: [program_amongus_mods_updates!]!
  ): [program_amongus_mods_mutation_response]

  """
  update data of the table: "program_amongus_vanilla_versions"
  """
  update_program_amongus_vanilla_versions(
    """sets the columns of the filtered rows to the given values"""
    _set: program_amongus_vanilla_versions_set_input

    """filter the rows which have to be updated"""
    where: program_amongus_vanilla_versions_bool_exp!
  ): program_amongus_vanilla_versions_mutation_response

  """
  update single row of the table: "program_amongus_vanilla_versions"
  """
  update_program_amongus_vanilla_versions_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: program_amongus_vanilla_versions_set_input
    pk_columns: program_amongus_vanilla_versions_pk_columns_input!
  ): program_amongus_vanilla_versions

  """
  update multiples rows of table: "program_amongus_vanilla_versions"
  """
  update_program_amongus_vanilla_versions_many(
    """updates to execute, in order"""
    updates: [program_amongus_vanilla_versions_updates!]!
  ): [program_amongus_vanilla_versions_mutation_response]

  """
  update data of the table: "program_live_archives"
  """
  update_program_live_archives(
    """sets the columns of the filtered rows to the given values"""
    _set: program_live_archives_set_input

    """filter the rows which have to be updated"""
    where: program_live_archives_bool_exp!
  ): program_live_archives_mutation_response

  """
  update single row of the table: "program_live_archives"
  """
  update_program_live_archives_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: program_live_archives_set_input
    pk_columns: program_live_archives_pk_columns_input!
  ): program_live_archives

  """
  update multiples rows of table: "program_live_archives"
  """
  update_program_live_archives_many(
    """updates to execute, in order"""
    updates: [program_live_archives_updates!]!
  ): [program_live_archives_mutation_response]

  """
  update data of the table: "program_niconico_videos"
  """
  update_program_niconico_videos(
    """sets the columns of the filtered rows to the given values"""
    _set: program_niconico_videos_set_input

    """filter the rows which have to be updated"""
    where: program_niconico_videos_bool_exp!
  ): program_niconico_videos_mutation_response

  """
  update single row of the table: "program_niconico_videos"
  """
  update_program_niconico_videos_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: program_niconico_videos_set_input
    pk_columns: program_niconico_videos_pk_columns_input!
  ): program_niconico_videos

  """
  update multiples rows of table: "program_niconico_videos"
  """
  update_program_niconico_videos_many(
    """updates to execute, in order"""
    updates: [program_niconico_videos_updates!]!
  ): [program_niconico_videos_mutation_response]

  """
  update data of the table: "program_persons"
  """
  update_program_persons(
    """sets the columns of the filtered rows to the given values"""
    _set: program_persons_set_input

    """filter the rows which have to be updated"""
    where: program_persons_bool_exp!
  ): program_persons_mutation_response

  """
  update single row of the table: "program_persons"
  """
  update_program_persons_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: program_persons_set_input
    pk_columns: program_persons_pk_columns_input!
  ): program_persons

  """
  update multiples rows of table: "program_persons"
  """
  update_program_persons_many(
    """updates to execute, in order"""
    updates: [program_persons_updates!]!
  ): [program_persons_mutation_response]

  """
  update data of the table: "program_projects"
  """
  update_program_projects(
    """sets the columns of the filtered rows to the given values"""
    _set: program_projects_set_input

    """filter the rows which have to be updated"""
    where: program_projects_bool_exp!
  ): program_projects_mutation_response

  """
  update single row of the table: "program_projects"
  """
  update_program_projects_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: program_projects_set_input
    pk_columns: program_projects_pk_columns_input!
  ): program_projects

  """
  update multiples rows of table: "program_projects"
  """
  update_program_projects_many(
    """updates to execute, in order"""
    updates: [program_projects_updates!]!
  ): [program_projects_mutation_response]

  """
  update data of the table: "program_twitter_announcements"
  """
  update_program_twitter_announcements(
    """sets the columns of the filtered rows to the given values"""
    _set: program_twitter_announcements_set_input

    """filter the rows which have to be updated"""
    where: program_twitter_announcements_bool_exp!
  ): program_twitter_announcements_mutation_response

  """
  update single row of the table: "program_twitter_announcements"
  """
  update_program_twitter_announcements_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: program_twitter_announcements_set_input
    pk_columns: program_twitter_announcements_pk_columns_input!
  ): program_twitter_announcements

  """
  update multiples rows of table: "program_twitter_announcements"
  """
  update_program_twitter_announcements_many(
    """updates to execute, in order"""
    updates: [program_twitter_announcements_updates!]!
  ): [program_twitter_announcements_mutation_response]

  """
  update data of the table: "programs"
  """
  update_programs(
    """sets the columns of the filtered rows to the given values"""
    _set: programs_set_input

    """filter the rows which have to be updated"""
    where: programs_bool_exp!
  ): programs_mutation_response

  """
  update single row of the table: "programs"
  """
  update_programs_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: programs_set_input
    pk_columns: programs_pk_columns_input!
  ): programs

  """
  update multiples rows of table: "programs"
  """
  update_programs_many(
    """updates to execute, in order"""
    updates: [programs_updates!]!
  ): [programs_mutation_response]

  """
  update data of the table: "project_niconico_videos"
  """
  update_project_niconico_videos(
    """sets the columns of the filtered rows to the given values"""
    _set: project_niconico_videos_set_input

    """filter the rows which have to be updated"""
    where: project_niconico_videos_bool_exp!
  ): project_niconico_videos_mutation_response

  """
  update single row of the table: "project_niconico_videos"
  """
  update_project_niconico_videos_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: project_niconico_videos_set_input
    pk_columns: project_niconico_videos_pk_columns_input!
  ): project_niconico_videos

  """
  update multiples rows of table: "project_niconico_videos"
  """
  update_project_niconico_videos_many(
    """updates to execute, in order"""
    updates: [project_niconico_videos_updates!]!
  ): [project_niconico_videos_mutation_response]

  """
  update data of the table: "projects"
  """
  update_projects(
    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input

    """filter the rows which have to be updated"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  update single row of the table: "projects"
  """
  update_projects_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input
    pk_columns: projects_pk_columns_input!
  ): projects

  """
  update multiples rows of table: "projects"
  """
  update_projects_many(
    """updates to execute, in order"""
    updates: [projects_updates!]!
  ): [projects_mutation_response]

  """
  update data of the table: "twitter_accounts"
  """
  update_twitter_accounts(
    """sets the columns of the filtered rows to the given values"""
    _set: twitter_accounts_set_input

    """filter the rows which have to be updated"""
    where: twitter_accounts_bool_exp!
  ): twitter_accounts_mutation_response

  """
  update single row of the table: "twitter_accounts"
  """
  update_twitter_accounts_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: twitter_accounts_set_input
    pk_columns: twitter_accounts_pk_columns_input!
  ): twitter_accounts

  """
  update multiples rows of table: "twitter_accounts"
  """
  update_twitter_accounts_many(
    """updates to execute, in order"""
    updates: [twitter_accounts_updates!]!
  ): [twitter_accounts_mutation_response]

  """
  update data of the table: "twitter_tweet_images"
  """
  update_twitter_tweet_images(
    """increments the numeric columns with given value of the filtered values"""
    _inc: twitter_tweet_images_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: twitter_tweet_images_set_input

    """filter the rows which have to be updated"""
    where: twitter_tweet_images_bool_exp!
  ): twitter_tweet_images_mutation_response

  """
  update single row of the table: "twitter_tweet_images"
  """
  update_twitter_tweet_images_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: twitter_tweet_images_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: twitter_tweet_images_set_input
    pk_columns: twitter_tweet_images_pk_columns_input!
  ): twitter_tweet_images

  """
  update multiples rows of table: "twitter_tweet_images"
  """
  update_twitter_tweet_images_many(
    """updates to execute, in order"""
    updates: [twitter_tweet_images_updates!]!
  ): [twitter_tweet_images_mutation_response]

  """
  update data of the table: "twitter_tweets"
  """
  update_twitter_tweets(
    """sets the columns of the filtered rows to the given values"""
    _set: twitter_tweets_set_input

    """filter the rows which have to be updated"""
    where: twitter_tweets_bool_exp!
  ): twitter_tweets_mutation_response

  """
  update single row of the table: "twitter_tweets"
  """
  update_twitter_tweets_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: twitter_tweets_set_input
    pk_columns: twitter_tweets_pk_columns_input!
  ): twitter_tweets

  """
  update multiples rows of table: "twitter_tweets"
  """
  update_twitter_tweets_many(
    """updates to execute, in order"""
    updates: [twitter_tweets_updates!]!
  ): [twitter_tweets_mutation_response]

  """
  update data of the table: "youtube_channels"
  """
  update_youtube_channels(
    """sets the columns of the filtered rows to the given values"""
    _set: youtube_channels_set_input

    """filter the rows which have to be updated"""
    where: youtube_channels_bool_exp!
  ): youtube_channels_mutation_response

  """
  update single row of the table: "youtube_channels"
  """
  update_youtube_channels_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: youtube_channels_set_input
    pk_columns: youtube_channels_pk_columns_input!
  ): youtube_channels

  """
  update multiples rows of table: "youtube_channels"
  """
  update_youtube_channels_many(
    """updates to execute, in order"""
    updates: [youtube_channels_updates!]!
  ): [youtube_channels_mutation_response]

  """
  update data of the table: "youtube_lives"
  """
  update_youtube_lives(
    """sets the columns of the filtered rows to the given values"""
    _set: youtube_lives_set_input

    """filter the rows which have to be updated"""
    where: youtube_lives_bool_exp!
  ): youtube_lives_mutation_response

  """
  update single row of the table: "youtube_lives"
  """
  update_youtube_lives_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: youtube_lives_set_input
    pk_columns: youtube_lives_pk_columns_input!
  ): youtube_lives

  """
  update multiples rows of table: "youtube_lives"
  """
  update_youtube_lives_many(
    """updates to execute, in order"""
    updates: [youtube_lives_updates!]!
  ): [youtube_lives_mutation_response]

  """
  update data of the table: "youtube_videos"
  """
  update_youtube_videos(
    """sets the columns of the filtered rows to the given values"""
    _set: youtube_videos_set_input

    """filter the rows which have to be updated"""
    where: youtube_videos_bool_exp!
  ): youtube_videos_mutation_response

  """
  update single row of the table: "youtube_videos"
  """
  update_youtube_videos_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: youtube_videos_set_input
    pk_columns: youtube_videos_pk_columns_input!
  ): youtube_videos

  """
  update multiples rows of table: "youtube_videos"
  """
  update_youtube_videos_many(
    """updates to execute, in order"""
    updates: [youtube_videos_updates!]!
  ): [youtube_videos_mutation_response]
}

"""
columns and relationships of "niconico_accounts"
"""
type niconico_accounts {
  created_at: timestamptz!
  id: uuid!
  name: String!
  remote_niconico_account_id: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "niconico_accounts"
"""
type niconico_accounts_aggregate {
  aggregate: niconico_accounts_aggregate_fields
  nodes: [niconico_accounts!]!
}

"""
aggregate fields of "niconico_accounts"
"""
type niconico_accounts_aggregate_fields {
  count(columns: [niconico_accounts_select_column!], distinct: Boolean): Int!
  max: niconico_accounts_max_fields
  min: niconico_accounts_min_fields
}

"""
Boolean expression to filter rows from the table "niconico_accounts". All fields are combined with a logical 'AND'.
"""
input niconico_accounts_bool_exp {
  _and: [niconico_accounts_bool_exp!]
  _not: niconico_accounts_bool_exp
  _or: [niconico_accounts_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  remote_niconico_account_id: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "niconico_accounts"
"""
enum niconico_accounts_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  niconico_accounts_pkey

  """
  unique or primary key constraint on columns "remote_niconico_account_id"
  """
  niconico_accounts_remote_niconico_account_id_key
}

"""
input type for inserting data into table "niconico_accounts"
"""
input niconico_accounts_insert_input {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_account_id: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type niconico_accounts_max_fields {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_account_id: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type niconico_accounts_min_fields {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_account_id: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "niconico_accounts"
"""
type niconico_accounts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [niconico_accounts!]!
}

"""
input type for inserting object relation for remote table "niconico_accounts"
"""
input niconico_accounts_obj_rel_insert_input {
  data: niconico_accounts_insert_input!

  """upsert condition"""
  on_conflict: niconico_accounts_on_conflict
}

"""
on_conflict condition type for table "niconico_accounts"
"""
input niconico_accounts_on_conflict {
  constraint: niconico_accounts_constraint!
  update_columns: [niconico_accounts_update_column!]! = []
  where: niconico_accounts_bool_exp
}

"""Ordering options when selecting data from "niconico_accounts"."""
input niconico_accounts_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  remote_niconico_account_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: niconico_accounts"""
input niconico_accounts_pk_columns_input {
  id: uuid!
}

"""
select columns of table "niconico_accounts"
"""
enum niconico_accounts_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  remote_niconico_account_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "niconico_accounts"
"""
input niconico_accounts_set_input {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_account_id: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "niconico_accounts"
"""
input niconico_accounts_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: niconico_accounts_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input niconico_accounts_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_account_id: String
  updated_at: timestamptz
}

"""
update columns of table "niconico_accounts"
"""
enum niconico_accounts_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  remote_niconico_account_id

  """column name"""
  updated_at
}

input niconico_accounts_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: niconico_accounts_set_input

  """filter the rows which have to be updated"""
  where: niconico_accounts_bool_exp!
}

"""
columns and relationships of "niconico_channels"
"""
type niconico_channels {
  created_at: timestamptz!
  id: uuid!
  name: String!

  """An array relationship"""
  person_niconico_channels(
    """distinct select on columns"""
    distinct_on: [person_niconico_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_channels_order_by!]

    """filter the rows returned"""
    where: person_niconico_channels_bool_exp
  ): [person_niconico_channels!]!

  """An aggregate relationship"""
  person_niconico_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [person_niconico_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_channels_order_by!]

    """filter the rows returned"""
    where: person_niconico_channels_bool_exp
  ): person_niconico_channels_aggregate!
  remote_niconico_channel_id: String!
  screen_name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "niconico_channels"
"""
type niconico_channels_aggregate {
  aggregate: niconico_channels_aggregate_fields
  nodes: [niconico_channels!]!
}

"""
aggregate fields of "niconico_channels"
"""
type niconico_channels_aggregate_fields {
  count(columns: [niconico_channels_select_column!], distinct: Boolean): Int!
  max: niconico_channels_max_fields
  min: niconico_channels_min_fields
}

"""
Boolean expression to filter rows from the table "niconico_channels". All fields are combined with a logical 'AND'.
"""
input niconico_channels_bool_exp {
  _and: [niconico_channels_bool_exp!]
  _not: niconico_channels_bool_exp
  _or: [niconico_channels_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  person_niconico_channels: person_niconico_channels_bool_exp
  person_niconico_channels_aggregate: person_niconico_channels_aggregate_bool_exp
  remote_niconico_channel_id: String_comparison_exp
  screen_name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "niconico_channels"
"""
enum niconico_channels_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  niconico_channels_pkey

  """
  unique or primary key constraint on columns "remote_niconico_channel_id"
  """
  niconico_channels_remote_niconico_channel_id_key

  """
  unique or primary key constraint on columns "screen_name"
  """
  niconico_channels_screen_name_key
}

"""
input type for inserting data into table "niconico_channels"
"""
input niconico_channels_insert_input {
  created_at: timestamptz
  id: uuid
  name: String
  person_niconico_channels: person_niconico_channels_arr_rel_insert_input
  remote_niconico_channel_id: String
  screen_name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type niconico_channels_max_fields {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_channel_id: String
  screen_name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type niconico_channels_min_fields {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_channel_id: String
  screen_name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "niconico_channels"
"""
type niconico_channels_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [niconico_channels!]!
}

"""
input type for inserting object relation for remote table "niconico_channels"
"""
input niconico_channels_obj_rel_insert_input {
  data: niconico_channels_insert_input!

  """upsert condition"""
  on_conflict: niconico_channels_on_conflict
}

"""
on_conflict condition type for table "niconico_channels"
"""
input niconico_channels_on_conflict {
  constraint: niconico_channels_constraint!
  update_columns: [niconico_channels_update_column!]! = []
  where: niconico_channels_bool_exp
}

"""Ordering options when selecting data from "niconico_channels"."""
input niconico_channels_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  person_niconico_channels_aggregate: person_niconico_channels_aggregate_order_by
  remote_niconico_channel_id: order_by
  screen_name: order_by
  updated_at: order_by
}

"""primary key columns input for table: niconico_channels"""
input niconico_channels_pk_columns_input {
  id: uuid!
}

"""
select columns of table "niconico_channels"
"""
enum niconico_channels_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  remote_niconico_channel_id

  """column name"""
  screen_name

  """column name"""
  updated_at
}

"""
input type for updating data in table "niconico_channels"
"""
input niconico_channels_set_input {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_channel_id: String
  screen_name: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "niconico_channels"
"""
input niconico_channels_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: niconico_channels_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input niconico_channels_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_channel_id: String
  screen_name: String
  updated_at: timestamptz
}

"""
update columns of table "niconico_channels"
"""
enum niconico_channels_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  remote_niconico_channel_id

  """column name"""
  screen_name

  """column name"""
  updated_at
}

input niconico_channels_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: niconico_channels_set_input

  """filter the rows which have to be updated"""
  where: niconico_channels_bool_exp!
}

"""
columns and relationships of "niconico_communities"
"""
type niconico_communities {
  created_at: timestamptz!
  id: uuid!
  name: String!
  remote_niconico_community_id: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "niconico_communities"
"""
type niconico_communities_aggregate {
  aggregate: niconico_communities_aggregate_fields
  nodes: [niconico_communities!]!
}

"""
aggregate fields of "niconico_communities"
"""
type niconico_communities_aggregate_fields {
  count(columns: [niconico_communities_select_column!], distinct: Boolean): Int!
  max: niconico_communities_max_fields
  min: niconico_communities_min_fields
}

"""
Boolean expression to filter rows from the table "niconico_communities". All fields are combined with a logical 'AND'.
"""
input niconico_communities_bool_exp {
  _and: [niconico_communities_bool_exp!]
  _not: niconico_communities_bool_exp
  _or: [niconico_communities_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  remote_niconico_community_id: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "niconico_communities"
"""
enum niconico_communities_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  niconico_communities_pkey

  """
  unique or primary key constraint on columns "remote_niconico_community_id"
  """
  niconico_communities_remote_niconico_community_id_key
}

"""
input type for inserting data into table "niconico_communities"
"""
input niconico_communities_insert_input {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_community_id: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type niconico_communities_max_fields {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_community_id: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type niconico_communities_min_fields {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_community_id: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "niconico_communities"
"""
type niconico_communities_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [niconico_communities!]!
}

"""
input type for inserting object relation for remote table "niconico_communities"
"""
input niconico_communities_obj_rel_insert_input {
  data: niconico_communities_insert_input!

  """upsert condition"""
  on_conflict: niconico_communities_on_conflict
}

"""
on_conflict condition type for table "niconico_communities"
"""
input niconico_communities_on_conflict {
  constraint: niconico_communities_constraint!
  update_columns: [niconico_communities_update_column!]! = []
  where: niconico_communities_bool_exp
}

"""Ordering options when selecting data from "niconico_communities"."""
input niconico_communities_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  remote_niconico_community_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: niconico_communities"""
input niconico_communities_pk_columns_input {
  id: uuid!
}

"""
select columns of table "niconico_communities"
"""
enum niconico_communities_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  remote_niconico_community_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "niconico_communities"
"""
input niconico_communities_set_input {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_community_id: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "niconico_communities"
"""
input niconico_communities_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: niconico_communities_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input niconico_communities_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_community_id: String
  updated_at: timestamptz
}

"""
update columns of table "niconico_communities"
"""
enum niconico_communities_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  remote_niconico_community_id

  """column name"""
  updated_at
}

input niconico_communities_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: niconico_communities_set_input

  """filter the rows which have to be updated"""
  where: niconico_communities_bool_exp!
}

"""
columns and relationships of "niconico_plus_channels"
"""
type niconico_plus_channels {
  created_at: timestamptz!
  id: uuid!
  name: String!

  """An array relationship"""
  person_niconico_plus_channels(
    """distinct select on columns"""
    distinct_on: [person_niconico_plus_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_plus_channels_order_by!]

    """filter the rows returned"""
    where: person_niconico_plus_channels_bool_exp
  ): [person_niconico_plus_channels!]!

  """An aggregate relationship"""
  person_niconico_plus_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [person_niconico_plus_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_plus_channels_order_by!]

    """filter the rows returned"""
    where: person_niconico_plus_channels_bool_exp
  ): person_niconico_plus_channels_aggregate!
  remote_niconico_plus_channel_id: String!
  screen_name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "niconico_plus_channels"
"""
type niconico_plus_channels_aggregate {
  aggregate: niconico_plus_channels_aggregate_fields
  nodes: [niconico_plus_channels!]!
}

"""
aggregate fields of "niconico_plus_channels"
"""
type niconico_plus_channels_aggregate_fields {
  count(columns: [niconico_plus_channels_select_column!], distinct: Boolean): Int!
  max: niconico_plus_channels_max_fields
  min: niconico_plus_channels_min_fields
}

"""
Boolean expression to filter rows from the table "niconico_plus_channels". All fields are combined with a logical 'AND'.
"""
input niconico_plus_channels_bool_exp {
  _and: [niconico_plus_channels_bool_exp!]
  _not: niconico_plus_channels_bool_exp
  _or: [niconico_plus_channels_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  person_niconico_plus_channels: person_niconico_plus_channels_bool_exp
  person_niconico_plus_channels_aggregate: person_niconico_plus_channels_aggregate_bool_exp
  remote_niconico_plus_channel_id: String_comparison_exp
  screen_name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "niconico_plus_channels"
"""
enum niconico_plus_channels_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  niconico_plus_channels_pkey

  """
  unique or primary key constraint on columns "remote_niconico_plus_channel_id"
  """
  niconico_plus_channels_remote_niconico_plus_channel_id_key

  """
  unique or primary key constraint on columns "screen_name"
  """
  niconico_plus_channels_screen_name_key
}

"""
input type for inserting data into table "niconico_plus_channels"
"""
input niconico_plus_channels_insert_input {
  created_at: timestamptz
  id: uuid
  name: String
  person_niconico_plus_channels: person_niconico_plus_channels_arr_rel_insert_input
  remote_niconico_plus_channel_id: String
  screen_name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type niconico_plus_channels_max_fields {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_plus_channel_id: String
  screen_name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type niconico_plus_channels_min_fields {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_plus_channel_id: String
  screen_name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "niconico_plus_channels"
"""
type niconico_plus_channels_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [niconico_plus_channels!]!
}

"""
input type for inserting object relation for remote table "niconico_plus_channels"
"""
input niconico_plus_channels_obj_rel_insert_input {
  data: niconico_plus_channels_insert_input!

  """upsert condition"""
  on_conflict: niconico_plus_channels_on_conflict
}

"""
on_conflict condition type for table "niconico_plus_channels"
"""
input niconico_plus_channels_on_conflict {
  constraint: niconico_plus_channels_constraint!
  update_columns: [niconico_plus_channels_update_column!]! = []
  where: niconico_plus_channels_bool_exp
}

"""Ordering options when selecting data from "niconico_plus_channels"."""
input niconico_plus_channels_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  person_niconico_plus_channels_aggregate: person_niconico_plus_channels_aggregate_order_by
  remote_niconico_plus_channel_id: order_by
  screen_name: order_by
  updated_at: order_by
}

"""primary key columns input for table: niconico_plus_channels"""
input niconico_plus_channels_pk_columns_input {
  id: uuid!
}

"""
select columns of table "niconico_plus_channels"
"""
enum niconico_plus_channels_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  remote_niconico_plus_channel_id

  """column name"""
  screen_name

  """column name"""
  updated_at
}

"""
input type for updating data in table "niconico_plus_channels"
"""
input niconico_plus_channels_set_input {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_plus_channel_id: String
  screen_name: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "niconico_plus_channels"
"""
input niconico_plus_channels_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: niconico_plus_channels_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input niconico_plus_channels_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  name: String
  remote_niconico_plus_channel_id: String
  screen_name: String
  updated_at: timestamptz
}

"""
update columns of table "niconico_plus_channels"
"""
enum niconico_plus_channels_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  remote_niconico_plus_channel_id

  """column name"""
  screen_name

  """column name"""
  updated_at
}

input niconico_plus_channels_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: niconico_plus_channels_set_input

  """filter the rows which have to be updated"""
  where: niconico_plus_channels_bool_exp!
}

"""
columns and relationships of "niconico_videos"
"""
type niconico_videos {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  niconico_account: niconico_accounts!
  niconico_account_id: uuid!

  """An array relationship"""
  program_niconico_videos(
    """distinct select on columns"""
    distinct_on: [program_niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_niconico_videos_order_by!]

    """filter the rows returned"""
    where: program_niconico_videos_bool_exp
  ): [program_niconico_videos!]!

  """An aggregate relationship"""
  program_niconico_videos_aggregate(
    """distinct select on columns"""
    distinct_on: [program_niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_niconico_videos_order_by!]

    """filter the rows returned"""
    where: program_niconico_videos_bool_exp
  ): program_niconico_videos_aggregate!

  """An array relationship"""
  project_niconico_videos(
    """distinct select on columns"""
    distinct_on: [project_niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_niconico_videos_order_by!]

    """filter the rows returned"""
    where: project_niconico_videos_bool_exp
  ): [project_niconico_videos!]!

  """An aggregate relationship"""
  project_niconico_videos_aggregate(
    """distinct select on columns"""
    distinct_on: [project_niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_niconico_videos_order_by!]

    """filter the rows returned"""
    where: project_niconico_videos_bool_exp
  ): project_niconico_videos_aggregate!
  remote_niconico_content_id: String!
  start_time: timestamptz!
  thumbnail_url: String!
  title: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "niconico_videos"
"""
type niconico_videos_aggregate {
  aggregate: niconico_videos_aggregate_fields
  nodes: [niconico_videos!]!
}

"""
aggregate fields of "niconico_videos"
"""
type niconico_videos_aggregate_fields {
  count(columns: [niconico_videos_select_column!], distinct: Boolean): Int!
  max: niconico_videos_max_fields
  min: niconico_videos_min_fields
}

"""
Boolean expression to filter rows from the table "niconico_videos". All fields are combined with a logical 'AND'.
"""
input niconico_videos_bool_exp {
  _and: [niconico_videos_bool_exp!]
  _not: niconico_videos_bool_exp
  _or: [niconico_videos_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  niconico_account: niconico_accounts_bool_exp
  niconico_account_id: uuid_comparison_exp
  program_niconico_videos: program_niconico_videos_bool_exp
  program_niconico_videos_aggregate: program_niconico_videos_aggregate_bool_exp
  project_niconico_videos: project_niconico_videos_bool_exp
  project_niconico_videos_aggregate: project_niconico_videos_aggregate_bool_exp
  remote_niconico_content_id: String_comparison_exp
  start_time: timestamptz_comparison_exp
  thumbnail_url: String_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "niconico_videos"
"""
enum niconico_videos_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  niconico_videos_pkey

  """
  unique or primary key constraint on columns "remote_niconico_content_id"
  """
  niconico_videos_remote_niconico_content_id_key
}

"""
input type for inserting data into table "niconico_videos"
"""
input niconico_videos_insert_input {
  created_at: timestamptz
  id: uuid
  niconico_account: niconico_accounts_obj_rel_insert_input
  niconico_account_id: uuid
  program_niconico_videos: program_niconico_videos_arr_rel_insert_input
  project_niconico_videos: project_niconico_videos_arr_rel_insert_input
  remote_niconico_content_id: String
  start_time: timestamptz
  thumbnail_url: String
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type niconico_videos_max_fields {
  created_at: timestamptz
  id: uuid
  niconico_account_id: uuid
  remote_niconico_content_id: String
  start_time: timestamptz
  thumbnail_url: String
  title: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type niconico_videos_min_fields {
  created_at: timestamptz
  id: uuid
  niconico_account_id: uuid
  remote_niconico_content_id: String
  start_time: timestamptz
  thumbnail_url: String
  title: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "niconico_videos"
"""
type niconico_videos_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [niconico_videos!]!
}

"""
input type for inserting object relation for remote table "niconico_videos"
"""
input niconico_videos_obj_rel_insert_input {
  data: niconico_videos_insert_input!

  """upsert condition"""
  on_conflict: niconico_videos_on_conflict
}

"""
on_conflict condition type for table "niconico_videos"
"""
input niconico_videos_on_conflict {
  constraint: niconico_videos_constraint!
  update_columns: [niconico_videos_update_column!]! = []
  where: niconico_videos_bool_exp
}

"""Ordering options when selecting data from "niconico_videos"."""
input niconico_videos_order_by {
  created_at: order_by
  id: order_by
  niconico_account: niconico_accounts_order_by
  niconico_account_id: order_by
  program_niconico_videos_aggregate: program_niconico_videos_aggregate_order_by
  project_niconico_videos_aggregate: project_niconico_videos_aggregate_order_by
  remote_niconico_content_id: order_by
  start_time: order_by
  thumbnail_url: order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: niconico_videos"""
input niconico_videos_pk_columns_input {
  id: uuid!
}

"""
select columns of table "niconico_videos"
"""
enum niconico_videos_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  niconico_account_id

  """column name"""
  remote_niconico_content_id

  """column name"""
  start_time

  """column name"""
  thumbnail_url

  """column name"""
  title

  """column name"""
  updated_at
}

"""
input type for updating data in table "niconico_videos"
"""
input niconico_videos_set_input {
  created_at: timestamptz
  id: uuid
  niconico_account_id: uuid
  remote_niconico_content_id: String
  start_time: timestamptz
  thumbnail_url: String
  title: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "niconico_videos"
"""
input niconico_videos_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: niconico_videos_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input niconico_videos_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  niconico_account_id: uuid
  remote_niconico_content_id: String
  start_time: timestamptz
  thumbnail_url: String
  title: String
  updated_at: timestamptz
}

"""
update columns of table "niconico_videos"
"""
enum niconico_videos_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  niconico_account_id

  """column name"""
  remote_niconico_content_id

  """column name"""
  start_time

  """column name"""
  thumbnail_url

  """column name"""
  title

  """column name"""
  updated_at
}

input niconico_videos_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: niconico_videos_set_input

  """filter the rows which have to be updated"""
  where: niconico_videos_bool_exp!
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "person_fediverse_accounts"
"""
type person_fediverse_accounts {
  created_at: timestamptz!

  """An object relationship"""
  fediverse_account: fediverse_accounts!
  fediverse_account_id: uuid!
  id: uuid!

  """An object relationship"""
  person: persons!
  person_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "person_fediverse_accounts"
"""
type person_fediverse_accounts_aggregate {
  aggregate: person_fediverse_accounts_aggregate_fields
  nodes: [person_fediverse_accounts!]!
}

input person_fediverse_accounts_aggregate_bool_exp {
  count: person_fediverse_accounts_aggregate_bool_exp_count
}

input person_fediverse_accounts_aggregate_bool_exp_count {
  arguments: [person_fediverse_accounts_select_column!]
  distinct: Boolean
  filter: person_fediverse_accounts_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "person_fediverse_accounts"
"""
type person_fediverse_accounts_aggregate_fields {
  count(columns: [person_fediverse_accounts_select_column!], distinct: Boolean): Int!
  max: person_fediverse_accounts_max_fields
  min: person_fediverse_accounts_min_fields
}

"""
order by aggregate values of table "person_fediverse_accounts"
"""
input person_fediverse_accounts_aggregate_order_by {
  count: order_by
  max: person_fediverse_accounts_max_order_by
  min: person_fediverse_accounts_min_order_by
}

"""
input type for inserting array relation for remote table "person_fediverse_accounts"
"""
input person_fediverse_accounts_arr_rel_insert_input {
  data: [person_fediverse_accounts_insert_input!]!

  """upsert condition"""
  on_conflict: person_fediverse_accounts_on_conflict
}

"""
Boolean expression to filter rows from the table "person_fediverse_accounts". All fields are combined with a logical 'AND'.
"""
input person_fediverse_accounts_bool_exp {
  _and: [person_fediverse_accounts_bool_exp!]
  _not: person_fediverse_accounts_bool_exp
  _or: [person_fediverse_accounts_bool_exp!]
  created_at: timestamptz_comparison_exp
  fediverse_account: fediverse_accounts_bool_exp
  fediverse_account_id: uuid_comparison_exp
  id: uuid_comparison_exp
  person: persons_bool_exp
  person_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "person_fediverse_accounts"
"""
enum person_fediverse_accounts_constraint {
  """
  unique or primary key constraint on columns "fediverse_account_id", "person_id"
  """
  v2_person_fediverse_accounts_person_id_fediverse_account_id_key

  """
  unique or primary key constraint on columns "id"
  """
  v2_person_fediverse_accounts_pkey
}

"""
input type for inserting data into table "person_fediverse_accounts"
"""
input person_fediverse_accounts_insert_input {
  created_at: timestamptz
  fediverse_account: fediverse_accounts_obj_rel_insert_input
  fediverse_account_id: uuid
  id: uuid
  person: persons_obj_rel_insert_input
  person_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type person_fediverse_accounts_max_fields {
  created_at: timestamptz
  fediverse_account_id: uuid
  id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "person_fediverse_accounts"
"""
input person_fediverse_accounts_max_order_by {
  created_at: order_by
  fediverse_account_id: order_by
  id: order_by
  person_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type person_fediverse_accounts_min_fields {
  created_at: timestamptz
  fediverse_account_id: uuid
  id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "person_fediverse_accounts"
"""
input person_fediverse_accounts_min_order_by {
  created_at: order_by
  fediverse_account_id: order_by
  id: order_by
  person_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "person_fediverse_accounts"
"""
type person_fediverse_accounts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [person_fediverse_accounts!]!
}

"""
on_conflict condition type for table "person_fediverse_accounts"
"""
input person_fediverse_accounts_on_conflict {
  constraint: person_fediverse_accounts_constraint!
  update_columns: [person_fediverse_accounts_update_column!]! = []
  where: person_fediverse_accounts_bool_exp
}

"""Ordering options when selecting data from "person_fediverse_accounts"."""
input person_fediverse_accounts_order_by {
  created_at: order_by
  fediverse_account: fediverse_accounts_order_by
  fediverse_account_id: order_by
  id: order_by
  person: persons_order_by
  person_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: person_fediverse_accounts"""
input person_fediverse_accounts_pk_columns_input {
  id: uuid!
}

"""
select columns of table "person_fediverse_accounts"
"""
enum person_fediverse_accounts_select_column {
  """column name"""
  created_at

  """column name"""
  fediverse_account_id

  """column name"""
  id

  """column name"""
  person_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "person_fediverse_accounts"
"""
input person_fediverse_accounts_set_input {
  created_at: timestamptz
  fediverse_account_id: uuid
  id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "person_fediverse_accounts"
"""
input person_fediverse_accounts_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: person_fediverse_accounts_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input person_fediverse_accounts_stream_cursor_value_input {
  created_at: timestamptz
  fediverse_account_id: uuid
  id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "person_fediverse_accounts"
"""
enum person_fediverse_accounts_update_column {
  """column name"""
  created_at

  """column name"""
  fediverse_account_id

  """column name"""
  id

  """column name"""
  person_id

  """column name"""
  updated_at
}

input person_fediverse_accounts_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: person_fediverse_accounts_set_input

  """filter the rows which have to be updated"""
  where: person_fediverse_accounts_bool_exp!
}

"""
columns and relationships of "person_niconico_accounts"
"""
type person_niconico_accounts {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  niconico_account: niconico_accounts!
  niconico_account_id: uuid!

  """An object relationship"""
  person: persons!
  person_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "person_niconico_accounts"
"""
type person_niconico_accounts_aggregate {
  aggregate: person_niconico_accounts_aggregate_fields
  nodes: [person_niconico_accounts!]!
}

input person_niconico_accounts_aggregate_bool_exp {
  count: person_niconico_accounts_aggregate_bool_exp_count
}

input person_niconico_accounts_aggregate_bool_exp_count {
  arguments: [person_niconico_accounts_select_column!]
  distinct: Boolean
  filter: person_niconico_accounts_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "person_niconico_accounts"
"""
type person_niconico_accounts_aggregate_fields {
  count(columns: [person_niconico_accounts_select_column!], distinct: Boolean): Int!
  max: person_niconico_accounts_max_fields
  min: person_niconico_accounts_min_fields
}

"""
order by aggregate values of table "person_niconico_accounts"
"""
input person_niconico_accounts_aggregate_order_by {
  count: order_by
  max: person_niconico_accounts_max_order_by
  min: person_niconico_accounts_min_order_by
}

"""
input type for inserting array relation for remote table "person_niconico_accounts"
"""
input person_niconico_accounts_arr_rel_insert_input {
  data: [person_niconico_accounts_insert_input!]!

  """upsert condition"""
  on_conflict: person_niconico_accounts_on_conflict
}

"""
Boolean expression to filter rows from the table "person_niconico_accounts". All fields are combined with a logical 'AND'.
"""
input person_niconico_accounts_bool_exp {
  _and: [person_niconico_accounts_bool_exp!]
  _not: person_niconico_accounts_bool_exp
  _or: [person_niconico_accounts_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  niconico_account: niconico_accounts_bool_exp
  niconico_account_id: uuid_comparison_exp
  person: persons_bool_exp
  person_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "person_niconico_accounts"
"""
enum person_niconico_accounts_constraint {
  """
  unique or primary key constraint on columns "niconico_account_id", "person_id"
  """
  v2_person_niconico_accounts_person_id_niconico_account_id_key

  """
  unique or primary key constraint on columns "id"
  """
  v2_person_niconico_accounts_pkey
}

"""
input type for inserting data into table "person_niconico_accounts"
"""
input person_niconico_accounts_insert_input {
  created_at: timestamptz
  id: uuid
  niconico_account: niconico_accounts_obj_rel_insert_input
  niconico_account_id: uuid
  person: persons_obj_rel_insert_input
  person_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type person_niconico_accounts_max_fields {
  created_at: timestamptz
  id: uuid
  niconico_account_id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "person_niconico_accounts"
"""
input person_niconico_accounts_max_order_by {
  created_at: order_by
  id: order_by
  niconico_account_id: order_by
  person_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type person_niconico_accounts_min_fields {
  created_at: timestamptz
  id: uuid
  niconico_account_id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "person_niconico_accounts"
"""
input person_niconico_accounts_min_order_by {
  created_at: order_by
  id: order_by
  niconico_account_id: order_by
  person_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "person_niconico_accounts"
"""
type person_niconico_accounts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [person_niconico_accounts!]!
}

"""
on_conflict condition type for table "person_niconico_accounts"
"""
input person_niconico_accounts_on_conflict {
  constraint: person_niconico_accounts_constraint!
  update_columns: [person_niconico_accounts_update_column!]! = []
  where: person_niconico_accounts_bool_exp
}

"""Ordering options when selecting data from "person_niconico_accounts"."""
input person_niconico_accounts_order_by {
  created_at: order_by
  id: order_by
  niconico_account: niconico_accounts_order_by
  niconico_account_id: order_by
  person: persons_order_by
  person_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: person_niconico_accounts"""
input person_niconico_accounts_pk_columns_input {
  id: uuid!
}

"""
select columns of table "person_niconico_accounts"
"""
enum person_niconico_accounts_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  niconico_account_id

  """column name"""
  person_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "person_niconico_accounts"
"""
input person_niconico_accounts_set_input {
  created_at: timestamptz
  id: uuid
  niconico_account_id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "person_niconico_accounts"
"""
input person_niconico_accounts_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: person_niconico_accounts_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input person_niconico_accounts_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  niconico_account_id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "person_niconico_accounts"
"""
enum person_niconico_accounts_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  niconico_account_id

  """column name"""
  person_id

  """column name"""
  updated_at
}

input person_niconico_accounts_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: person_niconico_accounts_set_input

  """filter the rows which have to be updated"""
  where: person_niconico_accounts_bool_exp!
}

"""
columns and relationships of "person_niconico_channels"
"""
type person_niconico_channels {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  niconico_channel: niconico_channels!
  niconico_channel_id: uuid!

  """An object relationship"""
  person: persons!
  person_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "person_niconico_channels"
"""
type person_niconico_channels_aggregate {
  aggregate: person_niconico_channels_aggregate_fields
  nodes: [person_niconico_channels!]!
}

input person_niconico_channels_aggregate_bool_exp {
  count: person_niconico_channels_aggregate_bool_exp_count
}

input person_niconico_channels_aggregate_bool_exp_count {
  arguments: [person_niconico_channels_select_column!]
  distinct: Boolean
  filter: person_niconico_channels_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "person_niconico_channels"
"""
type person_niconico_channels_aggregate_fields {
  count(columns: [person_niconico_channels_select_column!], distinct: Boolean): Int!
  max: person_niconico_channels_max_fields
  min: person_niconico_channels_min_fields
}

"""
order by aggregate values of table "person_niconico_channels"
"""
input person_niconico_channels_aggregate_order_by {
  count: order_by
  max: person_niconico_channels_max_order_by
  min: person_niconico_channels_min_order_by
}

"""
input type for inserting array relation for remote table "person_niconico_channels"
"""
input person_niconico_channels_arr_rel_insert_input {
  data: [person_niconico_channels_insert_input!]!

  """upsert condition"""
  on_conflict: person_niconico_channels_on_conflict
}

"""
Boolean expression to filter rows from the table "person_niconico_channels". All fields are combined with a logical 'AND'.
"""
input person_niconico_channels_bool_exp {
  _and: [person_niconico_channels_bool_exp!]
  _not: person_niconico_channels_bool_exp
  _or: [person_niconico_channels_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  niconico_channel: niconico_channels_bool_exp
  niconico_channel_id: uuid_comparison_exp
  person: persons_bool_exp
  person_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "person_niconico_channels"
"""
enum person_niconico_channels_constraint {
  """
  unique or primary key constraint on columns "niconico_channel_id", "person_id"
  """
  person_niconico_channels_person_id_niconico_channel_id_key

  """
  unique or primary key constraint on columns "id"
  """
  person_niconico_channels_pkey
}

"""
input type for inserting data into table "person_niconico_channels"
"""
input person_niconico_channels_insert_input {
  created_at: timestamptz
  id: uuid
  niconico_channel: niconico_channels_obj_rel_insert_input
  niconico_channel_id: uuid
  person: persons_obj_rel_insert_input
  person_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type person_niconico_channels_max_fields {
  created_at: timestamptz
  id: uuid
  niconico_channel_id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "person_niconico_channels"
"""
input person_niconico_channels_max_order_by {
  created_at: order_by
  id: order_by
  niconico_channel_id: order_by
  person_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type person_niconico_channels_min_fields {
  created_at: timestamptz
  id: uuid
  niconico_channel_id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "person_niconico_channels"
"""
input person_niconico_channels_min_order_by {
  created_at: order_by
  id: order_by
  niconico_channel_id: order_by
  person_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "person_niconico_channels"
"""
type person_niconico_channels_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [person_niconico_channels!]!
}

"""
on_conflict condition type for table "person_niconico_channels"
"""
input person_niconico_channels_on_conflict {
  constraint: person_niconico_channels_constraint!
  update_columns: [person_niconico_channels_update_column!]! = []
  where: person_niconico_channels_bool_exp
}

"""Ordering options when selecting data from "person_niconico_channels"."""
input person_niconico_channels_order_by {
  created_at: order_by
  id: order_by
  niconico_channel: niconico_channels_order_by
  niconico_channel_id: order_by
  person: persons_order_by
  person_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: person_niconico_channels"""
input person_niconico_channels_pk_columns_input {
  id: uuid!
}

"""
select columns of table "person_niconico_channels"
"""
enum person_niconico_channels_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  niconico_channel_id

  """column name"""
  person_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "person_niconico_channels"
"""
input person_niconico_channels_set_input {
  created_at: timestamptz
  id: uuid
  niconico_channel_id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "person_niconico_channels"
"""
input person_niconico_channels_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: person_niconico_channels_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input person_niconico_channels_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  niconico_channel_id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "person_niconico_channels"
"""
enum person_niconico_channels_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  niconico_channel_id

  """column name"""
  person_id

  """column name"""
  updated_at
}

input person_niconico_channels_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: person_niconico_channels_set_input

  """filter the rows which have to be updated"""
  where: person_niconico_channels_bool_exp!
}

"""
columns and relationships of "person_niconico_communities"
"""
type person_niconico_communities {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  niconico_community: niconico_communities!
  niconico_community_id: uuid!

  """An object relationship"""
  person: persons!
  person_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "person_niconico_communities"
"""
type person_niconico_communities_aggregate {
  aggregate: person_niconico_communities_aggregate_fields
  nodes: [person_niconico_communities!]!
}

input person_niconico_communities_aggregate_bool_exp {
  count: person_niconico_communities_aggregate_bool_exp_count
}

input person_niconico_communities_aggregate_bool_exp_count {
  arguments: [person_niconico_communities_select_column!]
  distinct: Boolean
  filter: person_niconico_communities_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "person_niconico_communities"
"""
type person_niconico_communities_aggregate_fields {
  count(columns: [person_niconico_communities_select_column!], distinct: Boolean): Int!
  max: person_niconico_communities_max_fields
  min: person_niconico_communities_min_fields
}

"""
order by aggregate values of table "person_niconico_communities"
"""
input person_niconico_communities_aggregate_order_by {
  count: order_by
  max: person_niconico_communities_max_order_by
  min: person_niconico_communities_min_order_by
}

"""
input type for inserting array relation for remote table "person_niconico_communities"
"""
input person_niconico_communities_arr_rel_insert_input {
  data: [person_niconico_communities_insert_input!]!

  """upsert condition"""
  on_conflict: person_niconico_communities_on_conflict
}

"""
Boolean expression to filter rows from the table "person_niconico_communities". All fields are combined with a logical 'AND'.
"""
input person_niconico_communities_bool_exp {
  _and: [person_niconico_communities_bool_exp!]
  _not: person_niconico_communities_bool_exp
  _or: [person_niconico_communities_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  niconico_community: niconico_communities_bool_exp
  niconico_community_id: uuid_comparison_exp
  person: persons_bool_exp
  person_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "person_niconico_communities"
"""
enum person_niconico_communities_constraint {
  """
  unique or primary key constraint on columns "niconico_community_id", "person_id"
  """
  v2_person_niconico_communitie_person_id_niconico_community__key

  """
  unique or primary key constraint on columns "id"
  """
  v2_person_niconico_communities_pkey
}

"""
input type for inserting data into table "person_niconico_communities"
"""
input person_niconico_communities_insert_input {
  created_at: timestamptz
  id: uuid
  niconico_community: niconico_communities_obj_rel_insert_input
  niconico_community_id: uuid
  person: persons_obj_rel_insert_input
  person_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type person_niconico_communities_max_fields {
  created_at: timestamptz
  id: uuid
  niconico_community_id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "person_niconico_communities"
"""
input person_niconico_communities_max_order_by {
  created_at: order_by
  id: order_by
  niconico_community_id: order_by
  person_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type person_niconico_communities_min_fields {
  created_at: timestamptz
  id: uuid
  niconico_community_id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "person_niconico_communities"
"""
input person_niconico_communities_min_order_by {
  created_at: order_by
  id: order_by
  niconico_community_id: order_by
  person_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "person_niconico_communities"
"""
type person_niconico_communities_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [person_niconico_communities!]!
}

"""
on_conflict condition type for table "person_niconico_communities"
"""
input person_niconico_communities_on_conflict {
  constraint: person_niconico_communities_constraint!
  update_columns: [person_niconico_communities_update_column!]! = []
  where: person_niconico_communities_bool_exp
}

"""
Ordering options when selecting data from "person_niconico_communities".
"""
input person_niconico_communities_order_by {
  created_at: order_by
  id: order_by
  niconico_community: niconico_communities_order_by
  niconico_community_id: order_by
  person: persons_order_by
  person_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: person_niconico_communities"""
input person_niconico_communities_pk_columns_input {
  id: uuid!
}

"""
select columns of table "person_niconico_communities"
"""
enum person_niconico_communities_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  niconico_community_id

  """column name"""
  person_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "person_niconico_communities"
"""
input person_niconico_communities_set_input {
  created_at: timestamptz
  id: uuid
  niconico_community_id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "person_niconico_communities"
"""
input person_niconico_communities_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: person_niconico_communities_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input person_niconico_communities_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  niconico_community_id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "person_niconico_communities"
"""
enum person_niconico_communities_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  niconico_community_id

  """column name"""
  person_id

  """column name"""
  updated_at
}

input person_niconico_communities_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: person_niconico_communities_set_input

  """filter the rows which have to be updated"""
  where: person_niconico_communities_bool_exp!
}

"""
columns and relationships of "person_niconico_plus_channels"
"""
type person_niconico_plus_channels {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  niconico_plus_channel: niconico_plus_channels!
  niconico_plus_channel_id: uuid!

  """An object relationship"""
  person: persons!
  person_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "person_niconico_plus_channels"
"""
type person_niconico_plus_channels_aggregate {
  aggregate: person_niconico_plus_channels_aggregate_fields
  nodes: [person_niconico_plus_channels!]!
}

input person_niconico_plus_channels_aggregate_bool_exp {
  count: person_niconico_plus_channels_aggregate_bool_exp_count
}

input person_niconico_plus_channels_aggregate_bool_exp_count {
  arguments: [person_niconico_plus_channels_select_column!]
  distinct: Boolean
  filter: person_niconico_plus_channels_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "person_niconico_plus_channels"
"""
type person_niconico_plus_channels_aggregate_fields {
  count(columns: [person_niconico_plus_channels_select_column!], distinct: Boolean): Int!
  max: person_niconico_plus_channels_max_fields
  min: person_niconico_plus_channels_min_fields
}

"""
order by aggregate values of table "person_niconico_plus_channels"
"""
input person_niconico_plus_channels_aggregate_order_by {
  count: order_by
  max: person_niconico_plus_channels_max_order_by
  min: person_niconico_plus_channels_min_order_by
}

"""
input type for inserting array relation for remote table "person_niconico_plus_channels"
"""
input person_niconico_plus_channels_arr_rel_insert_input {
  data: [person_niconico_plus_channels_insert_input!]!

  """upsert condition"""
  on_conflict: person_niconico_plus_channels_on_conflict
}

"""
Boolean expression to filter rows from the table "person_niconico_plus_channels". All fields are combined with a logical 'AND'.
"""
input person_niconico_plus_channels_bool_exp {
  _and: [person_niconico_plus_channels_bool_exp!]
  _not: person_niconico_plus_channels_bool_exp
  _or: [person_niconico_plus_channels_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  niconico_plus_channel: niconico_plus_channels_bool_exp
  niconico_plus_channel_id: uuid_comparison_exp
  person: persons_bool_exp
  person_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "person_niconico_plus_channels"
"""
enum person_niconico_plus_channels_constraint {
  """
  unique or primary key constraint on columns "niconico_plus_channel_id", "person_id"
  """
  person_niconico_plus_channels_person_id_niconico_plus_chann_key

  """
  unique or primary key constraint on columns "id"
  """
  person_niconico_plus_channels_pkey
}

"""
input type for inserting data into table "person_niconico_plus_channels"
"""
input person_niconico_plus_channels_insert_input {
  created_at: timestamptz
  id: uuid
  niconico_plus_channel: niconico_plus_channels_obj_rel_insert_input
  niconico_plus_channel_id: uuid
  person: persons_obj_rel_insert_input
  person_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type person_niconico_plus_channels_max_fields {
  created_at: timestamptz
  id: uuid
  niconico_plus_channel_id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "person_niconico_plus_channels"
"""
input person_niconico_plus_channels_max_order_by {
  created_at: order_by
  id: order_by
  niconico_plus_channel_id: order_by
  person_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type person_niconico_plus_channels_min_fields {
  created_at: timestamptz
  id: uuid
  niconico_plus_channel_id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "person_niconico_plus_channels"
"""
input person_niconico_plus_channels_min_order_by {
  created_at: order_by
  id: order_by
  niconico_plus_channel_id: order_by
  person_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "person_niconico_plus_channels"
"""
type person_niconico_plus_channels_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [person_niconico_plus_channels!]!
}

"""
on_conflict condition type for table "person_niconico_plus_channels"
"""
input person_niconico_plus_channels_on_conflict {
  constraint: person_niconico_plus_channels_constraint!
  update_columns: [person_niconico_plus_channels_update_column!]! = []
  where: person_niconico_plus_channels_bool_exp
}

"""
Ordering options when selecting data from "person_niconico_plus_channels".
"""
input person_niconico_plus_channels_order_by {
  created_at: order_by
  id: order_by
  niconico_plus_channel: niconico_plus_channels_order_by
  niconico_plus_channel_id: order_by
  person: persons_order_by
  person_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: person_niconico_plus_channels"""
input person_niconico_plus_channels_pk_columns_input {
  id: uuid!
}

"""
select columns of table "person_niconico_plus_channels"
"""
enum person_niconico_plus_channels_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  niconico_plus_channel_id

  """column name"""
  person_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "person_niconico_plus_channels"
"""
input person_niconico_plus_channels_set_input {
  created_at: timestamptz
  id: uuid
  niconico_plus_channel_id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "person_niconico_plus_channels"
"""
input person_niconico_plus_channels_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: person_niconico_plus_channels_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input person_niconico_plus_channels_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  niconico_plus_channel_id: uuid
  person_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "person_niconico_plus_channels"
"""
enum person_niconico_plus_channels_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  niconico_plus_channel_id

  """column name"""
  person_id

  """column name"""
  updated_at
}

input person_niconico_plus_channels_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: person_niconico_plus_channels_set_input

  """filter the rows which have to be updated"""
  where: person_niconico_plus_channels_bool_exp!
}

"""
columns and relationships of "person_twitter_accounts"
"""
type person_twitter_accounts {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  person: persons!
  person_id: uuid!

  """An object relationship"""
  twitter_account: twitter_accounts!
  twitter_account_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "person_twitter_accounts"
"""
type person_twitter_accounts_aggregate {
  aggregate: person_twitter_accounts_aggregate_fields
  nodes: [person_twitter_accounts!]!
}

input person_twitter_accounts_aggregate_bool_exp {
  count: person_twitter_accounts_aggregate_bool_exp_count
}

input person_twitter_accounts_aggregate_bool_exp_count {
  arguments: [person_twitter_accounts_select_column!]
  distinct: Boolean
  filter: person_twitter_accounts_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "person_twitter_accounts"
"""
type person_twitter_accounts_aggregate_fields {
  count(columns: [person_twitter_accounts_select_column!], distinct: Boolean): Int!
  max: person_twitter_accounts_max_fields
  min: person_twitter_accounts_min_fields
}

"""
order by aggregate values of table "person_twitter_accounts"
"""
input person_twitter_accounts_aggregate_order_by {
  count: order_by
  max: person_twitter_accounts_max_order_by
  min: person_twitter_accounts_min_order_by
}

"""
input type for inserting array relation for remote table "person_twitter_accounts"
"""
input person_twitter_accounts_arr_rel_insert_input {
  data: [person_twitter_accounts_insert_input!]!

  """upsert condition"""
  on_conflict: person_twitter_accounts_on_conflict
}

"""
Boolean expression to filter rows from the table "person_twitter_accounts". All fields are combined with a logical 'AND'.
"""
input person_twitter_accounts_bool_exp {
  _and: [person_twitter_accounts_bool_exp!]
  _not: person_twitter_accounts_bool_exp
  _or: [person_twitter_accounts_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  person: persons_bool_exp
  person_id: uuid_comparison_exp
  twitter_account: twitter_accounts_bool_exp
  twitter_account_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "person_twitter_accounts"
"""
enum person_twitter_accounts_constraint {
  """
  unique or primary key constraint on columns "twitter_account_id", "person_id"
  """
  v2_person_twitter_accounts_person_id_twitter_account_id_key

  """
  unique or primary key constraint on columns "id"
  """
  v2_person_twitter_accounts_pkey
}

"""
input type for inserting data into table "person_twitter_accounts"
"""
input person_twitter_accounts_insert_input {
  created_at: timestamptz
  id: uuid
  person: persons_obj_rel_insert_input
  person_id: uuid
  twitter_account: twitter_accounts_obj_rel_insert_input
  twitter_account_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type person_twitter_accounts_max_fields {
  created_at: timestamptz
  id: uuid
  person_id: uuid
  twitter_account_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "person_twitter_accounts"
"""
input person_twitter_accounts_max_order_by {
  created_at: order_by
  id: order_by
  person_id: order_by
  twitter_account_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type person_twitter_accounts_min_fields {
  created_at: timestamptz
  id: uuid
  person_id: uuid
  twitter_account_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "person_twitter_accounts"
"""
input person_twitter_accounts_min_order_by {
  created_at: order_by
  id: order_by
  person_id: order_by
  twitter_account_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "person_twitter_accounts"
"""
type person_twitter_accounts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [person_twitter_accounts!]!
}

"""
on_conflict condition type for table "person_twitter_accounts"
"""
input person_twitter_accounts_on_conflict {
  constraint: person_twitter_accounts_constraint!
  update_columns: [person_twitter_accounts_update_column!]! = []
  where: person_twitter_accounts_bool_exp
}

"""Ordering options when selecting data from "person_twitter_accounts"."""
input person_twitter_accounts_order_by {
  created_at: order_by
  id: order_by
  person: persons_order_by
  person_id: order_by
  twitter_account: twitter_accounts_order_by
  twitter_account_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: person_twitter_accounts"""
input person_twitter_accounts_pk_columns_input {
  id: uuid!
}

"""
select columns of table "person_twitter_accounts"
"""
enum person_twitter_accounts_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  person_id

  """column name"""
  twitter_account_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "person_twitter_accounts"
"""
input person_twitter_accounts_set_input {
  created_at: timestamptz
  id: uuid
  person_id: uuid
  twitter_account_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "person_twitter_accounts"
"""
input person_twitter_accounts_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: person_twitter_accounts_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input person_twitter_accounts_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  person_id: uuid
  twitter_account_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "person_twitter_accounts"
"""
enum person_twitter_accounts_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  person_id

  """column name"""
  twitter_account_id

  """column name"""
  updated_at
}

input person_twitter_accounts_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: person_twitter_accounts_set_input

  """filter the rows which have to be updated"""
  where: person_twitter_accounts_bool_exp!
}

"""
columns and relationships of "person_youtube_channels"
"""
type person_youtube_channels {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  person: persons!
  person_id: uuid!
  updated_at: timestamptz!

  """An object relationship"""
  youtube_channel: youtube_channels!
  youtube_channel_id: uuid!
}

"""
aggregated selection of "person_youtube_channels"
"""
type person_youtube_channels_aggregate {
  aggregate: person_youtube_channels_aggregate_fields
  nodes: [person_youtube_channels!]!
}

input person_youtube_channels_aggregate_bool_exp {
  count: person_youtube_channels_aggregate_bool_exp_count
}

input person_youtube_channels_aggregate_bool_exp_count {
  arguments: [person_youtube_channels_select_column!]
  distinct: Boolean
  filter: person_youtube_channels_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "person_youtube_channels"
"""
type person_youtube_channels_aggregate_fields {
  count(columns: [person_youtube_channels_select_column!], distinct: Boolean): Int!
  max: person_youtube_channels_max_fields
  min: person_youtube_channels_min_fields
}

"""
order by aggregate values of table "person_youtube_channels"
"""
input person_youtube_channels_aggregate_order_by {
  count: order_by
  max: person_youtube_channels_max_order_by
  min: person_youtube_channels_min_order_by
}

"""
input type for inserting array relation for remote table "person_youtube_channels"
"""
input person_youtube_channels_arr_rel_insert_input {
  data: [person_youtube_channels_insert_input!]!

  """upsert condition"""
  on_conflict: person_youtube_channels_on_conflict
}

"""
Boolean expression to filter rows from the table "person_youtube_channels". All fields are combined with a logical 'AND'.
"""
input person_youtube_channels_bool_exp {
  _and: [person_youtube_channels_bool_exp!]
  _not: person_youtube_channels_bool_exp
  _or: [person_youtube_channels_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  person: persons_bool_exp
  person_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  youtube_channel: youtube_channels_bool_exp
  youtube_channel_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "person_youtube_channels"
"""
enum person_youtube_channels_constraint {
  """
  unique or primary key constraint on columns "youtube_channel_id", "person_id"
  """
  v2_person_youtube_channels_person_id_youtube_channel_id_key

  """
  unique or primary key constraint on columns "id"
  """
  v2_person_youtube_channels_pkey
}

"""
input type for inserting data into table "person_youtube_channels"
"""
input person_youtube_channels_insert_input {
  created_at: timestamptz
  id: uuid
  person: persons_obj_rel_insert_input
  person_id: uuid
  updated_at: timestamptz
  youtube_channel: youtube_channels_obj_rel_insert_input
  youtube_channel_id: uuid
}

"""aggregate max on columns"""
type person_youtube_channels_max_fields {
  created_at: timestamptz
  id: uuid
  person_id: uuid
  updated_at: timestamptz
  youtube_channel_id: uuid
}

"""
order by max() on columns of table "person_youtube_channels"
"""
input person_youtube_channels_max_order_by {
  created_at: order_by
  id: order_by
  person_id: order_by
  updated_at: order_by
  youtube_channel_id: order_by
}

"""aggregate min on columns"""
type person_youtube_channels_min_fields {
  created_at: timestamptz
  id: uuid
  person_id: uuid
  updated_at: timestamptz
  youtube_channel_id: uuid
}

"""
order by min() on columns of table "person_youtube_channels"
"""
input person_youtube_channels_min_order_by {
  created_at: order_by
  id: order_by
  person_id: order_by
  updated_at: order_by
  youtube_channel_id: order_by
}

"""
response of any mutation on the table "person_youtube_channels"
"""
type person_youtube_channels_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [person_youtube_channels!]!
}

"""
on_conflict condition type for table "person_youtube_channels"
"""
input person_youtube_channels_on_conflict {
  constraint: person_youtube_channels_constraint!
  update_columns: [person_youtube_channels_update_column!]! = []
  where: person_youtube_channels_bool_exp
}

"""Ordering options when selecting data from "person_youtube_channels"."""
input person_youtube_channels_order_by {
  created_at: order_by
  id: order_by
  person: persons_order_by
  person_id: order_by
  updated_at: order_by
  youtube_channel: youtube_channels_order_by
  youtube_channel_id: order_by
}

"""primary key columns input for table: person_youtube_channels"""
input person_youtube_channels_pk_columns_input {
  id: uuid!
}

"""
select columns of table "person_youtube_channels"
"""
enum person_youtube_channels_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  person_id

  """column name"""
  updated_at

  """column name"""
  youtube_channel_id
}

"""
input type for updating data in table "person_youtube_channels"
"""
input person_youtube_channels_set_input {
  created_at: timestamptz
  id: uuid
  person_id: uuid
  updated_at: timestamptz
  youtube_channel_id: uuid
}

"""
Streaming cursor of the table "person_youtube_channels"
"""
input person_youtube_channels_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: person_youtube_channels_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input person_youtube_channels_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  person_id: uuid
  updated_at: timestamptz
  youtube_channel_id: uuid
}

"""
update columns of table "person_youtube_channels"
"""
enum person_youtube_channels_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  person_id

  """column name"""
  updated_at

  """column name"""
  youtube_channel_id
}

input person_youtube_channels_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: person_youtube_channels_set_input

  """filter the rows which have to be updated"""
  where: person_youtube_channels_bool_exp!
}

"""
columns and relationships of "persons"
"""
type persons {
  created_at: timestamptz!

  """An array relationship"""
  fallguys_custom_rounds(
    """distinct select on columns"""
    distinct_on: [fallguys_custom_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_custom_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_custom_rounds_bool_exp
  ): [fallguys_custom_rounds!]!

  """An aggregate relationship"""
  fallguys_custom_rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [fallguys_custom_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_custom_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_custom_rounds_bool_exp
  ): fallguys_custom_rounds_aggregate!
  id: uuid!
  name: String!

  """An array relationship"""
  person_fediverse_accounts(
    """distinct select on columns"""
    distinct_on: [person_fediverse_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_fediverse_accounts_order_by!]

    """filter the rows returned"""
    where: person_fediverse_accounts_bool_exp
  ): [person_fediverse_accounts!]!

  """An aggregate relationship"""
  person_fediverse_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [person_fediverse_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_fediverse_accounts_order_by!]

    """filter the rows returned"""
    where: person_fediverse_accounts_bool_exp
  ): person_fediverse_accounts_aggregate!

  """An array relationship"""
  person_niconico_accounts(
    """distinct select on columns"""
    distinct_on: [person_niconico_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_accounts_order_by!]

    """filter the rows returned"""
    where: person_niconico_accounts_bool_exp
  ): [person_niconico_accounts!]!

  """An aggregate relationship"""
  person_niconico_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [person_niconico_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_accounts_order_by!]

    """filter the rows returned"""
    where: person_niconico_accounts_bool_exp
  ): person_niconico_accounts_aggregate!

  """An array relationship"""
  person_niconico_channels(
    """distinct select on columns"""
    distinct_on: [person_niconico_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_channels_order_by!]

    """filter the rows returned"""
    where: person_niconico_channels_bool_exp
  ): [person_niconico_channels!]!

  """An aggregate relationship"""
  person_niconico_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [person_niconico_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_channels_order_by!]

    """filter the rows returned"""
    where: person_niconico_channels_bool_exp
  ): person_niconico_channels_aggregate!

  """An array relationship"""
  person_niconico_communities(
    """distinct select on columns"""
    distinct_on: [person_niconico_communities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_communities_order_by!]

    """filter the rows returned"""
    where: person_niconico_communities_bool_exp
  ): [person_niconico_communities!]!

  """An aggregate relationship"""
  person_niconico_communities_aggregate(
    """distinct select on columns"""
    distinct_on: [person_niconico_communities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_communities_order_by!]

    """filter the rows returned"""
    where: person_niconico_communities_bool_exp
  ): person_niconico_communities_aggregate!

  """An array relationship"""
  person_niconico_plus_channels(
    """distinct select on columns"""
    distinct_on: [person_niconico_plus_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_plus_channels_order_by!]

    """filter the rows returned"""
    where: person_niconico_plus_channels_bool_exp
  ): [person_niconico_plus_channels!]!

  """An aggregate relationship"""
  person_niconico_plus_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [person_niconico_plus_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_plus_channels_order_by!]

    """filter the rows returned"""
    where: person_niconico_plus_channels_bool_exp
  ): person_niconico_plus_channels_aggregate!

  """An array relationship"""
  person_twitter_accounts(
    """distinct select on columns"""
    distinct_on: [person_twitter_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_twitter_accounts_order_by!]

    """filter the rows returned"""
    where: person_twitter_accounts_bool_exp
  ): [person_twitter_accounts!]!

  """An aggregate relationship"""
  person_twitter_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [person_twitter_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_twitter_accounts_order_by!]

    """filter the rows returned"""
    where: person_twitter_accounts_bool_exp
  ): person_twitter_accounts_aggregate!

  """An array relationship"""
  person_youtube_channels(
    """distinct select on columns"""
    distinct_on: [person_youtube_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_youtube_channels_order_by!]

    """filter the rows returned"""
    where: person_youtube_channels_bool_exp
  ): [person_youtube_channels!]!

  """An aggregate relationship"""
  person_youtube_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [person_youtube_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_youtube_channels_order_by!]

    """filter the rows returned"""
    where: person_youtube_channels_bool_exp
  ): person_youtube_channels_aggregate!

  """An array relationship"""
  program_persons(
    """distinct select on columns"""
    distinct_on: [program_persons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_persons_order_by!]

    """filter the rows returned"""
    where: program_persons_bool_exp
  ): [program_persons!]!

  """An aggregate relationship"""
  program_persons_aggregate(
    """distinct select on columns"""
    distinct_on: [program_persons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_persons_order_by!]

    """filter the rows returned"""
    where: program_persons_bool_exp
  ): program_persons_aggregate!
  updated_at: timestamptz!
}

"""
aggregated selection of "persons"
"""
type persons_aggregate {
  aggregate: persons_aggregate_fields
  nodes: [persons!]!
}

"""
aggregate fields of "persons"
"""
type persons_aggregate_fields {
  count(columns: [persons_select_column!], distinct: Boolean): Int!
  max: persons_max_fields
  min: persons_min_fields
}

"""
Boolean expression to filter rows from the table "persons". All fields are combined with a logical 'AND'.
"""
input persons_bool_exp {
  _and: [persons_bool_exp!]
  _not: persons_bool_exp
  _or: [persons_bool_exp!]
  created_at: timestamptz_comparison_exp
  fallguys_custom_rounds: fallguys_custom_rounds_bool_exp
  fallguys_custom_rounds_aggregate: fallguys_custom_rounds_aggregate_bool_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  person_fediverse_accounts: person_fediverse_accounts_bool_exp
  person_fediverse_accounts_aggregate: person_fediverse_accounts_aggregate_bool_exp
  person_niconico_accounts: person_niconico_accounts_bool_exp
  person_niconico_accounts_aggregate: person_niconico_accounts_aggregate_bool_exp
  person_niconico_channels: person_niconico_channels_bool_exp
  person_niconico_channels_aggregate: person_niconico_channels_aggregate_bool_exp
  person_niconico_communities: person_niconico_communities_bool_exp
  person_niconico_communities_aggregate: person_niconico_communities_aggregate_bool_exp
  person_niconico_plus_channels: person_niconico_plus_channels_bool_exp
  person_niconico_plus_channels_aggregate: person_niconico_plus_channels_aggregate_bool_exp
  person_twitter_accounts: person_twitter_accounts_bool_exp
  person_twitter_accounts_aggregate: person_twitter_accounts_aggregate_bool_exp
  person_youtube_channels: person_youtube_channels_bool_exp
  person_youtube_channels_aggregate: person_youtube_channels_aggregate_bool_exp
  program_persons: program_persons_bool_exp
  program_persons_aggregate: program_persons_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "persons"
"""
enum persons_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  members_pkey
}

"""
input type for inserting data into table "persons"
"""
input persons_insert_input {
  created_at: timestamptz
  fallguys_custom_rounds: fallguys_custom_rounds_arr_rel_insert_input
  id: uuid
  name: String
  person_fediverse_accounts: person_fediverse_accounts_arr_rel_insert_input
  person_niconico_accounts: person_niconico_accounts_arr_rel_insert_input
  person_niconico_channels: person_niconico_channels_arr_rel_insert_input
  person_niconico_communities: person_niconico_communities_arr_rel_insert_input
  person_niconico_plus_channels: person_niconico_plus_channels_arr_rel_insert_input
  person_twitter_accounts: person_twitter_accounts_arr_rel_insert_input
  person_youtube_channels: person_youtube_channels_arr_rel_insert_input
  program_persons: program_persons_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type persons_max_fields {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type persons_min_fields {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "persons"
"""
type persons_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [persons!]!
}

"""
input type for inserting object relation for remote table "persons"
"""
input persons_obj_rel_insert_input {
  data: persons_insert_input!

  """upsert condition"""
  on_conflict: persons_on_conflict
}

"""
on_conflict condition type for table "persons"
"""
input persons_on_conflict {
  constraint: persons_constraint!
  update_columns: [persons_update_column!]! = []
  where: persons_bool_exp
}

"""Ordering options when selecting data from "persons"."""
input persons_order_by {
  created_at: order_by
  fallguys_custom_rounds_aggregate: fallguys_custom_rounds_aggregate_order_by
  id: order_by
  name: order_by
  person_fediverse_accounts_aggregate: person_fediverse_accounts_aggregate_order_by
  person_niconico_accounts_aggregate: person_niconico_accounts_aggregate_order_by
  person_niconico_channels_aggregate: person_niconico_channels_aggregate_order_by
  person_niconico_communities_aggregate: person_niconico_communities_aggregate_order_by
  person_niconico_plus_channels_aggregate: person_niconico_plus_channels_aggregate_order_by
  person_twitter_accounts_aggregate: person_twitter_accounts_aggregate_order_by
  person_youtube_channels_aggregate: person_youtube_channels_aggregate_order_by
  program_persons_aggregate: program_persons_aggregate_order_by
  updated_at: order_by
}

"""primary key columns input for table: persons"""
input persons_pk_columns_input {
  id: uuid!
}

"""
select columns of table "persons"
"""
enum persons_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "persons"
"""
input persons_set_input {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "persons"
"""
input persons_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: persons_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input persons_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
update columns of table "persons"
"""
enum persons_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

input persons_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: persons_set_input

  """filter the rows which have to be updated"""
  where: persons_bool_exp!
}

"""
columns and relationships of "program_amongus_maps"
"""
type program_amongus_maps {
  """An object relationship"""
  amongus_map: amongus_maps!
  amongus_map_id: uuid!
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  program: programs!
  program_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "program_amongus_maps"
"""
type program_amongus_maps_aggregate {
  aggregate: program_amongus_maps_aggregate_fields
  nodes: [program_amongus_maps!]!
}

input program_amongus_maps_aggregate_bool_exp {
  count: program_amongus_maps_aggregate_bool_exp_count
}

input program_amongus_maps_aggregate_bool_exp_count {
  arguments: [program_amongus_maps_select_column!]
  distinct: Boolean
  filter: program_amongus_maps_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "program_amongus_maps"
"""
type program_amongus_maps_aggregate_fields {
  count(columns: [program_amongus_maps_select_column!], distinct: Boolean): Int!
  max: program_amongus_maps_max_fields
  min: program_amongus_maps_min_fields
}

"""
order by aggregate values of table "program_amongus_maps"
"""
input program_amongus_maps_aggregate_order_by {
  count: order_by
  max: program_amongus_maps_max_order_by
  min: program_amongus_maps_min_order_by
}

"""
input type for inserting array relation for remote table "program_amongus_maps"
"""
input program_amongus_maps_arr_rel_insert_input {
  data: [program_amongus_maps_insert_input!]!

  """upsert condition"""
  on_conflict: program_amongus_maps_on_conflict
}

"""
Boolean expression to filter rows from the table "program_amongus_maps". All fields are combined with a logical 'AND'.
"""
input program_amongus_maps_bool_exp {
  _and: [program_amongus_maps_bool_exp!]
  _not: program_amongus_maps_bool_exp
  _or: [program_amongus_maps_bool_exp!]
  amongus_map: amongus_maps_bool_exp
  amongus_map_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  program: programs_bool_exp
  program_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "program_amongus_maps"
"""
enum program_amongus_maps_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  program_amongus_maps_pkey

  """
  unique or primary key constraint on columns "amongus_map_id", "program_id"
  """
  program_amongus_maps_program_id_amongus_map_id_key
}

"""
input type for inserting data into table "program_amongus_maps"
"""
input program_amongus_maps_insert_input {
  amongus_map: amongus_maps_obj_rel_insert_input
  amongus_map_id: uuid
  created_at: timestamptz
  id: uuid
  program: programs_obj_rel_insert_input
  program_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type program_amongus_maps_max_fields {
  amongus_map_id: uuid
  created_at: timestamptz
  id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "program_amongus_maps"
"""
input program_amongus_maps_max_order_by {
  amongus_map_id: order_by
  created_at: order_by
  id: order_by
  program_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type program_amongus_maps_min_fields {
  amongus_map_id: uuid
  created_at: timestamptz
  id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "program_amongus_maps"
"""
input program_amongus_maps_min_order_by {
  amongus_map_id: order_by
  created_at: order_by
  id: order_by
  program_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "program_amongus_maps"
"""
type program_amongus_maps_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [program_amongus_maps!]!
}

"""
on_conflict condition type for table "program_amongus_maps"
"""
input program_amongus_maps_on_conflict {
  constraint: program_amongus_maps_constraint!
  update_columns: [program_amongus_maps_update_column!]! = []
  where: program_amongus_maps_bool_exp
}

"""Ordering options when selecting data from "program_amongus_maps"."""
input program_amongus_maps_order_by {
  amongus_map: amongus_maps_order_by
  amongus_map_id: order_by
  created_at: order_by
  id: order_by
  program: programs_order_by
  program_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: program_amongus_maps"""
input program_amongus_maps_pk_columns_input {
  id: uuid!
}

"""
select columns of table "program_amongus_maps"
"""
enum program_amongus_maps_select_column {
  """column name"""
  amongus_map_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  program_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "program_amongus_maps"
"""
input program_amongus_maps_set_input {
  amongus_map_id: uuid
  created_at: timestamptz
  id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "program_amongus_maps"
"""
input program_amongus_maps_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: program_amongus_maps_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input program_amongus_maps_stream_cursor_value_input {
  amongus_map_id: uuid
  created_at: timestamptz
  id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "program_amongus_maps"
"""
enum program_amongus_maps_update_column {
  """column name"""
  amongus_map_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  program_id

  """column name"""
  updated_at
}

input program_amongus_maps_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: program_amongus_maps_set_input

  """filter the rows which have to be updated"""
  where: program_amongus_maps_bool_exp!
}

"""
columns and relationships of "program_amongus_mods"
"""
type program_amongus_mods {
  """An object relationship"""
  amongus_mod: amongus_mods!
  amongus_mod_id: uuid!

  """An object relationship"""
  amongus_mod_version: amongus_mod_versions
  amongus_mod_version_id: uuid
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  program: programs!
  program_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "program_amongus_mods"
"""
type program_amongus_mods_aggregate {
  aggregate: program_amongus_mods_aggregate_fields
  nodes: [program_amongus_mods!]!
}

input program_amongus_mods_aggregate_bool_exp {
  count: program_amongus_mods_aggregate_bool_exp_count
}

input program_amongus_mods_aggregate_bool_exp_count {
  arguments: [program_amongus_mods_select_column!]
  distinct: Boolean
  filter: program_amongus_mods_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "program_amongus_mods"
"""
type program_amongus_mods_aggregate_fields {
  count(columns: [program_amongus_mods_select_column!], distinct: Boolean): Int!
  max: program_amongus_mods_max_fields
  min: program_amongus_mods_min_fields
}

"""
order by aggregate values of table "program_amongus_mods"
"""
input program_amongus_mods_aggregate_order_by {
  count: order_by
  max: program_amongus_mods_max_order_by
  min: program_amongus_mods_min_order_by
}

"""
input type for inserting array relation for remote table "program_amongus_mods"
"""
input program_amongus_mods_arr_rel_insert_input {
  data: [program_amongus_mods_insert_input!]!

  """upsert condition"""
  on_conflict: program_amongus_mods_on_conflict
}

"""
Boolean expression to filter rows from the table "program_amongus_mods". All fields are combined with a logical 'AND'.
"""
input program_amongus_mods_bool_exp {
  _and: [program_amongus_mods_bool_exp!]
  _not: program_amongus_mods_bool_exp
  _or: [program_amongus_mods_bool_exp!]
  amongus_mod: amongus_mods_bool_exp
  amongus_mod_id: uuid_comparison_exp
  amongus_mod_version: amongus_mod_versions_bool_exp
  amongus_mod_version_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  program: programs_bool_exp
  program_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "program_amongus_mods"
"""
enum program_amongus_mods_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  program_amongus_mods_pkey

  """
  unique or primary key constraint on columns "amongus_mod_version_id", "amongus_mod_id", "program_id"
  """
  program_amongus_mods_program_id_amongus_mod_id_amongus_mod__key

  """
  unique or primary key constraint on columns "amongus_mod_id", "program_id"
  """
  program_amongus_mods_program_id_amongus_mod_id_key
}

"""
input type for inserting data into table "program_amongus_mods"
"""
input program_amongus_mods_insert_input {
  amongus_mod: amongus_mods_obj_rel_insert_input
  amongus_mod_id: uuid
  amongus_mod_version: amongus_mod_versions_obj_rel_insert_input
  amongus_mod_version_id: uuid
  created_at: timestamptz
  id: uuid
  program: programs_obj_rel_insert_input
  program_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type program_amongus_mods_max_fields {
  amongus_mod_id: uuid
  amongus_mod_version_id: uuid
  created_at: timestamptz
  id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "program_amongus_mods"
"""
input program_amongus_mods_max_order_by {
  amongus_mod_id: order_by
  amongus_mod_version_id: order_by
  created_at: order_by
  id: order_by
  program_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type program_amongus_mods_min_fields {
  amongus_mod_id: uuid
  amongus_mod_version_id: uuid
  created_at: timestamptz
  id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "program_amongus_mods"
"""
input program_amongus_mods_min_order_by {
  amongus_mod_id: order_by
  amongus_mod_version_id: order_by
  created_at: order_by
  id: order_by
  program_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "program_amongus_mods"
"""
type program_amongus_mods_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [program_amongus_mods!]!
}

"""
on_conflict condition type for table "program_amongus_mods"
"""
input program_amongus_mods_on_conflict {
  constraint: program_amongus_mods_constraint!
  update_columns: [program_amongus_mods_update_column!]! = []
  where: program_amongus_mods_bool_exp
}

"""Ordering options when selecting data from "program_amongus_mods"."""
input program_amongus_mods_order_by {
  amongus_mod: amongus_mods_order_by
  amongus_mod_id: order_by
  amongus_mod_version: amongus_mod_versions_order_by
  amongus_mod_version_id: order_by
  created_at: order_by
  id: order_by
  program: programs_order_by
  program_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: program_amongus_mods"""
input program_amongus_mods_pk_columns_input {
  id: uuid!
}

"""
select columns of table "program_amongus_mods"
"""
enum program_amongus_mods_select_column {
  """column name"""
  amongus_mod_id

  """column name"""
  amongus_mod_version_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  program_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "program_amongus_mods"
"""
input program_amongus_mods_set_input {
  amongus_mod_id: uuid
  amongus_mod_version_id: uuid
  created_at: timestamptz
  id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "program_amongus_mods"
"""
input program_amongus_mods_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: program_amongus_mods_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input program_amongus_mods_stream_cursor_value_input {
  amongus_mod_id: uuid
  amongus_mod_version_id: uuid
  created_at: timestamptz
  id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "program_amongus_mods"
"""
enum program_amongus_mods_update_column {
  """column name"""
  amongus_mod_id

  """column name"""
  amongus_mod_version_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  program_id

  """column name"""
  updated_at
}

input program_amongus_mods_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: program_amongus_mods_set_input

  """filter the rows which have to be updated"""
  where: program_amongus_mods_bool_exp!
}

"""
columns and relationships of "program_amongus_vanilla_versions"
"""
type program_amongus_vanilla_versions {
  """An object relationship"""
  amongus_vanilla_version: amongus_vanilla_versions!
  amongus_vanilla_version_id: uuid!
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  program: programs!
  program_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "program_amongus_vanilla_versions"
"""
type program_amongus_vanilla_versions_aggregate {
  aggregate: program_amongus_vanilla_versions_aggregate_fields
  nodes: [program_amongus_vanilla_versions!]!
}

input program_amongus_vanilla_versions_aggregate_bool_exp {
  count: program_amongus_vanilla_versions_aggregate_bool_exp_count
}

input program_amongus_vanilla_versions_aggregate_bool_exp_count {
  arguments: [program_amongus_vanilla_versions_select_column!]
  distinct: Boolean
  filter: program_amongus_vanilla_versions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "program_amongus_vanilla_versions"
"""
type program_amongus_vanilla_versions_aggregate_fields {
  count(columns: [program_amongus_vanilla_versions_select_column!], distinct: Boolean): Int!
  max: program_amongus_vanilla_versions_max_fields
  min: program_amongus_vanilla_versions_min_fields
}

"""
order by aggregate values of table "program_amongus_vanilla_versions"
"""
input program_amongus_vanilla_versions_aggregate_order_by {
  count: order_by
  max: program_amongus_vanilla_versions_max_order_by
  min: program_amongus_vanilla_versions_min_order_by
}

"""
input type for inserting array relation for remote table "program_amongus_vanilla_versions"
"""
input program_amongus_vanilla_versions_arr_rel_insert_input {
  data: [program_amongus_vanilla_versions_insert_input!]!

  """upsert condition"""
  on_conflict: program_amongus_vanilla_versions_on_conflict
}

"""
Boolean expression to filter rows from the table "program_amongus_vanilla_versions". All fields are combined with a logical 'AND'.
"""
input program_amongus_vanilla_versions_bool_exp {
  _and: [program_amongus_vanilla_versions_bool_exp!]
  _not: program_amongus_vanilla_versions_bool_exp
  _or: [program_amongus_vanilla_versions_bool_exp!]
  amongus_vanilla_version: amongus_vanilla_versions_bool_exp
  amongus_vanilla_version_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  program: programs_bool_exp
  program_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "program_amongus_vanilla_versions"
"""
enum program_amongus_vanilla_versions_constraint {
  """
  unique or primary key constraint on columns "program_id", "amongus_vanilla_version_id"
  """
  program_amongus_vanilla_versi_program_id_amongus_vanilla_ve_key

  """
  unique or primary key constraint on columns "id"
  """
  program_amongus_vanilla_versions_pkey
}

"""
input type for inserting data into table "program_amongus_vanilla_versions"
"""
input program_amongus_vanilla_versions_insert_input {
  amongus_vanilla_version: amongus_vanilla_versions_obj_rel_insert_input
  amongus_vanilla_version_id: uuid
  created_at: timestamptz
  id: uuid
  program: programs_obj_rel_insert_input
  program_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type program_amongus_vanilla_versions_max_fields {
  amongus_vanilla_version_id: uuid
  created_at: timestamptz
  id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "program_amongus_vanilla_versions"
"""
input program_amongus_vanilla_versions_max_order_by {
  amongus_vanilla_version_id: order_by
  created_at: order_by
  id: order_by
  program_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type program_amongus_vanilla_versions_min_fields {
  amongus_vanilla_version_id: uuid
  created_at: timestamptz
  id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "program_amongus_vanilla_versions"
"""
input program_amongus_vanilla_versions_min_order_by {
  amongus_vanilla_version_id: order_by
  created_at: order_by
  id: order_by
  program_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "program_amongus_vanilla_versions"
"""
type program_amongus_vanilla_versions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [program_amongus_vanilla_versions!]!
}

"""
on_conflict condition type for table "program_amongus_vanilla_versions"
"""
input program_amongus_vanilla_versions_on_conflict {
  constraint: program_amongus_vanilla_versions_constraint!
  update_columns: [program_amongus_vanilla_versions_update_column!]! = []
  where: program_amongus_vanilla_versions_bool_exp
}

"""
Ordering options when selecting data from "program_amongus_vanilla_versions".
"""
input program_amongus_vanilla_versions_order_by {
  amongus_vanilla_version: amongus_vanilla_versions_order_by
  amongus_vanilla_version_id: order_by
  created_at: order_by
  id: order_by
  program: programs_order_by
  program_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: program_amongus_vanilla_versions"""
input program_amongus_vanilla_versions_pk_columns_input {
  id: uuid!
}

"""
select columns of table "program_amongus_vanilla_versions"
"""
enum program_amongus_vanilla_versions_select_column {
  """column name"""
  amongus_vanilla_version_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  program_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "program_amongus_vanilla_versions"
"""
input program_amongus_vanilla_versions_set_input {
  amongus_vanilla_version_id: uuid
  created_at: timestamptz
  id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "program_amongus_vanilla_versions"
"""
input program_amongus_vanilla_versions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: program_amongus_vanilla_versions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input program_amongus_vanilla_versions_stream_cursor_value_input {
  amongus_vanilla_version_id: uuid
  created_at: timestamptz
  id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "program_amongus_vanilla_versions"
"""
enum program_amongus_vanilla_versions_update_column {
  """column name"""
  amongus_vanilla_version_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  program_id

  """column name"""
  updated_at
}

input program_amongus_vanilla_versions_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: program_amongus_vanilla_versions_set_input

  """filter the rows which have to be updated"""
  where: program_amongus_vanilla_versions_bool_exp!
}

"""
columns and relationships of "program_live_archives"
"""
type program_live_archives {
  created_at: timestamptz!
  end_time: timestamptz
  id: uuid!

  """An object relationship"""
  person: persons!
  person_id: uuid!

  """An object relationship"""
  program: programs!
  program_id: uuid!
  start_time: timestamptz
  updated_at: timestamptz!

  """An object relationship"""
  youtube_live: youtube_lives
  youtube_live_id: uuid

  """An object relationship"""
  youtube_video: youtube_videos
  youtube_video_id: uuid
}

"""
aggregated selection of "program_live_archives"
"""
type program_live_archives_aggregate {
  aggregate: program_live_archives_aggregate_fields
  nodes: [program_live_archives!]!
}

input program_live_archives_aggregate_bool_exp {
  count: program_live_archives_aggregate_bool_exp_count
}

input program_live_archives_aggregate_bool_exp_count {
  arguments: [program_live_archives_select_column!]
  distinct: Boolean
  filter: program_live_archives_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "program_live_archives"
"""
type program_live_archives_aggregate_fields {
  count(columns: [program_live_archives_select_column!], distinct: Boolean): Int!
  max: program_live_archives_max_fields
  min: program_live_archives_min_fields
}

"""
order by aggregate values of table "program_live_archives"
"""
input program_live_archives_aggregate_order_by {
  count: order_by
  max: program_live_archives_max_order_by
  min: program_live_archives_min_order_by
}

"""
input type for inserting array relation for remote table "program_live_archives"
"""
input program_live_archives_arr_rel_insert_input {
  data: [program_live_archives_insert_input!]!

  """upsert condition"""
  on_conflict: program_live_archives_on_conflict
}

"""
Boolean expression to filter rows from the table "program_live_archives". All fields are combined with a logical 'AND'.
"""
input program_live_archives_bool_exp {
  _and: [program_live_archives_bool_exp!]
  _not: program_live_archives_bool_exp
  _or: [program_live_archives_bool_exp!]
  created_at: timestamptz_comparison_exp
  end_time: timestamptz_comparison_exp
  id: uuid_comparison_exp
  person: persons_bool_exp
  person_id: uuid_comparison_exp
  program: programs_bool_exp
  program_id: uuid_comparison_exp
  start_time: timestamptz_comparison_exp
  updated_at: timestamptz_comparison_exp
  youtube_live: youtube_lives_bool_exp
  youtube_live_id: uuid_comparison_exp
  youtube_video: youtube_videos_bool_exp
  youtube_video_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "program_live_archives"
"""
enum program_live_archives_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  program_live_archives_pkey

  """
  unique or primary key constraint on columns "program_id", "youtube_live_id"
  """
  program_live_archives_program_id_youtube_live_id_key

  """
  unique or primary key constraint on columns "program_id", "youtube_video_id"
  """
  program_live_archives_program_id_youtube_video_id_key
}

"""
input type for inserting data into table "program_live_archives"
"""
input program_live_archives_insert_input {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  person: persons_obj_rel_insert_input
  person_id: uuid
  program: programs_obj_rel_insert_input
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
  youtube_live: youtube_lives_obj_rel_insert_input
  youtube_live_id: uuid
  youtube_video: youtube_videos_obj_rel_insert_input
  youtube_video_id: uuid
}

"""aggregate max on columns"""
type program_live_archives_max_fields {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  person_id: uuid
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
  youtube_live_id: uuid
  youtube_video_id: uuid
}

"""
order by max() on columns of table "program_live_archives"
"""
input program_live_archives_max_order_by {
  created_at: order_by
  end_time: order_by
  id: order_by
  person_id: order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
  youtube_live_id: order_by
  youtube_video_id: order_by
}

"""aggregate min on columns"""
type program_live_archives_min_fields {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  person_id: uuid
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
  youtube_live_id: uuid
  youtube_video_id: uuid
}

"""
order by min() on columns of table "program_live_archives"
"""
input program_live_archives_min_order_by {
  created_at: order_by
  end_time: order_by
  id: order_by
  person_id: order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
  youtube_live_id: order_by
  youtube_video_id: order_by
}

"""
response of any mutation on the table "program_live_archives"
"""
type program_live_archives_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [program_live_archives!]!
}

"""
on_conflict condition type for table "program_live_archives"
"""
input program_live_archives_on_conflict {
  constraint: program_live_archives_constraint!
  update_columns: [program_live_archives_update_column!]! = []
  where: program_live_archives_bool_exp
}

"""Ordering options when selecting data from "program_live_archives"."""
input program_live_archives_order_by {
  created_at: order_by
  end_time: order_by
  id: order_by
  person: persons_order_by
  person_id: order_by
  program: programs_order_by
  program_id: order_by
  start_time: order_by
  updated_at: order_by
  youtube_live: youtube_lives_order_by
  youtube_live_id: order_by
  youtube_video: youtube_videos_order_by
  youtube_video_id: order_by
}

"""primary key columns input for table: program_live_archives"""
input program_live_archives_pk_columns_input {
  id: uuid!
}

"""
select columns of table "program_live_archives"
"""
enum program_live_archives_select_column {
  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  person_id

  """column name"""
  program_id

  """column name"""
  start_time

  """column name"""
  updated_at

  """column name"""
  youtube_live_id

  """column name"""
  youtube_video_id
}

"""
input type for updating data in table "program_live_archives"
"""
input program_live_archives_set_input {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  person_id: uuid
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
  youtube_live_id: uuid
  youtube_video_id: uuid
}

"""
Streaming cursor of the table "program_live_archives"
"""
input program_live_archives_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: program_live_archives_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input program_live_archives_stream_cursor_value_input {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  person_id: uuid
  program_id: uuid
  start_time: timestamptz
  updated_at: timestamptz
  youtube_live_id: uuid
  youtube_video_id: uuid
}

"""
update columns of table "program_live_archives"
"""
enum program_live_archives_update_column {
  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  person_id

  """column name"""
  program_id

  """column name"""
  start_time

  """column name"""
  updated_at

  """column name"""
  youtube_live_id

  """column name"""
  youtube_video_id
}

input program_live_archives_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: program_live_archives_set_input

  """filter the rows which have to be updated"""
  where: program_live_archives_bool_exp!
}

"""
columns and relationships of "program_niconico_videos"
"""
type program_niconico_videos {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  niconico_video: niconico_videos!
  niconico_video_id: uuid!

  """An object relationship"""
  person: persons
  person_id: uuid

  """An object relationship"""
  program: programs!
  program_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "program_niconico_videos"
"""
type program_niconico_videos_aggregate {
  aggregate: program_niconico_videos_aggregate_fields
  nodes: [program_niconico_videos!]!
}

input program_niconico_videos_aggregate_bool_exp {
  count: program_niconico_videos_aggregate_bool_exp_count
}

input program_niconico_videos_aggregate_bool_exp_count {
  arguments: [program_niconico_videos_select_column!]
  distinct: Boolean
  filter: program_niconico_videos_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "program_niconico_videos"
"""
type program_niconico_videos_aggregate_fields {
  count(columns: [program_niconico_videos_select_column!], distinct: Boolean): Int!
  max: program_niconico_videos_max_fields
  min: program_niconico_videos_min_fields
}

"""
order by aggregate values of table "program_niconico_videos"
"""
input program_niconico_videos_aggregate_order_by {
  count: order_by
  max: program_niconico_videos_max_order_by
  min: program_niconico_videos_min_order_by
}

"""
input type for inserting array relation for remote table "program_niconico_videos"
"""
input program_niconico_videos_arr_rel_insert_input {
  data: [program_niconico_videos_insert_input!]!

  """upsert condition"""
  on_conflict: program_niconico_videos_on_conflict
}

"""
Boolean expression to filter rows from the table "program_niconico_videos". All fields are combined with a logical 'AND'.
"""
input program_niconico_videos_bool_exp {
  _and: [program_niconico_videos_bool_exp!]
  _not: program_niconico_videos_bool_exp
  _or: [program_niconico_videos_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  niconico_video: niconico_videos_bool_exp
  niconico_video_id: uuid_comparison_exp
  person: persons_bool_exp
  person_id: uuid_comparison_exp
  program: programs_bool_exp
  program_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "program_niconico_videos"
"""
enum program_niconico_videos_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  program_niconico_videos_pkey

  """
  unique or primary key constraint on columns "program_id", "niconico_video_id"
  """
  program_niconico_videos_program_id_niconico_video_id_key
}

"""
input type for inserting data into table "program_niconico_videos"
"""
input program_niconico_videos_insert_input {
  created_at: timestamptz
  id: uuid
  niconico_video: niconico_videos_obj_rel_insert_input
  niconico_video_id: uuid
  person: persons_obj_rel_insert_input
  person_id: uuid
  program: programs_obj_rel_insert_input
  program_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type program_niconico_videos_max_fields {
  created_at: timestamptz
  id: uuid
  niconico_video_id: uuid
  person_id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "program_niconico_videos"
"""
input program_niconico_videos_max_order_by {
  created_at: order_by
  id: order_by
  niconico_video_id: order_by
  person_id: order_by
  program_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type program_niconico_videos_min_fields {
  created_at: timestamptz
  id: uuid
  niconico_video_id: uuid
  person_id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "program_niconico_videos"
"""
input program_niconico_videos_min_order_by {
  created_at: order_by
  id: order_by
  niconico_video_id: order_by
  person_id: order_by
  program_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "program_niconico_videos"
"""
type program_niconico_videos_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [program_niconico_videos!]!
}

"""
on_conflict condition type for table "program_niconico_videos"
"""
input program_niconico_videos_on_conflict {
  constraint: program_niconico_videos_constraint!
  update_columns: [program_niconico_videos_update_column!]! = []
  where: program_niconico_videos_bool_exp
}

"""Ordering options when selecting data from "program_niconico_videos"."""
input program_niconico_videos_order_by {
  created_at: order_by
  id: order_by
  niconico_video: niconico_videos_order_by
  niconico_video_id: order_by
  person: persons_order_by
  person_id: order_by
  program: programs_order_by
  program_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: program_niconico_videos"""
input program_niconico_videos_pk_columns_input {
  id: uuid!
}

"""
select columns of table "program_niconico_videos"
"""
enum program_niconico_videos_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  niconico_video_id

  """column name"""
  person_id

  """column name"""
  program_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "program_niconico_videos"
"""
input program_niconico_videos_set_input {
  created_at: timestamptz
  id: uuid
  niconico_video_id: uuid
  person_id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "program_niconico_videos"
"""
input program_niconico_videos_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: program_niconico_videos_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input program_niconico_videos_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  niconico_video_id: uuid
  person_id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "program_niconico_videos"
"""
enum program_niconico_videos_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  niconico_video_id

  """column name"""
  person_id

  """column name"""
  program_id

  """column name"""
  updated_at
}

input program_niconico_videos_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: program_niconico_videos_set_input

  """filter the rows which have to be updated"""
  where: program_niconico_videos_bool_exp!
}

"""
columns and relationships of "program_persons"
"""
type program_persons {
  created_at: timestamptz!
  id: uuid!
  is_absent: Boolean

  """An object relationship"""
  person: persons!
  person_id: uuid!

  """An object relationship"""
  program: programs!
  program_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "program_persons"
"""
type program_persons_aggregate {
  aggregate: program_persons_aggregate_fields
  nodes: [program_persons!]!
}

input program_persons_aggregate_bool_exp {
  bool_and: program_persons_aggregate_bool_exp_bool_and
  bool_or: program_persons_aggregate_bool_exp_bool_or
  count: program_persons_aggregate_bool_exp_count
}

input program_persons_aggregate_bool_exp_bool_and {
  arguments: program_persons_select_column_program_persons_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: program_persons_bool_exp
  predicate: Boolean_comparison_exp!
}

input program_persons_aggregate_bool_exp_bool_or {
  arguments: program_persons_select_column_program_persons_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: program_persons_bool_exp
  predicate: Boolean_comparison_exp!
}

input program_persons_aggregate_bool_exp_count {
  arguments: [program_persons_select_column!]
  distinct: Boolean
  filter: program_persons_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "program_persons"
"""
type program_persons_aggregate_fields {
  count(columns: [program_persons_select_column!], distinct: Boolean): Int!
  max: program_persons_max_fields
  min: program_persons_min_fields
}

"""
order by aggregate values of table "program_persons"
"""
input program_persons_aggregate_order_by {
  count: order_by
  max: program_persons_max_order_by
  min: program_persons_min_order_by
}

"""
input type for inserting array relation for remote table "program_persons"
"""
input program_persons_arr_rel_insert_input {
  data: [program_persons_insert_input!]!

  """upsert condition"""
  on_conflict: program_persons_on_conflict
}

"""
Boolean expression to filter rows from the table "program_persons". All fields are combined with a logical 'AND'.
"""
input program_persons_bool_exp {
  _and: [program_persons_bool_exp!]
  _not: program_persons_bool_exp
  _or: [program_persons_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  is_absent: Boolean_comparison_exp
  person: persons_bool_exp
  person_id: uuid_comparison_exp
  program: programs_bool_exp
  program_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "program_persons"
"""
enum program_persons_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  program_persons_pkey

  """
  unique or primary key constraint on columns "program_id", "person_id"
  """
  program_persons_program_id_person_id_key
}

"""
input type for inserting data into table "program_persons"
"""
input program_persons_insert_input {
  created_at: timestamptz
  id: uuid
  is_absent: Boolean
  person: persons_obj_rel_insert_input
  person_id: uuid
  program: programs_obj_rel_insert_input
  program_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type program_persons_max_fields {
  created_at: timestamptz
  id: uuid
  person_id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "program_persons"
"""
input program_persons_max_order_by {
  created_at: order_by
  id: order_by
  person_id: order_by
  program_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type program_persons_min_fields {
  created_at: timestamptz
  id: uuid
  person_id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "program_persons"
"""
input program_persons_min_order_by {
  created_at: order_by
  id: order_by
  person_id: order_by
  program_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "program_persons"
"""
type program_persons_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [program_persons!]!
}

"""
on_conflict condition type for table "program_persons"
"""
input program_persons_on_conflict {
  constraint: program_persons_constraint!
  update_columns: [program_persons_update_column!]! = []
  where: program_persons_bool_exp
}

"""Ordering options when selecting data from "program_persons"."""
input program_persons_order_by {
  created_at: order_by
  id: order_by
  is_absent: order_by
  person: persons_order_by
  person_id: order_by
  program: programs_order_by
  program_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: program_persons"""
input program_persons_pk_columns_input {
  id: uuid!
}

"""
select columns of table "program_persons"
"""
enum program_persons_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  is_absent

  """column name"""
  person_id

  """column name"""
  program_id

  """column name"""
  updated_at
}

"""
select "program_persons_aggregate_bool_exp_bool_and_arguments_columns" columns of table "program_persons"
"""
enum program_persons_select_column_program_persons_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_absent
}

"""
select "program_persons_aggregate_bool_exp_bool_or_arguments_columns" columns of table "program_persons"
"""
enum program_persons_select_column_program_persons_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_absent
}

"""
input type for updating data in table "program_persons"
"""
input program_persons_set_input {
  created_at: timestamptz
  id: uuid
  is_absent: Boolean
  person_id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "program_persons"
"""
input program_persons_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: program_persons_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input program_persons_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  is_absent: Boolean
  person_id: uuid
  program_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "program_persons"
"""
enum program_persons_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  is_absent

  """column name"""
  person_id

  """column name"""
  program_id

  """column name"""
  updated_at
}

input program_persons_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: program_persons_set_input

  """filter the rows which have to be updated"""
  where: program_persons_bool_exp!
}

"""
columns and relationships of "program_projects"
"""
type program_projects {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  program: programs!
  program_id: uuid!

  """An object relationship"""
  project: projects!
  project_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "program_projects"
"""
type program_projects_aggregate {
  aggregate: program_projects_aggregate_fields
  nodes: [program_projects!]!
}

input program_projects_aggregate_bool_exp {
  count: program_projects_aggregate_bool_exp_count
}

input program_projects_aggregate_bool_exp_count {
  arguments: [program_projects_select_column!]
  distinct: Boolean
  filter: program_projects_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "program_projects"
"""
type program_projects_aggregate_fields {
  count(columns: [program_projects_select_column!], distinct: Boolean): Int!
  max: program_projects_max_fields
  min: program_projects_min_fields
}

"""
order by aggregate values of table "program_projects"
"""
input program_projects_aggregate_order_by {
  count: order_by
  max: program_projects_max_order_by
  min: program_projects_min_order_by
}

"""
input type for inserting array relation for remote table "program_projects"
"""
input program_projects_arr_rel_insert_input {
  data: [program_projects_insert_input!]!

  """upsert condition"""
  on_conflict: program_projects_on_conflict
}

"""
Boolean expression to filter rows from the table "program_projects". All fields are combined with a logical 'AND'.
"""
input program_projects_bool_exp {
  _and: [program_projects_bool_exp!]
  _not: program_projects_bool_exp
  _or: [program_projects_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  program: programs_bool_exp
  program_id: uuid_comparison_exp
  project: projects_bool_exp
  project_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "program_projects"
"""
enum program_projects_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  program_communities_pkey

  """
  unique or primary key constraint on columns "project_id", "program_id"
  """
  program_communities_program_id_community_id_key
}

"""
input type for inserting data into table "program_projects"
"""
input program_projects_insert_input {
  created_at: timestamptz
  id: uuid
  program: programs_obj_rel_insert_input
  program_id: uuid
  project: projects_obj_rel_insert_input
  project_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type program_projects_max_fields {
  created_at: timestamptz
  id: uuid
  program_id: uuid
  project_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "program_projects"
"""
input program_projects_max_order_by {
  created_at: order_by
  id: order_by
  program_id: order_by
  project_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type program_projects_min_fields {
  created_at: timestamptz
  id: uuid
  program_id: uuid
  project_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "program_projects"
"""
input program_projects_min_order_by {
  created_at: order_by
  id: order_by
  program_id: order_by
  project_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "program_projects"
"""
type program_projects_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [program_projects!]!
}

"""
on_conflict condition type for table "program_projects"
"""
input program_projects_on_conflict {
  constraint: program_projects_constraint!
  update_columns: [program_projects_update_column!]! = []
  where: program_projects_bool_exp
}

"""Ordering options when selecting data from "program_projects"."""
input program_projects_order_by {
  created_at: order_by
  id: order_by
  program: programs_order_by
  program_id: order_by
  project: projects_order_by
  project_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: program_projects"""
input program_projects_pk_columns_input {
  id: uuid!
}

"""
select columns of table "program_projects"
"""
enum program_projects_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  program_id

  """column name"""
  project_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "program_projects"
"""
input program_projects_set_input {
  created_at: timestamptz
  id: uuid
  program_id: uuid
  project_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "program_projects"
"""
input program_projects_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: program_projects_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input program_projects_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  program_id: uuid
  project_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "program_projects"
"""
enum program_projects_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  program_id

  """column name"""
  project_id

  """column name"""
  updated_at
}

input program_projects_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: program_projects_set_input

  """filter the rows which have to be updated"""
  where: program_projects_bool_exp!
}

"""
columns and relationships of "program_twitter_announcements"
"""
type program_twitter_announcements {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  person: persons
  person_id: uuid

  """An object relationship"""
  program: programs!
  program_id: uuid!

  """An object relationship"""
  twitter_tweet: twitter_tweets!
  twitter_tweet_id: uuid!

  """An object relationship"""
  twitter_tweet_image: twitter_tweet_images
  twitter_tweet_image_id: uuid
  updated_at: timestamptz!
}

"""
aggregated selection of "program_twitter_announcements"
"""
type program_twitter_announcements_aggregate {
  aggregate: program_twitter_announcements_aggregate_fields
  nodes: [program_twitter_announcements!]!
}

input program_twitter_announcements_aggregate_bool_exp {
  count: program_twitter_announcements_aggregate_bool_exp_count
}

input program_twitter_announcements_aggregate_bool_exp_count {
  arguments: [program_twitter_announcements_select_column!]
  distinct: Boolean
  filter: program_twitter_announcements_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "program_twitter_announcements"
"""
type program_twitter_announcements_aggregate_fields {
  count(columns: [program_twitter_announcements_select_column!], distinct: Boolean): Int!
  max: program_twitter_announcements_max_fields
  min: program_twitter_announcements_min_fields
}

"""
order by aggregate values of table "program_twitter_announcements"
"""
input program_twitter_announcements_aggregate_order_by {
  count: order_by
  max: program_twitter_announcements_max_order_by
  min: program_twitter_announcements_min_order_by
}

"""
input type for inserting array relation for remote table "program_twitter_announcements"
"""
input program_twitter_announcements_arr_rel_insert_input {
  data: [program_twitter_announcements_insert_input!]!

  """upsert condition"""
  on_conflict: program_twitter_announcements_on_conflict
}

"""
Boolean expression to filter rows from the table "program_twitter_announcements". All fields are combined with a logical 'AND'.
"""
input program_twitter_announcements_bool_exp {
  _and: [program_twitter_announcements_bool_exp!]
  _not: program_twitter_announcements_bool_exp
  _or: [program_twitter_announcements_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  person: persons_bool_exp
  person_id: uuid_comparison_exp
  program: programs_bool_exp
  program_id: uuid_comparison_exp
  twitter_tweet: twitter_tweets_bool_exp
  twitter_tweet_id: uuid_comparison_exp
  twitter_tweet_image: twitter_tweet_images_bool_exp
  twitter_tweet_image_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "program_twitter_announcements"
"""
enum program_twitter_announcements_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  program_twitter_announcements_pkey

  """
  unique or primary key constraint on columns "program_id", "twitter_tweet_image_id", "twitter_tweet_id"
  """
  program_twitter_announcements_program_id_twitter_tweet_id_twitt

  """
  unique or primary key constraint on columns "program_id", "twitter_tweet_image_id"
  """
  program_twitter_announcements_program_id_twitter_tweet_imag_key
}

"""
input type for inserting data into table "program_twitter_announcements"
"""
input program_twitter_announcements_insert_input {
  created_at: timestamptz
  id: uuid
  person: persons_obj_rel_insert_input
  person_id: uuid
  program: programs_obj_rel_insert_input
  program_id: uuid
  twitter_tweet: twitter_tweets_obj_rel_insert_input
  twitter_tweet_id: uuid
  twitter_tweet_image: twitter_tweet_images_obj_rel_insert_input
  twitter_tweet_image_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type program_twitter_announcements_max_fields {
  created_at: timestamptz
  id: uuid
  person_id: uuid
  program_id: uuid
  twitter_tweet_id: uuid
  twitter_tweet_image_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "program_twitter_announcements"
"""
input program_twitter_announcements_max_order_by {
  created_at: order_by
  id: order_by
  person_id: order_by
  program_id: order_by
  twitter_tweet_id: order_by
  twitter_tweet_image_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type program_twitter_announcements_min_fields {
  created_at: timestamptz
  id: uuid
  person_id: uuid
  program_id: uuid
  twitter_tweet_id: uuid
  twitter_tweet_image_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "program_twitter_announcements"
"""
input program_twitter_announcements_min_order_by {
  created_at: order_by
  id: order_by
  person_id: order_by
  program_id: order_by
  twitter_tweet_id: order_by
  twitter_tweet_image_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "program_twitter_announcements"
"""
type program_twitter_announcements_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [program_twitter_announcements!]!
}

"""
on_conflict condition type for table "program_twitter_announcements"
"""
input program_twitter_announcements_on_conflict {
  constraint: program_twitter_announcements_constraint!
  update_columns: [program_twitter_announcements_update_column!]! = []
  where: program_twitter_announcements_bool_exp
}

"""
Ordering options when selecting data from "program_twitter_announcements".
"""
input program_twitter_announcements_order_by {
  created_at: order_by
  id: order_by
  person: persons_order_by
  person_id: order_by
  program: programs_order_by
  program_id: order_by
  twitter_tweet: twitter_tweets_order_by
  twitter_tweet_id: order_by
  twitter_tweet_image: twitter_tweet_images_order_by
  twitter_tweet_image_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: program_twitter_announcements"""
input program_twitter_announcements_pk_columns_input {
  id: uuid!
}

"""
select columns of table "program_twitter_announcements"
"""
enum program_twitter_announcements_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  person_id

  """column name"""
  program_id

  """column name"""
  twitter_tweet_id

  """column name"""
  twitter_tweet_image_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "program_twitter_announcements"
"""
input program_twitter_announcements_set_input {
  created_at: timestamptz
  id: uuid
  person_id: uuid
  program_id: uuid
  twitter_tweet_id: uuid
  twitter_tweet_image_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "program_twitter_announcements"
"""
input program_twitter_announcements_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: program_twitter_announcements_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input program_twitter_announcements_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  person_id: uuid
  program_id: uuid
  twitter_tweet_id: uuid
  twitter_tweet_image_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "program_twitter_announcements"
"""
enum program_twitter_announcements_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  person_id

  """column name"""
  program_id

  """column name"""
  twitter_tweet_id

  """column name"""
  twitter_tweet_image_id

  """column name"""
  updated_at
}

input program_twitter_announcements_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: program_twitter_announcements_set_input

  """filter the rows which have to be updated"""
  where: program_twitter_announcements_bool_exp!
}

"""
columns and relationships of "programs"
"""
type programs {
  """An array relationship"""
  amongus_matches(
    """distinct select on columns"""
    distinct_on: [amongus_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_matches_order_by!]

    """filter the rows returned"""
    where: amongus_matches_bool_exp
  ): [amongus_matches!]!

  """An aggregate relationship"""
  amongus_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_matches_order_by!]

    """filter the rows returned"""
    where: amongus_matches_bool_exp
  ): amongus_matches_aggregate!

  """An array relationship"""
  amongusvr_matches(
    """distinct select on columns"""
    distinct_on: [amongusvr_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongusvr_matches_order_by!]

    """filter the rows returned"""
    where: amongusvr_matches_bool_exp
  ): [amongusvr_matches!]!

  """An aggregate relationship"""
  amongusvr_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [amongusvr_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongusvr_matches_order_by!]

    """filter the rows returned"""
    where: amongusvr_matches_bool_exp
  ): amongusvr_matches_aggregate!
  created_at: timestamptz!
  end_time: timestamptz

  """An array relationship"""
  fallguys_matches(
    """distinct select on columns"""
    distinct_on: [fallguys_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_matches_order_by!]

    """filter the rows returned"""
    where: fallguys_matches_bool_exp
  ): [fallguys_matches!]!

  """An aggregate relationship"""
  fallguys_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [fallguys_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_matches_order_by!]

    """filter the rows returned"""
    where: fallguys_matches_bool_exp
  ): fallguys_matches_aggregate!

  """An object relationship"""
  game: games
  game_id: uuid
  id: uuid!

  """An array relationship"""
  mariokart8deluxe_battle_matches(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_matches_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_matches_bool_exp
  ): [mariokart8deluxe_battle_matches!]!

  """An aggregate relationship"""
  mariokart8deluxe_battle_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_matches_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_matches_bool_exp
  ): mariokart8deluxe_battle_matches_aggregate!

  """An array relationship"""
  mariokart8deluxe_races(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_races_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_races_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_races_bool_exp
  ): [mariokart8deluxe_races!]!

  """An aggregate relationship"""
  mariokart8deluxe_races_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_races_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_races_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_races_bool_exp
  ): mariokart8deluxe_races_aggregate!

  """An array relationship"""
  program_amongus_maps(
    """distinct select on columns"""
    distinct_on: [program_amongus_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_maps_order_by!]

    """filter the rows returned"""
    where: program_amongus_maps_bool_exp
  ): [program_amongus_maps!]!

  """An aggregate relationship"""
  program_amongus_maps_aggregate(
    """distinct select on columns"""
    distinct_on: [program_amongus_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_maps_order_by!]

    """filter the rows returned"""
    where: program_amongus_maps_bool_exp
  ): program_amongus_maps_aggregate!

  """An array relationship"""
  program_amongus_mods(
    """distinct select on columns"""
    distinct_on: [program_amongus_mods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_mods_order_by!]

    """filter the rows returned"""
    where: program_amongus_mods_bool_exp
  ): [program_amongus_mods!]!

  """An aggregate relationship"""
  program_amongus_mods_aggregate(
    """distinct select on columns"""
    distinct_on: [program_amongus_mods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_mods_order_by!]

    """filter the rows returned"""
    where: program_amongus_mods_bool_exp
  ): program_amongus_mods_aggregate!

  """An array relationship"""
  program_amongus_vanilla_versions(
    """distinct select on columns"""
    distinct_on: [program_amongus_vanilla_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_vanilla_versions_order_by!]

    """filter the rows returned"""
    where: program_amongus_vanilla_versions_bool_exp
  ): [program_amongus_vanilla_versions!]!

  """An aggregate relationship"""
  program_amongus_vanilla_versions_aggregate(
    """distinct select on columns"""
    distinct_on: [program_amongus_vanilla_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_vanilla_versions_order_by!]

    """filter the rows returned"""
    where: program_amongus_vanilla_versions_bool_exp
  ): program_amongus_vanilla_versions_aggregate!

  """An array relationship"""
  program_live_archives(
    """distinct select on columns"""
    distinct_on: [program_live_archives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_live_archives_order_by!]

    """filter the rows returned"""
    where: program_live_archives_bool_exp
  ): [program_live_archives!]!

  """An aggregate relationship"""
  program_live_archives_aggregate(
    """distinct select on columns"""
    distinct_on: [program_live_archives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_live_archives_order_by!]

    """filter the rows returned"""
    where: program_live_archives_bool_exp
  ): program_live_archives_aggregate!

  """An array relationship"""
  program_niconico_videos(
    """distinct select on columns"""
    distinct_on: [program_niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_niconico_videos_order_by!]

    """filter the rows returned"""
    where: program_niconico_videos_bool_exp
  ): [program_niconico_videos!]!

  """An aggregate relationship"""
  program_niconico_videos_aggregate(
    """distinct select on columns"""
    distinct_on: [program_niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_niconico_videos_order_by!]

    """filter the rows returned"""
    where: program_niconico_videos_bool_exp
  ): program_niconico_videos_aggregate!

  """An array relationship"""
  program_persons(
    """distinct select on columns"""
    distinct_on: [program_persons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_persons_order_by!]

    """filter the rows returned"""
    where: program_persons_bool_exp
  ): [program_persons!]!

  """An aggregate relationship"""
  program_persons_aggregate(
    """distinct select on columns"""
    distinct_on: [program_persons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_persons_order_by!]

    """filter the rows returned"""
    where: program_persons_bool_exp
  ): program_persons_aggregate!

  """An array relationship"""
  program_projects(
    """distinct select on columns"""
    distinct_on: [program_projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_projects_order_by!]

    """filter the rows returned"""
    where: program_projects_bool_exp
  ): [program_projects!]!

  """An aggregate relationship"""
  program_projects_aggregate(
    """distinct select on columns"""
    distinct_on: [program_projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_projects_order_by!]

    """filter the rows returned"""
    where: program_projects_bool_exp
  ): program_projects_aggregate!

  """An array relationship"""
  program_twitter_announcements(
    """distinct select on columns"""
    distinct_on: [program_twitter_announcements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_twitter_announcements_order_by!]

    """filter the rows returned"""
    where: program_twitter_announcements_bool_exp
  ): [program_twitter_announcements!]!

  """An aggregate relationship"""
  program_twitter_announcements_aggregate(
    """distinct select on columns"""
    distinct_on: [program_twitter_announcements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_twitter_announcements_order_by!]

    """filter the rows returned"""
    where: program_twitter_announcements_bool_exp
  ): program_twitter_announcements_aggregate!
  start_time: timestamptz
  title: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "programs"
"""
type programs_aggregate {
  aggregate: programs_aggregate_fields
  nodes: [programs!]!
}

"""
aggregate fields of "programs"
"""
type programs_aggregate_fields {
  count(columns: [programs_select_column!], distinct: Boolean): Int!
  max: programs_max_fields
  min: programs_min_fields
}

"""
Boolean expression to filter rows from the table "programs". All fields are combined with a logical 'AND'.
"""
input programs_bool_exp {
  _and: [programs_bool_exp!]
  _not: programs_bool_exp
  _or: [programs_bool_exp!]
  amongus_matches: amongus_matches_bool_exp
  amongus_matches_aggregate: amongus_matches_aggregate_bool_exp
  amongusvr_matches: amongusvr_matches_bool_exp
  amongusvr_matches_aggregate: amongusvr_matches_aggregate_bool_exp
  created_at: timestamptz_comparison_exp
  end_time: timestamptz_comparison_exp
  fallguys_matches: fallguys_matches_bool_exp
  fallguys_matches_aggregate: fallguys_matches_aggregate_bool_exp
  game: games_bool_exp
  game_id: uuid_comparison_exp
  id: uuid_comparison_exp
  mariokart8deluxe_battle_matches: mariokart8deluxe_battle_matches_bool_exp
  mariokart8deluxe_battle_matches_aggregate: mariokart8deluxe_battle_matches_aggregate_bool_exp
  mariokart8deluxe_races: mariokart8deluxe_races_bool_exp
  mariokart8deluxe_races_aggregate: mariokart8deluxe_races_aggregate_bool_exp
  program_amongus_maps: program_amongus_maps_bool_exp
  program_amongus_maps_aggregate: program_amongus_maps_aggregate_bool_exp
  program_amongus_mods: program_amongus_mods_bool_exp
  program_amongus_mods_aggregate: program_amongus_mods_aggregate_bool_exp
  program_amongus_vanilla_versions: program_amongus_vanilla_versions_bool_exp
  program_amongus_vanilla_versions_aggregate: program_amongus_vanilla_versions_aggregate_bool_exp
  program_live_archives: program_live_archives_bool_exp
  program_live_archives_aggregate: program_live_archives_aggregate_bool_exp
  program_niconico_videos: program_niconico_videos_bool_exp
  program_niconico_videos_aggregate: program_niconico_videos_aggregate_bool_exp
  program_persons: program_persons_bool_exp
  program_persons_aggregate: program_persons_aggregate_bool_exp
  program_projects: program_projects_bool_exp
  program_projects_aggregate: program_projects_aggregate_bool_exp
  program_twitter_announcements: program_twitter_announcements_bool_exp
  program_twitter_announcements_aggregate: program_twitter_announcements_aggregate_bool_exp
  start_time: timestamptz_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "programs"
"""
enum programs_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  programs_pkey
}

"""
input type for inserting data into table "programs"
"""
input programs_insert_input {
  amongus_matches: amongus_matches_arr_rel_insert_input
  amongusvr_matches: amongusvr_matches_arr_rel_insert_input
  created_at: timestamptz
  end_time: timestamptz
  fallguys_matches: fallguys_matches_arr_rel_insert_input
  game: games_obj_rel_insert_input
  game_id: uuid
  id: uuid
  mariokart8deluxe_battle_matches: mariokart8deluxe_battle_matches_arr_rel_insert_input
  mariokart8deluxe_races: mariokart8deluxe_races_arr_rel_insert_input
  program_amongus_maps: program_amongus_maps_arr_rel_insert_input
  program_amongus_mods: program_amongus_mods_arr_rel_insert_input
  program_amongus_vanilla_versions: program_amongus_vanilla_versions_arr_rel_insert_input
  program_live_archives: program_live_archives_arr_rel_insert_input
  program_niconico_videos: program_niconico_videos_arr_rel_insert_input
  program_persons: program_persons_arr_rel_insert_input
  program_projects: program_projects_arr_rel_insert_input
  program_twitter_announcements: program_twitter_announcements_arr_rel_insert_input
  start_time: timestamptz
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type programs_max_fields {
  created_at: timestamptz
  end_time: timestamptz
  game_id: uuid
  id: uuid
  start_time: timestamptz
  title: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type programs_min_fields {
  created_at: timestamptz
  end_time: timestamptz
  game_id: uuid
  id: uuid
  start_time: timestamptz
  title: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "programs"
"""
type programs_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [programs!]!
}

"""
input type for inserting object relation for remote table "programs"
"""
input programs_obj_rel_insert_input {
  data: programs_insert_input!

  """upsert condition"""
  on_conflict: programs_on_conflict
}

"""
on_conflict condition type for table "programs"
"""
input programs_on_conflict {
  constraint: programs_constraint!
  update_columns: [programs_update_column!]! = []
  where: programs_bool_exp
}

"""Ordering options when selecting data from "programs"."""
input programs_order_by {
  amongus_matches_aggregate: amongus_matches_aggregate_order_by
  amongusvr_matches_aggregate: amongusvr_matches_aggregate_order_by
  created_at: order_by
  end_time: order_by
  fallguys_matches_aggregate: fallguys_matches_aggregate_order_by
  game: games_order_by
  game_id: order_by
  id: order_by
  mariokart8deluxe_battle_matches_aggregate: mariokart8deluxe_battle_matches_aggregate_order_by
  mariokart8deluxe_races_aggregate: mariokart8deluxe_races_aggregate_order_by
  program_amongus_maps_aggregate: program_amongus_maps_aggregate_order_by
  program_amongus_mods_aggregate: program_amongus_mods_aggregate_order_by
  program_amongus_vanilla_versions_aggregate: program_amongus_vanilla_versions_aggregate_order_by
  program_live_archives_aggregate: program_live_archives_aggregate_order_by
  program_niconico_videos_aggregate: program_niconico_videos_aggregate_order_by
  program_persons_aggregate: program_persons_aggregate_order_by
  program_projects_aggregate: program_projects_aggregate_order_by
  program_twitter_announcements_aggregate: program_twitter_announcements_aggregate_order_by
  start_time: order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: programs"""
input programs_pk_columns_input {
  id: uuid!
}

"""
select columns of table "programs"
"""
enum programs_select_column {
  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  game_id

  """column name"""
  id

  """column name"""
  start_time

  """column name"""
  title

  """column name"""
  updated_at
}

"""
input type for updating data in table "programs"
"""
input programs_set_input {
  created_at: timestamptz
  end_time: timestamptz
  game_id: uuid
  id: uuid
  start_time: timestamptz
  title: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "programs"
"""
input programs_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: programs_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input programs_stream_cursor_value_input {
  created_at: timestamptz
  end_time: timestamptz
  game_id: uuid
  id: uuid
  start_time: timestamptz
  title: String
  updated_at: timestamptz
}

"""
update columns of table "programs"
"""
enum programs_update_column {
  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  game_id

  """column name"""
  id

  """column name"""
  start_time

  """column name"""
  title

  """column name"""
  updated_at
}

input programs_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: programs_set_input

  """filter the rows which have to be updated"""
  where: programs_bool_exp!
}

"""
columns and relationships of "project_niconico_videos"
"""
type project_niconico_videos {
  created_at: timestamptz!
  id: uuid!
  niconico_video_id: uuid!
  project_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "project_niconico_videos"
"""
type project_niconico_videos_aggregate {
  aggregate: project_niconico_videos_aggregate_fields
  nodes: [project_niconico_videos!]!
}

input project_niconico_videos_aggregate_bool_exp {
  count: project_niconico_videos_aggregate_bool_exp_count
}

input project_niconico_videos_aggregate_bool_exp_count {
  arguments: [project_niconico_videos_select_column!]
  distinct: Boolean
  filter: project_niconico_videos_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "project_niconico_videos"
"""
type project_niconico_videos_aggregate_fields {
  count(columns: [project_niconico_videos_select_column!], distinct: Boolean): Int!
  max: project_niconico_videos_max_fields
  min: project_niconico_videos_min_fields
}

"""
order by aggregate values of table "project_niconico_videos"
"""
input project_niconico_videos_aggregate_order_by {
  count: order_by
  max: project_niconico_videos_max_order_by
  min: project_niconico_videos_min_order_by
}

"""
input type for inserting array relation for remote table "project_niconico_videos"
"""
input project_niconico_videos_arr_rel_insert_input {
  data: [project_niconico_videos_insert_input!]!

  """upsert condition"""
  on_conflict: project_niconico_videos_on_conflict
}

"""
Boolean expression to filter rows from the table "project_niconico_videos". All fields are combined with a logical 'AND'.
"""
input project_niconico_videos_bool_exp {
  _and: [project_niconico_videos_bool_exp!]
  _not: project_niconico_videos_bool_exp
  _or: [project_niconico_videos_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  niconico_video_id: uuid_comparison_exp
  project_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "project_niconico_videos"
"""
enum project_niconico_videos_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  project_niconico_videos_pkey

  """
  unique or primary key constraint on columns "project_id", "niconico_video_id"
  """
  project_niconico_videos_project_id_niconico_video_id_key
}

"""
input type for inserting data into table "project_niconico_videos"
"""
input project_niconico_videos_insert_input {
  created_at: timestamptz
  id: uuid
  niconico_video_id: uuid
  project_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type project_niconico_videos_max_fields {
  created_at: timestamptz
  id: uuid
  niconico_video_id: uuid
  project_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "project_niconico_videos"
"""
input project_niconico_videos_max_order_by {
  created_at: order_by
  id: order_by
  niconico_video_id: order_by
  project_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type project_niconico_videos_min_fields {
  created_at: timestamptz
  id: uuid
  niconico_video_id: uuid
  project_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "project_niconico_videos"
"""
input project_niconico_videos_min_order_by {
  created_at: order_by
  id: order_by
  niconico_video_id: order_by
  project_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "project_niconico_videos"
"""
type project_niconico_videos_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [project_niconico_videos!]!
}

"""
on_conflict condition type for table "project_niconico_videos"
"""
input project_niconico_videos_on_conflict {
  constraint: project_niconico_videos_constraint!
  update_columns: [project_niconico_videos_update_column!]! = []
  where: project_niconico_videos_bool_exp
}

"""Ordering options when selecting data from "project_niconico_videos"."""
input project_niconico_videos_order_by {
  created_at: order_by
  id: order_by
  niconico_video_id: order_by
  project_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: project_niconico_videos"""
input project_niconico_videos_pk_columns_input {
  id: uuid!
}

"""
select columns of table "project_niconico_videos"
"""
enum project_niconico_videos_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  niconico_video_id

  """column name"""
  project_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "project_niconico_videos"
"""
input project_niconico_videos_set_input {
  created_at: timestamptz
  id: uuid
  niconico_video_id: uuid
  project_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "project_niconico_videos"
"""
input project_niconico_videos_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: project_niconico_videos_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input project_niconico_videos_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  niconico_video_id: uuid
  project_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "project_niconico_videos"
"""
enum project_niconico_videos_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  niconico_video_id

  """column name"""
  project_id

  """column name"""
  updated_at
}

input project_niconico_videos_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: project_niconico_videos_set_input

  """filter the rows which have to be updated"""
  where: project_niconico_videos_bool_exp!
}

"""ふにんがす、なのそん、などの企画"""
type projects {
  created_at: timestamptz!
  id: uuid!
  name: String!

  """An array relationship"""
  program_projects(
    """distinct select on columns"""
    distinct_on: [program_projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_projects_order_by!]

    """filter the rows returned"""
    where: program_projects_bool_exp
  ): [program_projects!]!

  """An aggregate relationship"""
  program_projects_aggregate(
    """distinct select on columns"""
    distinct_on: [program_projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_projects_order_by!]

    """filter the rows returned"""
    where: program_projects_bool_exp
  ): program_projects_aggregate!
  start_time: timestamptz
  updated_at: timestamptz!
}

"""
aggregated selection of "projects"
"""
type projects_aggregate {
  aggregate: projects_aggregate_fields
  nodes: [projects!]!
}

"""
aggregate fields of "projects"
"""
type projects_aggregate_fields {
  count(columns: [projects_select_column!], distinct: Boolean): Int!
  max: projects_max_fields
  min: projects_min_fields
}

"""
Boolean expression to filter rows from the table "projects". All fields are combined with a logical 'AND'.
"""
input projects_bool_exp {
  _and: [projects_bool_exp!]
  _not: projects_bool_exp
  _or: [projects_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  program_projects: program_projects_bool_exp
  program_projects_aggregate: program_projects_aggregate_bool_exp
  start_time: timestamptz_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "projects"
"""
enum projects_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  communities_pkey
}

"""
input type for inserting data into table "projects"
"""
input projects_insert_input {
  created_at: timestamptz
  id: uuid
  name: String
  program_projects: program_projects_arr_rel_insert_input
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate max on columns"""
type projects_max_fields {
  created_at: timestamptz
  id: uuid
  name: String
  start_time: timestamptz
  updated_at: timestamptz
}

"""aggregate min on columns"""
type projects_min_fields {
  created_at: timestamptz
  id: uuid
  name: String
  start_time: timestamptz
  updated_at: timestamptz
}

"""
response of any mutation on the table "projects"
"""
type projects_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [projects!]!
}

"""
input type for inserting object relation for remote table "projects"
"""
input projects_obj_rel_insert_input {
  data: projects_insert_input!

  """upsert condition"""
  on_conflict: projects_on_conflict
}

"""
on_conflict condition type for table "projects"
"""
input projects_on_conflict {
  constraint: projects_constraint!
  update_columns: [projects_update_column!]! = []
  where: projects_bool_exp
}

"""Ordering options when selecting data from "projects"."""
input projects_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  program_projects_aggregate: program_projects_aggregate_order_by
  start_time: order_by
  updated_at: order_by
}

"""primary key columns input for table: projects"""
input projects_pk_columns_input {
  id: uuid!
}

"""
select columns of table "projects"
"""
enum projects_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  start_time

  """column name"""
  updated_at
}

"""
input type for updating data in table "projects"
"""
input projects_set_input {
  created_at: timestamptz
  id: uuid
  name: String
  start_time: timestamptz
  updated_at: timestamptz
}

"""
Streaming cursor of the table "projects"
"""
input projects_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: projects_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input projects_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  name: String
  start_time: timestamptz
  updated_at: timestamptz
}

"""
update columns of table "projects"
"""
enum projects_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  start_time

  """column name"""
  updated_at
}

input projects_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: projects_set_input

  """filter the rows which have to be updated"""
  where: projects_bool_exp!
}

type query_root {
  """
  fetch data from the table: "amongus_maps"
  """
  amongus_maps(
    """distinct select on columns"""
    distinct_on: [amongus_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_maps_order_by!]

    """filter the rows returned"""
    where: amongus_maps_bool_exp
  ): [amongus_maps!]!

  """
  fetch aggregated fields from the table: "amongus_maps"
  """
  amongus_maps_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_maps_order_by!]

    """filter the rows returned"""
    where: amongus_maps_bool_exp
  ): amongus_maps_aggregate!

  """fetch data from the table: "amongus_maps" using primary key columns"""
  amongus_maps_by_pk(id: uuid!): amongus_maps

  """
  fetch data from the table: "amongus_match_mods"
  """
  amongus_match_mods(
    """distinct select on columns"""
    distinct_on: [amongus_match_mods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_match_mods_order_by!]

    """filter the rows returned"""
    where: amongus_match_mods_bool_exp
  ): [amongus_match_mods!]!

  """
  fetch aggregated fields from the table: "amongus_match_mods"
  """
  amongus_match_mods_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_match_mods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_match_mods_order_by!]

    """filter the rows returned"""
    where: amongus_match_mods_bool_exp
  ): amongus_match_mods_aggregate!

  """
  fetch data from the table: "amongus_match_mods" using primary key columns
  """
  amongus_match_mods_by_pk(id: uuid!): amongus_match_mods

  """
  fetch data from the table: "amongus_match_player_result_roles"
  """
  amongus_match_player_result_roles(
    """distinct select on columns"""
    distinct_on: [amongus_match_player_result_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_match_player_result_roles_order_by!]

    """filter the rows returned"""
    where: amongus_match_player_result_roles_bool_exp
  ): [amongus_match_player_result_roles!]!

  """
  fetch aggregated fields from the table: "amongus_match_player_result_roles"
  """
  amongus_match_player_result_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_match_player_result_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_match_player_result_roles_order_by!]

    """filter the rows returned"""
    where: amongus_match_player_result_roles_bool_exp
  ): amongus_match_player_result_roles_aggregate!

  """
  fetch data from the table: "amongus_match_player_result_roles" using primary key columns
  """
  amongus_match_player_result_roles_by_pk(id: uuid!): amongus_match_player_result_roles

  """An array relationship"""
  amongus_match_players(
    """distinct select on columns"""
    distinct_on: [amongus_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_match_players_order_by!]

    """filter the rows returned"""
    where: amongus_match_players_bool_exp
  ): [amongus_match_players!]!

  """An aggregate relationship"""
  amongus_match_players_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_match_players_order_by!]

    """filter the rows returned"""
    where: amongus_match_players_bool_exp
  ): amongus_match_players_aggregate!

  """
  fetch data from the table: "amongus_match_players" using primary key columns
  """
  amongus_match_players_by_pk(id: uuid!): amongus_match_players

  """An array relationship"""
  amongus_matches(
    """distinct select on columns"""
    distinct_on: [amongus_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_matches_order_by!]

    """filter the rows returned"""
    where: amongus_matches_bool_exp
  ): [amongus_matches!]!

  """An aggregate relationship"""
  amongus_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_matches_order_by!]

    """filter the rows returned"""
    where: amongus_matches_bool_exp
  ): amongus_matches_aggregate!

  """fetch data from the table: "amongus_matches" using primary key columns"""
  amongus_matches_by_pk(id: uuid!): amongus_matches

  """
  fetch data from the table: "amongus_mod_versions"
  """
  amongus_mod_versions(
    """distinct select on columns"""
    distinct_on: [amongus_mod_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_mod_versions_order_by!]

    """filter the rows returned"""
    where: amongus_mod_versions_bool_exp
  ): [amongus_mod_versions!]!

  """
  fetch aggregated fields from the table: "amongus_mod_versions"
  """
  amongus_mod_versions_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_mod_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_mod_versions_order_by!]

    """filter the rows returned"""
    where: amongus_mod_versions_bool_exp
  ): amongus_mod_versions_aggregate!

  """
  fetch data from the table: "amongus_mod_versions" using primary key columns
  """
  amongus_mod_versions_by_pk(id: uuid!): amongus_mod_versions

  """
  fetch data from the table: "amongus_mods"
  """
  amongus_mods(
    """distinct select on columns"""
    distinct_on: [amongus_mods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_mods_order_by!]

    """filter the rows returned"""
    where: amongus_mods_bool_exp
  ): [amongus_mods!]!

  """
  fetch aggregated fields from the table: "amongus_mods"
  """
  amongus_mods_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_mods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_mods_order_by!]

    """filter the rows returned"""
    where: amongus_mods_bool_exp
  ): amongus_mods_aggregate!

  """fetch data from the table: "amongus_mods" using primary key columns"""
  amongus_mods_by_pk(id: uuid!): amongus_mods

  """
  fetch data from the table: "amongus_roles"
  """
  amongus_roles(
    """distinct select on columns"""
    distinct_on: [amongus_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_roles_order_by!]

    """filter the rows returned"""
    where: amongus_roles_bool_exp
  ): [amongus_roles!]!

  """
  fetch aggregated fields from the table: "amongus_roles"
  """
  amongus_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_roles_order_by!]

    """filter the rows returned"""
    where: amongus_roles_bool_exp
  ): amongus_roles_aggregate!

  """fetch data from the table: "amongus_roles" using primary key columns"""
  amongus_roles_by_pk(id: uuid!): amongus_roles

  """
  fetch data from the table: "amongus_vanilla_versions"
  """
  amongus_vanilla_versions(
    """distinct select on columns"""
    distinct_on: [amongus_vanilla_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_vanilla_versions_order_by!]

    """filter the rows returned"""
    where: amongus_vanilla_versions_bool_exp
  ): [amongus_vanilla_versions!]!

  """
  fetch aggregated fields from the table: "amongus_vanilla_versions"
  """
  amongus_vanilla_versions_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_vanilla_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_vanilla_versions_order_by!]

    """filter the rows returned"""
    where: amongus_vanilla_versions_bool_exp
  ): amongus_vanilla_versions_aggregate!

  """
  fetch data from the table: "amongus_vanilla_versions" using primary key columns
  """
  amongus_vanilla_versions_by_pk(id: uuid!): amongus_vanilla_versions

  """
  fetch data from the table: "amongusvr_maps"
  """
  amongusvr_maps(
    """distinct select on columns"""
    distinct_on: [amongusvr_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongusvr_maps_order_by!]

    """filter the rows returned"""
    where: amongusvr_maps_bool_exp
  ): [amongusvr_maps!]!

  """
  fetch aggregated fields from the table: "amongusvr_maps"
  """
  amongusvr_maps_aggregate(
    """distinct select on columns"""
    distinct_on: [amongusvr_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongusvr_maps_order_by!]

    """filter the rows returned"""
    where: amongusvr_maps_bool_exp
  ): amongusvr_maps_aggregate!

  """fetch data from the table: "amongusvr_maps" using primary key columns"""
  amongusvr_maps_by_pk(id: uuid!): amongusvr_maps

  """An array relationship"""
  amongusvr_match_players(
    """distinct select on columns"""
    distinct_on: [amongusvr_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongusvr_match_players_order_by!]

    """filter the rows returned"""
    where: amongusvr_match_players_bool_exp
  ): [amongusvr_match_players!]!

  """An aggregate relationship"""
  amongusvr_match_players_aggregate(
    """distinct select on columns"""
    distinct_on: [amongusvr_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongusvr_match_players_order_by!]

    """filter the rows returned"""
    where: amongusvr_match_players_bool_exp
  ): amongusvr_match_players_aggregate!

  """
  fetch data from the table: "amongusvr_match_players" using primary key columns
  """
  amongusvr_match_players_by_pk(id: uuid!): amongusvr_match_players

  """An array relationship"""
  amongusvr_matches(
    """distinct select on columns"""
    distinct_on: [amongusvr_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongusvr_matches_order_by!]

    """filter the rows returned"""
    where: amongusvr_matches_bool_exp
  ): [amongusvr_matches!]!

  """An aggregate relationship"""
  amongusvr_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [amongusvr_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongusvr_matches_order_by!]

    """filter the rows returned"""
    where: amongusvr_matches_bool_exp
  ): amongusvr_matches_aggregate!

  """
  fetch data from the table: "amongusvr_matches" using primary key columns
  """
  amongusvr_matches_by_pk(id: uuid!): amongusvr_matches

  """An array relationship"""
  fallguys_custom_round_twitter_announcements(
    """distinct select on columns"""
    distinct_on: [fallguys_custom_round_twitter_announcements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_custom_round_twitter_announcements_order_by!]

    """filter the rows returned"""
    where: fallguys_custom_round_twitter_announcements_bool_exp
  ): [fallguys_custom_round_twitter_announcements!]!

  """An aggregate relationship"""
  fallguys_custom_round_twitter_announcements_aggregate(
    """distinct select on columns"""
    distinct_on: [fallguys_custom_round_twitter_announcements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_custom_round_twitter_announcements_order_by!]

    """filter the rows returned"""
    where: fallguys_custom_round_twitter_announcements_bool_exp
  ): fallguys_custom_round_twitter_announcements_aggregate!

  """
  fetch data from the table: "fallguys_custom_round_twitter_announcements" using primary key columns
  """
  fallguys_custom_round_twitter_announcements_by_pk(id: uuid!): fallguys_custom_round_twitter_announcements

  """An array relationship"""
  fallguys_custom_rounds(
    """distinct select on columns"""
    distinct_on: [fallguys_custom_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_custom_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_custom_rounds_bool_exp
  ): [fallguys_custom_rounds!]!

  """An aggregate relationship"""
  fallguys_custom_rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [fallguys_custom_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_custom_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_custom_rounds_bool_exp
  ): fallguys_custom_rounds_aggregate!

  """
  fetch data from the table: "fallguys_custom_rounds" using primary key columns
  """
  fallguys_custom_rounds_by_pk(id: uuid!): fallguys_custom_rounds

  """An array relationship"""
  fallguys_match_rounds(
    """distinct select on columns"""
    distinct_on: [fallguys_match_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_match_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_match_rounds_bool_exp
  ): [fallguys_match_rounds!]!

  """An aggregate relationship"""
  fallguys_match_rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [fallguys_match_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_match_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_match_rounds_bool_exp
  ): fallguys_match_rounds_aggregate!

  """
  fetch data from the table: "fallguys_match_rounds" using primary key columns
  """
  fallguys_match_rounds_by_pk(id: uuid!): fallguys_match_rounds

  """An array relationship"""
  fallguys_matches(
    """distinct select on columns"""
    distinct_on: [fallguys_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_matches_order_by!]

    """filter the rows returned"""
    where: fallguys_matches_bool_exp
  ): [fallguys_matches!]!

  """An aggregate relationship"""
  fallguys_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [fallguys_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_matches_order_by!]

    """filter the rows returned"""
    where: fallguys_matches_bool_exp
  ): fallguys_matches_aggregate!

  """
  fetch data from the table: "fallguys_matches" using primary key columns
  """
  fallguys_matches_by_pk(id: uuid!): fallguys_matches

  """
  fetch data from the table: "fallguys_rounds"
  """
  fallguys_rounds(
    """distinct select on columns"""
    distinct_on: [fallguys_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_rounds_bool_exp
  ): [fallguys_rounds!]!

  """
  fetch aggregated fields from the table: "fallguys_rounds"
  """
  fallguys_rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [fallguys_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_rounds_bool_exp
  ): fallguys_rounds_aggregate!

  """fetch data from the table: "fallguys_rounds" using primary key columns"""
  fallguys_rounds_by_pk(id: uuid!): fallguys_rounds

  """
  fetch data from the table: "fediverse_accounts"
  """
  fediverse_accounts(
    """distinct select on columns"""
    distinct_on: [fediverse_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fediverse_accounts_order_by!]

    """filter the rows returned"""
    where: fediverse_accounts_bool_exp
  ): [fediverse_accounts!]!

  """
  fetch aggregated fields from the table: "fediverse_accounts"
  """
  fediverse_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [fediverse_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fediverse_accounts_order_by!]

    """filter the rows returned"""
    where: fediverse_accounts_bool_exp
  ): fediverse_accounts_aggregate!

  """
  fetch data from the table: "fediverse_accounts" using primary key columns
  """
  fediverse_accounts_by_pk(id: uuid!): fediverse_accounts

  """
  fetch data from the table: "games"
  """
  games(
    """distinct select on columns"""
    distinct_on: [games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [games_order_by!]

    """filter the rows returned"""
    where: games_bool_exp
  ): [games!]!

  """
  fetch aggregated fields from the table: "games"
  """
  games_aggregate(
    """distinct select on columns"""
    distinct_on: [games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [games_order_by!]

    """filter the rows returned"""
    where: games_bool_exp
  ): games_aggregate!

  """fetch data from the table: "games" using primary key columns"""
  games_by_pk(id: uuid!): games

  """
  fetch data from the table: "mariokart8deluxe_battle_courses"
  """
  mariokart8deluxe_battle_courses(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_courses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_courses_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_courses_bool_exp
  ): [mariokart8deluxe_battle_courses!]!

  """
  fetch aggregated fields from the table: "mariokart8deluxe_battle_courses"
  """
  mariokart8deluxe_battle_courses_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_courses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_courses_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_courses_bool_exp
  ): mariokart8deluxe_battle_courses_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_battle_courses" using primary key columns
  """
  mariokart8deluxe_battle_courses_by_pk(id: uuid!): mariokart8deluxe_battle_courses

  """An array relationship"""
  mariokart8deluxe_battle_match_players(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_match_players_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_match_players_bool_exp
  ): [mariokart8deluxe_battle_match_players!]!

  """An aggregate relationship"""
  mariokart8deluxe_battle_match_players_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_match_players_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_match_players_bool_exp
  ): mariokart8deluxe_battle_match_players_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_battle_match_players" using primary key columns
  """
  mariokart8deluxe_battle_match_players_by_pk(id: uuid!): mariokart8deluxe_battle_match_players

  """An array relationship"""
  mariokart8deluxe_battle_matches(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_matches_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_matches_bool_exp
  ): [mariokart8deluxe_battle_matches!]!

  """An aggregate relationship"""
  mariokart8deluxe_battle_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_matches_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_matches_bool_exp
  ): mariokart8deluxe_battle_matches_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_battle_matches" using primary key columns
  """
  mariokart8deluxe_battle_matches_by_pk(id: uuid!): mariokart8deluxe_battle_matches

  """
  fetch data from the table: "mariokart8deluxe_battle_rules"
  """
  mariokart8deluxe_battle_rules(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_rules_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_rules_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_rules_bool_exp
  ): [mariokart8deluxe_battle_rules!]!

  """
  fetch aggregated fields from the table: "mariokart8deluxe_battle_rules"
  """
  mariokart8deluxe_battle_rules_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_rules_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_rules_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_rules_bool_exp
  ): mariokart8deluxe_battle_rules_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_battle_rules" using primary key columns
  """
  mariokart8deluxe_battle_rules_by_pk(id: uuid!): mariokart8deluxe_battle_rules

  """
  fetch data from the table: "mariokart8deluxe_consoles"
  """
  mariokart8deluxe_consoles(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_consoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_consoles_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_consoles_bool_exp
  ): [mariokart8deluxe_consoles!]!

  """
  fetch aggregated fields from the table: "mariokart8deluxe_consoles"
  """
  mariokart8deluxe_consoles_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_consoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_consoles_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_consoles_bool_exp
  ): mariokart8deluxe_consoles_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_consoles" using primary key columns
  """
  mariokart8deluxe_consoles_by_pk(id: uuid!): mariokart8deluxe_consoles

  """An array relationship"""
  mariokart8deluxe_courses(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_courses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_courses_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_courses_bool_exp
  ): [mariokart8deluxe_courses!]!

  """An aggregate relationship"""
  mariokart8deluxe_courses_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_courses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_courses_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_courses_bool_exp
  ): mariokart8deluxe_courses_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_courses" using primary key columns
  """
  mariokart8deluxe_courses_by_pk(id: uuid!): mariokart8deluxe_courses

  """
  fetch data from the table: "mariokart8deluxe_cups"
  """
  mariokart8deluxe_cups(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_cups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_cups_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_cups_bool_exp
  ): [mariokart8deluxe_cups!]!

  """
  fetch aggregated fields from the table: "mariokart8deluxe_cups"
  """
  mariokart8deluxe_cups_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_cups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_cups_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_cups_bool_exp
  ): mariokart8deluxe_cups_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_cups" using primary key columns
  """
  mariokart8deluxe_cups_by_pk(id: uuid!): mariokart8deluxe_cups

  """An array relationship"""
  mariokart8deluxe_race_players(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_race_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_race_players_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_race_players_bool_exp
  ): [mariokart8deluxe_race_players!]!

  """An aggregate relationship"""
  mariokart8deluxe_race_players_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_race_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_race_players_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_race_players_bool_exp
  ): mariokart8deluxe_race_players_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_race_players" using primary key columns
  """
  mariokart8deluxe_race_players_by_pk(id: uuid!): mariokart8deluxe_race_players

  """
  fetch data from the table: "mariokart8deluxe_race_rules"
  """
  mariokart8deluxe_race_rules(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_race_rules_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_race_rules_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_race_rules_bool_exp
  ): [mariokart8deluxe_race_rules!]!

  """
  fetch aggregated fields from the table: "mariokart8deluxe_race_rules"
  """
  mariokart8deluxe_race_rules_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_race_rules_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_race_rules_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_race_rules_bool_exp
  ): mariokart8deluxe_race_rules_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_race_rules" using primary key columns
  """
  mariokart8deluxe_race_rules_by_pk(id: uuid!): mariokart8deluxe_race_rules

  """An array relationship"""
  mariokart8deluxe_races(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_races_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_races_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_races_bool_exp
  ): [mariokart8deluxe_races!]!

  """An aggregate relationship"""
  mariokart8deluxe_races_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_races_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_races_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_races_bool_exp
  ): mariokart8deluxe_races_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_races" using primary key columns
  """
  mariokart8deluxe_races_by_pk(id: uuid!): mariokart8deluxe_races

  """
  fetch data from the table: "niconico_accounts"
  """
  niconico_accounts(
    """distinct select on columns"""
    distinct_on: [niconico_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_accounts_order_by!]

    """filter the rows returned"""
    where: niconico_accounts_bool_exp
  ): [niconico_accounts!]!

  """
  fetch aggregated fields from the table: "niconico_accounts"
  """
  niconico_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [niconico_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_accounts_order_by!]

    """filter the rows returned"""
    where: niconico_accounts_bool_exp
  ): niconico_accounts_aggregate!

  """
  fetch data from the table: "niconico_accounts" using primary key columns
  """
  niconico_accounts_by_pk(id: uuid!): niconico_accounts

  """
  fetch data from the table: "niconico_channels"
  """
  niconico_channels(
    """distinct select on columns"""
    distinct_on: [niconico_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_channels_order_by!]

    """filter the rows returned"""
    where: niconico_channels_bool_exp
  ): [niconico_channels!]!

  """
  fetch aggregated fields from the table: "niconico_channels"
  """
  niconico_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [niconico_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_channels_order_by!]

    """filter the rows returned"""
    where: niconico_channels_bool_exp
  ): niconico_channels_aggregate!

  """
  fetch data from the table: "niconico_channels" using primary key columns
  """
  niconico_channels_by_pk(id: uuid!): niconico_channels

  """
  fetch data from the table: "niconico_communities"
  """
  niconico_communities(
    """distinct select on columns"""
    distinct_on: [niconico_communities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_communities_order_by!]

    """filter the rows returned"""
    where: niconico_communities_bool_exp
  ): [niconico_communities!]!

  """
  fetch aggregated fields from the table: "niconico_communities"
  """
  niconico_communities_aggregate(
    """distinct select on columns"""
    distinct_on: [niconico_communities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_communities_order_by!]

    """filter the rows returned"""
    where: niconico_communities_bool_exp
  ): niconico_communities_aggregate!

  """
  fetch data from the table: "niconico_communities" using primary key columns
  """
  niconico_communities_by_pk(id: uuid!): niconico_communities

  """
  fetch data from the table: "niconico_plus_channels"
  """
  niconico_plus_channels(
    """distinct select on columns"""
    distinct_on: [niconico_plus_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_plus_channels_order_by!]

    """filter the rows returned"""
    where: niconico_plus_channels_bool_exp
  ): [niconico_plus_channels!]!

  """
  fetch aggregated fields from the table: "niconico_plus_channels"
  """
  niconico_plus_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [niconico_plus_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_plus_channels_order_by!]

    """filter the rows returned"""
    where: niconico_plus_channels_bool_exp
  ): niconico_plus_channels_aggregate!

  """
  fetch data from the table: "niconico_plus_channels" using primary key columns
  """
  niconico_plus_channels_by_pk(id: uuid!): niconico_plus_channels

  """
  fetch data from the table: "niconico_videos"
  """
  niconico_videos(
    """distinct select on columns"""
    distinct_on: [niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_videos_order_by!]

    """filter the rows returned"""
    where: niconico_videos_bool_exp
  ): [niconico_videos!]!

  """
  fetch aggregated fields from the table: "niconico_videos"
  """
  niconico_videos_aggregate(
    """distinct select on columns"""
    distinct_on: [niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_videos_order_by!]

    """filter the rows returned"""
    where: niconico_videos_bool_exp
  ): niconico_videos_aggregate!

  """fetch data from the table: "niconico_videos" using primary key columns"""
  niconico_videos_by_pk(id: uuid!): niconico_videos

  """An array relationship"""
  person_fediverse_accounts(
    """distinct select on columns"""
    distinct_on: [person_fediverse_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_fediverse_accounts_order_by!]

    """filter the rows returned"""
    where: person_fediverse_accounts_bool_exp
  ): [person_fediverse_accounts!]!

  """An aggregate relationship"""
  person_fediverse_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [person_fediverse_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_fediverse_accounts_order_by!]

    """filter the rows returned"""
    where: person_fediverse_accounts_bool_exp
  ): person_fediverse_accounts_aggregate!

  """
  fetch data from the table: "person_fediverse_accounts" using primary key columns
  """
  person_fediverse_accounts_by_pk(id: uuid!): person_fediverse_accounts

  """An array relationship"""
  person_niconico_accounts(
    """distinct select on columns"""
    distinct_on: [person_niconico_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_accounts_order_by!]

    """filter the rows returned"""
    where: person_niconico_accounts_bool_exp
  ): [person_niconico_accounts!]!

  """An aggregate relationship"""
  person_niconico_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [person_niconico_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_accounts_order_by!]

    """filter the rows returned"""
    where: person_niconico_accounts_bool_exp
  ): person_niconico_accounts_aggregate!

  """
  fetch data from the table: "person_niconico_accounts" using primary key columns
  """
  person_niconico_accounts_by_pk(id: uuid!): person_niconico_accounts

  """An array relationship"""
  person_niconico_channels(
    """distinct select on columns"""
    distinct_on: [person_niconico_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_channels_order_by!]

    """filter the rows returned"""
    where: person_niconico_channels_bool_exp
  ): [person_niconico_channels!]!

  """An aggregate relationship"""
  person_niconico_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [person_niconico_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_channels_order_by!]

    """filter the rows returned"""
    where: person_niconico_channels_bool_exp
  ): person_niconico_channels_aggregate!

  """
  fetch data from the table: "person_niconico_channels" using primary key columns
  """
  person_niconico_channels_by_pk(id: uuid!): person_niconico_channels

  """An array relationship"""
  person_niconico_communities(
    """distinct select on columns"""
    distinct_on: [person_niconico_communities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_communities_order_by!]

    """filter the rows returned"""
    where: person_niconico_communities_bool_exp
  ): [person_niconico_communities!]!

  """An aggregate relationship"""
  person_niconico_communities_aggregate(
    """distinct select on columns"""
    distinct_on: [person_niconico_communities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_communities_order_by!]

    """filter the rows returned"""
    where: person_niconico_communities_bool_exp
  ): person_niconico_communities_aggregate!

  """
  fetch data from the table: "person_niconico_communities" using primary key columns
  """
  person_niconico_communities_by_pk(id: uuid!): person_niconico_communities

  """An array relationship"""
  person_niconico_plus_channels(
    """distinct select on columns"""
    distinct_on: [person_niconico_plus_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_plus_channels_order_by!]

    """filter the rows returned"""
    where: person_niconico_plus_channels_bool_exp
  ): [person_niconico_plus_channels!]!

  """An aggregate relationship"""
  person_niconico_plus_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [person_niconico_plus_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_plus_channels_order_by!]

    """filter the rows returned"""
    where: person_niconico_plus_channels_bool_exp
  ): person_niconico_plus_channels_aggregate!

  """
  fetch data from the table: "person_niconico_plus_channels" using primary key columns
  """
  person_niconico_plus_channels_by_pk(id: uuid!): person_niconico_plus_channels

  """An array relationship"""
  person_twitter_accounts(
    """distinct select on columns"""
    distinct_on: [person_twitter_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_twitter_accounts_order_by!]

    """filter the rows returned"""
    where: person_twitter_accounts_bool_exp
  ): [person_twitter_accounts!]!

  """An aggregate relationship"""
  person_twitter_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [person_twitter_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_twitter_accounts_order_by!]

    """filter the rows returned"""
    where: person_twitter_accounts_bool_exp
  ): person_twitter_accounts_aggregate!

  """
  fetch data from the table: "person_twitter_accounts" using primary key columns
  """
  person_twitter_accounts_by_pk(id: uuid!): person_twitter_accounts

  """An array relationship"""
  person_youtube_channels(
    """distinct select on columns"""
    distinct_on: [person_youtube_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_youtube_channels_order_by!]

    """filter the rows returned"""
    where: person_youtube_channels_bool_exp
  ): [person_youtube_channels!]!

  """An aggregate relationship"""
  person_youtube_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [person_youtube_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_youtube_channels_order_by!]

    """filter the rows returned"""
    where: person_youtube_channels_bool_exp
  ): person_youtube_channels_aggregate!

  """
  fetch data from the table: "person_youtube_channels" using primary key columns
  """
  person_youtube_channels_by_pk(id: uuid!): person_youtube_channels

  """
  fetch data from the table: "persons"
  """
  persons(
    """distinct select on columns"""
    distinct_on: [persons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [persons_order_by!]

    """filter the rows returned"""
    where: persons_bool_exp
  ): [persons!]!

  """
  fetch aggregated fields from the table: "persons"
  """
  persons_aggregate(
    """distinct select on columns"""
    distinct_on: [persons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [persons_order_by!]

    """filter the rows returned"""
    where: persons_bool_exp
  ): persons_aggregate!

  """fetch data from the table: "persons" using primary key columns"""
  persons_by_pk(id: uuid!): persons

  """An array relationship"""
  program_amongus_maps(
    """distinct select on columns"""
    distinct_on: [program_amongus_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_maps_order_by!]

    """filter the rows returned"""
    where: program_amongus_maps_bool_exp
  ): [program_amongus_maps!]!

  """An aggregate relationship"""
  program_amongus_maps_aggregate(
    """distinct select on columns"""
    distinct_on: [program_amongus_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_maps_order_by!]

    """filter the rows returned"""
    where: program_amongus_maps_bool_exp
  ): program_amongus_maps_aggregate!

  """
  fetch data from the table: "program_amongus_maps" using primary key columns
  """
  program_amongus_maps_by_pk(id: uuid!): program_amongus_maps

  """An array relationship"""
  program_amongus_mods(
    """distinct select on columns"""
    distinct_on: [program_amongus_mods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_mods_order_by!]

    """filter the rows returned"""
    where: program_amongus_mods_bool_exp
  ): [program_amongus_mods!]!

  """An aggregate relationship"""
  program_amongus_mods_aggregate(
    """distinct select on columns"""
    distinct_on: [program_amongus_mods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_mods_order_by!]

    """filter the rows returned"""
    where: program_amongus_mods_bool_exp
  ): program_amongus_mods_aggregate!

  """
  fetch data from the table: "program_amongus_mods" using primary key columns
  """
  program_amongus_mods_by_pk(id: uuid!): program_amongus_mods

  """An array relationship"""
  program_amongus_vanilla_versions(
    """distinct select on columns"""
    distinct_on: [program_amongus_vanilla_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_vanilla_versions_order_by!]

    """filter the rows returned"""
    where: program_amongus_vanilla_versions_bool_exp
  ): [program_amongus_vanilla_versions!]!

  """An aggregate relationship"""
  program_amongus_vanilla_versions_aggregate(
    """distinct select on columns"""
    distinct_on: [program_amongus_vanilla_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_vanilla_versions_order_by!]

    """filter the rows returned"""
    where: program_amongus_vanilla_versions_bool_exp
  ): program_amongus_vanilla_versions_aggregate!

  """
  fetch data from the table: "program_amongus_vanilla_versions" using primary key columns
  """
  program_amongus_vanilla_versions_by_pk(id: uuid!): program_amongus_vanilla_versions

  """An array relationship"""
  program_live_archives(
    """distinct select on columns"""
    distinct_on: [program_live_archives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_live_archives_order_by!]

    """filter the rows returned"""
    where: program_live_archives_bool_exp
  ): [program_live_archives!]!

  """An aggregate relationship"""
  program_live_archives_aggregate(
    """distinct select on columns"""
    distinct_on: [program_live_archives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_live_archives_order_by!]

    """filter the rows returned"""
    where: program_live_archives_bool_exp
  ): program_live_archives_aggregate!

  """
  fetch data from the table: "program_live_archives" using primary key columns
  """
  program_live_archives_by_pk(id: uuid!): program_live_archives

  """An array relationship"""
  program_niconico_videos(
    """distinct select on columns"""
    distinct_on: [program_niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_niconico_videos_order_by!]

    """filter the rows returned"""
    where: program_niconico_videos_bool_exp
  ): [program_niconico_videos!]!

  """An aggregate relationship"""
  program_niconico_videos_aggregate(
    """distinct select on columns"""
    distinct_on: [program_niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_niconico_videos_order_by!]

    """filter the rows returned"""
    where: program_niconico_videos_bool_exp
  ): program_niconico_videos_aggregate!

  """
  fetch data from the table: "program_niconico_videos" using primary key columns
  """
  program_niconico_videos_by_pk(id: uuid!): program_niconico_videos

  """An array relationship"""
  program_persons(
    """distinct select on columns"""
    distinct_on: [program_persons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_persons_order_by!]

    """filter the rows returned"""
    where: program_persons_bool_exp
  ): [program_persons!]!

  """An aggregate relationship"""
  program_persons_aggregate(
    """distinct select on columns"""
    distinct_on: [program_persons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_persons_order_by!]

    """filter the rows returned"""
    where: program_persons_bool_exp
  ): program_persons_aggregate!

  """fetch data from the table: "program_persons" using primary key columns"""
  program_persons_by_pk(id: uuid!): program_persons

  """An array relationship"""
  program_projects(
    """distinct select on columns"""
    distinct_on: [program_projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_projects_order_by!]

    """filter the rows returned"""
    where: program_projects_bool_exp
  ): [program_projects!]!

  """An aggregate relationship"""
  program_projects_aggregate(
    """distinct select on columns"""
    distinct_on: [program_projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_projects_order_by!]

    """filter the rows returned"""
    where: program_projects_bool_exp
  ): program_projects_aggregate!

  """
  fetch data from the table: "program_projects" using primary key columns
  """
  program_projects_by_pk(id: uuid!): program_projects

  """An array relationship"""
  program_twitter_announcements(
    """distinct select on columns"""
    distinct_on: [program_twitter_announcements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_twitter_announcements_order_by!]

    """filter the rows returned"""
    where: program_twitter_announcements_bool_exp
  ): [program_twitter_announcements!]!

  """An aggregate relationship"""
  program_twitter_announcements_aggregate(
    """distinct select on columns"""
    distinct_on: [program_twitter_announcements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_twitter_announcements_order_by!]

    """filter the rows returned"""
    where: program_twitter_announcements_bool_exp
  ): program_twitter_announcements_aggregate!

  """
  fetch data from the table: "program_twitter_announcements" using primary key columns
  """
  program_twitter_announcements_by_pk(id: uuid!): program_twitter_announcements

  """
  fetch data from the table: "programs"
  """
  programs(
    """distinct select on columns"""
    distinct_on: [programs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [programs_order_by!]

    """filter the rows returned"""
    where: programs_bool_exp
  ): [programs!]!

  """
  fetch aggregated fields from the table: "programs"
  """
  programs_aggregate(
    """distinct select on columns"""
    distinct_on: [programs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [programs_order_by!]

    """filter the rows returned"""
    where: programs_bool_exp
  ): programs_aggregate!

  """fetch data from the table: "programs" using primary key columns"""
  programs_by_pk(id: uuid!): programs

  """An array relationship"""
  project_niconico_videos(
    """distinct select on columns"""
    distinct_on: [project_niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_niconico_videos_order_by!]

    """filter the rows returned"""
    where: project_niconico_videos_bool_exp
  ): [project_niconico_videos!]!

  """An aggregate relationship"""
  project_niconico_videos_aggregate(
    """distinct select on columns"""
    distinct_on: [project_niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_niconico_videos_order_by!]

    """filter the rows returned"""
    where: project_niconico_videos_bool_exp
  ): project_niconico_videos_aggregate!

  """
  fetch data from the table: "project_niconico_videos" using primary key columns
  """
  project_niconico_videos_by_pk(id: uuid!): project_niconico_videos

  """
  fetch data from the table: "projects"
  """
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """
  fetch aggregated fields from the table: "projects"
  """
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(id: uuid!): projects

  """
  fetch data from the table: "twitter_accounts"
  """
  twitter_accounts(
    """distinct select on columns"""
    distinct_on: [twitter_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twitter_accounts_order_by!]

    """filter the rows returned"""
    where: twitter_accounts_bool_exp
  ): [twitter_accounts!]!

  """
  fetch aggregated fields from the table: "twitter_accounts"
  """
  twitter_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [twitter_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twitter_accounts_order_by!]

    """filter the rows returned"""
    where: twitter_accounts_bool_exp
  ): twitter_accounts_aggregate!

  """
  fetch data from the table: "twitter_accounts" using primary key columns
  """
  twitter_accounts_by_pk(id: uuid!): twitter_accounts

  """An array relationship"""
  twitter_tweet_images(
    """distinct select on columns"""
    distinct_on: [twitter_tweet_images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twitter_tweet_images_order_by!]

    """filter the rows returned"""
    where: twitter_tweet_images_bool_exp
  ): [twitter_tweet_images!]!

  """An aggregate relationship"""
  twitter_tweet_images_aggregate(
    """distinct select on columns"""
    distinct_on: [twitter_tweet_images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twitter_tweet_images_order_by!]

    """filter the rows returned"""
    where: twitter_tweet_images_bool_exp
  ): twitter_tweet_images_aggregate!

  """
  fetch data from the table: "twitter_tweet_images" using primary key columns
  """
  twitter_tweet_images_by_pk(id: uuid!): twitter_tweet_images

  """
  fetch data from the table: "twitter_tweets"
  """
  twitter_tweets(
    """distinct select on columns"""
    distinct_on: [twitter_tweets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twitter_tweets_order_by!]

    """filter the rows returned"""
    where: twitter_tweets_bool_exp
  ): [twitter_tweets!]!

  """
  fetch aggregated fields from the table: "twitter_tweets"
  """
  twitter_tweets_aggregate(
    """distinct select on columns"""
    distinct_on: [twitter_tweets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twitter_tweets_order_by!]

    """filter the rows returned"""
    where: twitter_tweets_bool_exp
  ): twitter_tweets_aggregate!

  """fetch data from the table: "twitter_tweets" using primary key columns"""
  twitter_tweets_by_pk(id: uuid!): twitter_tweets

  """
  fetch data from the table: "youtube_channels"
  """
  youtube_channels(
    """distinct select on columns"""
    distinct_on: [youtube_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [youtube_channels_order_by!]

    """filter the rows returned"""
    where: youtube_channels_bool_exp
  ): [youtube_channels!]!

  """
  fetch aggregated fields from the table: "youtube_channels"
  """
  youtube_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [youtube_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [youtube_channels_order_by!]

    """filter the rows returned"""
    where: youtube_channels_bool_exp
  ): youtube_channels_aggregate!

  """
  fetch data from the table: "youtube_channels" using primary key columns
  """
  youtube_channels_by_pk(id: uuid!): youtube_channels

  """An array relationship"""
  youtube_lives(
    """distinct select on columns"""
    distinct_on: [youtube_lives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [youtube_lives_order_by!]

    """filter the rows returned"""
    where: youtube_lives_bool_exp
  ): [youtube_lives!]!

  """An aggregate relationship"""
  youtube_lives_aggregate(
    """distinct select on columns"""
    distinct_on: [youtube_lives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [youtube_lives_order_by!]

    """filter the rows returned"""
    where: youtube_lives_bool_exp
  ): youtube_lives_aggregate!

  """fetch data from the table: "youtube_lives" using primary key columns"""
  youtube_lives_by_pk(id: uuid!): youtube_lives

  """
  fetch data from the table: "youtube_videos"
  """
  youtube_videos(
    """distinct select on columns"""
    distinct_on: [youtube_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [youtube_videos_order_by!]

    """filter the rows returned"""
    where: youtube_videos_bool_exp
  ): [youtube_videos!]!

  """
  fetch aggregated fields from the table: "youtube_videos"
  """
  youtube_videos_aggregate(
    """distinct select on columns"""
    distinct_on: [youtube_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [youtube_videos_order_by!]

    """filter the rows returned"""
    where: youtube_videos_bool_exp
  ): youtube_videos_aggregate!

  """fetch data from the table: "youtube_videos" using primary key columns"""
  youtube_videos_by_pk(id: uuid!): youtube_videos
}

type subscription_root {
  """
  fetch data from the table: "amongus_maps"
  """
  amongus_maps(
    """distinct select on columns"""
    distinct_on: [amongus_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_maps_order_by!]

    """filter the rows returned"""
    where: amongus_maps_bool_exp
  ): [amongus_maps!]!

  """
  fetch aggregated fields from the table: "amongus_maps"
  """
  amongus_maps_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_maps_order_by!]

    """filter the rows returned"""
    where: amongus_maps_bool_exp
  ): amongus_maps_aggregate!

  """fetch data from the table: "amongus_maps" using primary key columns"""
  amongus_maps_by_pk(id: uuid!): amongus_maps

  """
  fetch data from the table in a streaming manner: "amongus_maps"
  """
  amongus_maps_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [amongus_maps_stream_cursor_input]!

    """filter the rows returned"""
    where: amongus_maps_bool_exp
  ): [amongus_maps!]!

  """
  fetch data from the table: "amongus_match_mods"
  """
  amongus_match_mods(
    """distinct select on columns"""
    distinct_on: [amongus_match_mods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_match_mods_order_by!]

    """filter the rows returned"""
    where: amongus_match_mods_bool_exp
  ): [amongus_match_mods!]!

  """
  fetch aggregated fields from the table: "amongus_match_mods"
  """
  amongus_match_mods_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_match_mods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_match_mods_order_by!]

    """filter the rows returned"""
    where: amongus_match_mods_bool_exp
  ): amongus_match_mods_aggregate!

  """
  fetch data from the table: "amongus_match_mods" using primary key columns
  """
  amongus_match_mods_by_pk(id: uuid!): amongus_match_mods

  """
  fetch data from the table in a streaming manner: "amongus_match_mods"
  """
  amongus_match_mods_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [amongus_match_mods_stream_cursor_input]!

    """filter the rows returned"""
    where: amongus_match_mods_bool_exp
  ): [amongus_match_mods!]!

  """
  fetch data from the table: "amongus_match_player_result_roles"
  """
  amongus_match_player_result_roles(
    """distinct select on columns"""
    distinct_on: [amongus_match_player_result_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_match_player_result_roles_order_by!]

    """filter the rows returned"""
    where: amongus_match_player_result_roles_bool_exp
  ): [amongus_match_player_result_roles!]!

  """
  fetch aggregated fields from the table: "amongus_match_player_result_roles"
  """
  amongus_match_player_result_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_match_player_result_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_match_player_result_roles_order_by!]

    """filter the rows returned"""
    where: amongus_match_player_result_roles_bool_exp
  ): amongus_match_player_result_roles_aggregate!

  """
  fetch data from the table: "amongus_match_player_result_roles" using primary key columns
  """
  amongus_match_player_result_roles_by_pk(id: uuid!): amongus_match_player_result_roles

  """
  fetch data from the table in a streaming manner: "amongus_match_player_result_roles"
  """
  amongus_match_player_result_roles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [amongus_match_player_result_roles_stream_cursor_input]!

    """filter the rows returned"""
    where: amongus_match_player_result_roles_bool_exp
  ): [amongus_match_player_result_roles!]!

  """An array relationship"""
  amongus_match_players(
    """distinct select on columns"""
    distinct_on: [amongus_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_match_players_order_by!]

    """filter the rows returned"""
    where: amongus_match_players_bool_exp
  ): [amongus_match_players!]!

  """An aggregate relationship"""
  amongus_match_players_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_match_players_order_by!]

    """filter the rows returned"""
    where: amongus_match_players_bool_exp
  ): amongus_match_players_aggregate!

  """
  fetch data from the table: "amongus_match_players" using primary key columns
  """
  amongus_match_players_by_pk(id: uuid!): amongus_match_players

  """
  fetch data from the table in a streaming manner: "amongus_match_players"
  """
  amongus_match_players_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [amongus_match_players_stream_cursor_input]!

    """filter the rows returned"""
    where: amongus_match_players_bool_exp
  ): [amongus_match_players!]!

  """An array relationship"""
  amongus_matches(
    """distinct select on columns"""
    distinct_on: [amongus_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_matches_order_by!]

    """filter the rows returned"""
    where: amongus_matches_bool_exp
  ): [amongus_matches!]!

  """An aggregate relationship"""
  amongus_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_matches_order_by!]

    """filter the rows returned"""
    where: amongus_matches_bool_exp
  ): amongus_matches_aggregate!

  """fetch data from the table: "amongus_matches" using primary key columns"""
  amongus_matches_by_pk(id: uuid!): amongus_matches

  """
  fetch data from the table in a streaming manner: "amongus_matches"
  """
  amongus_matches_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [amongus_matches_stream_cursor_input]!

    """filter the rows returned"""
    where: amongus_matches_bool_exp
  ): [amongus_matches!]!

  """
  fetch data from the table: "amongus_mod_versions"
  """
  amongus_mod_versions(
    """distinct select on columns"""
    distinct_on: [amongus_mod_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_mod_versions_order_by!]

    """filter the rows returned"""
    where: amongus_mod_versions_bool_exp
  ): [amongus_mod_versions!]!

  """
  fetch aggregated fields from the table: "amongus_mod_versions"
  """
  amongus_mod_versions_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_mod_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_mod_versions_order_by!]

    """filter the rows returned"""
    where: amongus_mod_versions_bool_exp
  ): amongus_mod_versions_aggregate!

  """
  fetch data from the table: "amongus_mod_versions" using primary key columns
  """
  amongus_mod_versions_by_pk(id: uuid!): amongus_mod_versions

  """
  fetch data from the table in a streaming manner: "amongus_mod_versions"
  """
  amongus_mod_versions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [amongus_mod_versions_stream_cursor_input]!

    """filter the rows returned"""
    where: amongus_mod_versions_bool_exp
  ): [amongus_mod_versions!]!

  """
  fetch data from the table: "amongus_mods"
  """
  amongus_mods(
    """distinct select on columns"""
    distinct_on: [amongus_mods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_mods_order_by!]

    """filter the rows returned"""
    where: amongus_mods_bool_exp
  ): [amongus_mods!]!

  """
  fetch aggregated fields from the table: "amongus_mods"
  """
  amongus_mods_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_mods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_mods_order_by!]

    """filter the rows returned"""
    where: amongus_mods_bool_exp
  ): amongus_mods_aggregate!

  """fetch data from the table: "amongus_mods" using primary key columns"""
  amongus_mods_by_pk(id: uuid!): amongus_mods

  """
  fetch data from the table in a streaming manner: "amongus_mods"
  """
  amongus_mods_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [amongus_mods_stream_cursor_input]!

    """filter the rows returned"""
    where: amongus_mods_bool_exp
  ): [amongus_mods!]!

  """
  fetch data from the table: "amongus_roles"
  """
  amongus_roles(
    """distinct select on columns"""
    distinct_on: [amongus_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_roles_order_by!]

    """filter the rows returned"""
    where: amongus_roles_bool_exp
  ): [amongus_roles!]!

  """
  fetch aggregated fields from the table: "amongus_roles"
  """
  amongus_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_roles_order_by!]

    """filter the rows returned"""
    where: amongus_roles_bool_exp
  ): amongus_roles_aggregate!

  """fetch data from the table: "amongus_roles" using primary key columns"""
  amongus_roles_by_pk(id: uuid!): amongus_roles

  """
  fetch data from the table in a streaming manner: "amongus_roles"
  """
  amongus_roles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [amongus_roles_stream_cursor_input]!

    """filter the rows returned"""
    where: amongus_roles_bool_exp
  ): [amongus_roles!]!

  """
  fetch data from the table: "amongus_vanilla_versions"
  """
  amongus_vanilla_versions(
    """distinct select on columns"""
    distinct_on: [amongus_vanilla_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_vanilla_versions_order_by!]

    """filter the rows returned"""
    where: amongus_vanilla_versions_bool_exp
  ): [amongus_vanilla_versions!]!

  """
  fetch aggregated fields from the table: "amongus_vanilla_versions"
  """
  amongus_vanilla_versions_aggregate(
    """distinct select on columns"""
    distinct_on: [amongus_vanilla_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongus_vanilla_versions_order_by!]

    """filter the rows returned"""
    where: amongus_vanilla_versions_bool_exp
  ): amongus_vanilla_versions_aggregate!

  """
  fetch data from the table: "amongus_vanilla_versions" using primary key columns
  """
  amongus_vanilla_versions_by_pk(id: uuid!): amongus_vanilla_versions

  """
  fetch data from the table in a streaming manner: "amongus_vanilla_versions"
  """
  amongus_vanilla_versions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [amongus_vanilla_versions_stream_cursor_input]!

    """filter the rows returned"""
    where: amongus_vanilla_versions_bool_exp
  ): [amongus_vanilla_versions!]!

  """
  fetch data from the table: "amongusvr_maps"
  """
  amongusvr_maps(
    """distinct select on columns"""
    distinct_on: [amongusvr_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongusvr_maps_order_by!]

    """filter the rows returned"""
    where: amongusvr_maps_bool_exp
  ): [amongusvr_maps!]!

  """
  fetch aggregated fields from the table: "amongusvr_maps"
  """
  amongusvr_maps_aggregate(
    """distinct select on columns"""
    distinct_on: [amongusvr_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongusvr_maps_order_by!]

    """filter the rows returned"""
    where: amongusvr_maps_bool_exp
  ): amongusvr_maps_aggregate!

  """fetch data from the table: "amongusvr_maps" using primary key columns"""
  amongusvr_maps_by_pk(id: uuid!): amongusvr_maps

  """
  fetch data from the table in a streaming manner: "amongusvr_maps"
  """
  amongusvr_maps_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [amongusvr_maps_stream_cursor_input]!

    """filter the rows returned"""
    where: amongusvr_maps_bool_exp
  ): [amongusvr_maps!]!

  """An array relationship"""
  amongusvr_match_players(
    """distinct select on columns"""
    distinct_on: [amongusvr_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongusvr_match_players_order_by!]

    """filter the rows returned"""
    where: amongusvr_match_players_bool_exp
  ): [amongusvr_match_players!]!

  """An aggregate relationship"""
  amongusvr_match_players_aggregate(
    """distinct select on columns"""
    distinct_on: [amongusvr_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongusvr_match_players_order_by!]

    """filter the rows returned"""
    where: amongusvr_match_players_bool_exp
  ): amongusvr_match_players_aggregate!

  """
  fetch data from the table: "amongusvr_match_players" using primary key columns
  """
  amongusvr_match_players_by_pk(id: uuid!): amongusvr_match_players

  """
  fetch data from the table in a streaming manner: "amongusvr_match_players"
  """
  amongusvr_match_players_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [amongusvr_match_players_stream_cursor_input]!

    """filter the rows returned"""
    where: amongusvr_match_players_bool_exp
  ): [amongusvr_match_players!]!

  """An array relationship"""
  amongusvr_matches(
    """distinct select on columns"""
    distinct_on: [amongusvr_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongusvr_matches_order_by!]

    """filter the rows returned"""
    where: amongusvr_matches_bool_exp
  ): [amongusvr_matches!]!

  """An aggregate relationship"""
  amongusvr_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [amongusvr_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [amongusvr_matches_order_by!]

    """filter the rows returned"""
    where: amongusvr_matches_bool_exp
  ): amongusvr_matches_aggregate!

  """
  fetch data from the table: "amongusvr_matches" using primary key columns
  """
  amongusvr_matches_by_pk(id: uuid!): amongusvr_matches

  """
  fetch data from the table in a streaming manner: "amongusvr_matches"
  """
  amongusvr_matches_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [amongusvr_matches_stream_cursor_input]!

    """filter the rows returned"""
    where: amongusvr_matches_bool_exp
  ): [amongusvr_matches!]!

  """An array relationship"""
  fallguys_custom_round_twitter_announcements(
    """distinct select on columns"""
    distinct_on: [fallguys_custom_round_twitter_announcements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_custom_round_twitter_announcements_order_by!]

    """filter the rows returned"""
    where: fallguys_custom_round_twitter_announcements_bool_exp
  ): [fallguys_custom_round_twitter_announcements!]!

  """An aggregate relationship"""
  fallguys_custom_round_twitter_announcements_aggregate(
    """distinct select on columns"""
    distinct_on: [fallguys_custom_round_twitter_announcements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_custom_round_twitter_announcements_order_by!]

    """filter the rows returned"""
    where: fallguys_custom_round_twitter_announcements_bool_exp
  ): fallguys_custom_round_twitter_announcements_aggregate!

  """
  fetch data from the table: "fallguys_custom_round_twitter_announcements" using primary key columns
  """
  fallguys_custom_round_twitter_announcements_by_pk(id: uuid!): fallguys_custom_round_twitter_announcements

  """
  fetch data from the table in a streaming manner: "fallguys_custom_round_twitter_announcements"
  """
  fallguys_custom_round_twitter_announcements_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [fallguys_custom_round_twitter_announcements_stream_cursor_input]!

    """filter the rows returned"""
    where: fallguys_custom_round_twitter_announcements_bool_exp
  ): [fallguys_custom_round_twitter_announcements!]!

  """An array relationship"""
  fallguys_custom_rounds(
    """distinct select on columns"""
    distinct_on: [fallguys_custom_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_custom_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_custom_rounds_bool_exp
  ): [fallguys_custom_rounds!]!

  """An aggregate relationship"""
  fallguys_custom_rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [fallguys_custom_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_custom_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_custom_rounds_bool_exp
  ): fallguys_custom_rounds_aggregate!

  """
  fetch data from the table: "fallguys_custom_rounds" using primary key columns
  """
  fallguys_custom_rounds_by_pk(id: uuid!): fallguys_custom_rounds

  """
  fetch data from the table in a streaming manner: "fallguys_custom_rounds"
  """
  fallguys_custom_rounds_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [fallguys_custom_rounds_stream_cursor_input]!

    """filter the rows returned"""
    where: fallguys_custom_rounds_bool_exp
  ): [fallguys_custom_rounds!]!

  """An array relationship"""
  fallguys_match_rounds(
    """distinct select on columns"""
    distinct_on: [fallguys_match_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_match_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_match_rounds_bool_exp
  ): [fallguys_match_rounds!]!

  """An aggregate relationship"""
  fallguys_match_rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [fallguys_match_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_match_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_match_rounds_bool_exp
  ): fallguys_match_rounds_aggregate!

  """
  fetch data from the table: "fallguys_match_rounds" using primary key columns
  """
  fallguys_match_rounds_by_pk(id: uuid!): fallguys_match_rounds

  """
  fetch data from the table in a streaming manner: "fallguys_match_rounds"
  """
  fallguys_match_rounds_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [fallguys_match_rounds_stream_cursor_input]!

    """filter the rows returned"""
    where: fallguys_match_rounds_bool_exp
  ): [fallguys_match_rounds!]!

  """An array relationship"""
  fallguys_matches(
    """distinct select on columns"""
    distinct_on: [fallguys_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_matches_order_by!]

    """filter the rows returned"""
    where: fallguys_matches_bool_exp
  ): [fallguys_matches!]!

  """An aggregate relationship"""
  fallguys_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [fallguys_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_matches_order_by!]

    """filter the rows returned"""
    where: fallguys_matches_bool_exp
  ): fallguys_matches_aggregate!

  """
  fetch data from the table: "fallguys_matches" using primary key columns
  """
  fallguys_matches_by_pk(id: uuid!): fallguys_matches

  """
  fetch data from the table in a streaming manner: "fallguys_matches"
  """
  fallguys_matches_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [fallguys_matches_stream_cursor_input]!

    """filter the rows returned"""
    where: fallguys_matches_bool_exp
  ): [fallguys_matches!]!

  """
  fetch data from the table: "fallguys_rounds"
  """
  fallguys_rounds(
    """distinct select on columns"""
    distinct_on: [fallguys_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_rounds_bool_exp
  ): [fallguys_rounds!]!

  """
  fetch aggregated fields from the table: "fallguys_rounds"
  """
  fallguys_rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [fallguys_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fallguys_rounds_order_by!]

    """filter the rows returned"""
    where: fallguys_rounds_bool_exp
  ): fallguys_rounds_aggregate!

  """fetch data from the table: "fallguys_rounds" using primary key columns"""
  fallguys_rounds_by_pk(id: uuid!): fallguys_rounds

  """
  fetch data from the table in a streaming manner: "fallguys_rounds"
  """
  fallguys_rounds_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [fallguys_rounds_stream_cursor_input]!

    """filter the rows returned"""
    where: fallguys_rounds_bool_exp
  ): [fallguys_rounds!]!

  """
  fetch data from the table: "fediverse_accounts"
  """
  fediverse_accounts(
    """distinct select on columns"""
    distinct_on: [fediverse_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fediverse_accounts_order_by!]

    """filter the rows returned"""
    where: fediverse_accounts_bool_exp
  ): [fediverse_accounts!]!

  """
  fetch aggregated fields from the table: "fediverse_accounts"
  """
  fediverse_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [fediverse_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fediverse_accounts_order_by!]

    """filter the rows returned"""
    where: fediverse_accounts_bool_exp
  ): fediverse_accounts_aggregate!

  """
  fetch data from the table: "fediverse_accounts" using primary key columns
  """
  fediverse_accounts_by_pk(id: uuid!): fediverse_accounts

  """
  fetch data from the table in a streaming manner: "fediverse_accounts"
  """
  fediverse_accounts_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [fediverse_accounts_stream_cursor_input]!

    """filter the rows returned"""
    where: fediverse_accounts_bool_exp
  ): [fediverse_accounts!]!

  """
  fetch data from the table: "games"
  """
  games(
    """distinct select on columns"""
    distinct_on: [games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [games_order_by!]

    """filter the rows returned"""
    where: games_bool_exp
  ): [games!]!

  """
  fetch aggregated fields from the table: "games"
  """
  games_aggregate(
    """distinct select on columns"""
    distinct_on: [games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [games_order_by!]

    """filter the rows returned"""
    where: games_bool_exp
  ): games_aggregate!

  """fetch data from the table: "games" using primary key columns"""
  games_by_pk(id: uuid!): games

  """
  fetch data from the table in a streaming manner: "games"
  """
  games_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [games_stream_cursor_input]!

    """filter the rows returned"""
    where: games_bool_exp
  ): [games!]!

  """
  fetch data from the table: "mariokart8deluxe_battle_courses"
  """
  mariokart8deluxe_battle_courses(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_courses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_courses_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_courses_bool_exp
  ): [mariokart8deluxe_battle_courses!]!

  """
  fetch aggregated fields from the table: "mariokart8deluxe_battle_courses"
  """
  mariokart8deluxe_battle_courses_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_courses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_courses_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_courses_bool_exp
  ): mariokart8deluxe_battle_courses_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_battle_courses" using primary key columns
  """
  mariokart8deluxe_battle_courses_by_pk(id: uuid!): mariokart8deluxe_battle_courses

  """
  fetch data from the table in a streaming manner: "mariokart8deluxe_battle_courses"
  """
  mariokart8deluxe_battle_courses_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [mariokart8deluxe_battle_courses_stream_cursor_input]!

    """filter the rows returned"""
    where: mariokart8deluxe_battle_courses_bool_exp
  ): [mariokart8deluxe_battle_courses!]!

  """An array relationship"""
  mariokart8deluxe_battle_match_players(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_match_players_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_match_players_bool_exp
  ): [mariokart8deluxe_battle_match_players!]!

  """An aggregate relationship"""
  mariokart8deluxe_battle_match_players_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_match_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_match_players_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_match_players_bool_exp
  ): mariokart8deluxe_battle_match_players_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_battle_match_players" using primary key columns
  """
  mariokart8deluxe_battle_match_players_by_pk(id: uuid!): mariokart8deluxe_battle_match_players

  """
  fetch data from the table in a streaming manner: "mariokart8deluxe_battle_match_players"
  """
  mariokart8deluxe_battle_match_players_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [mariokart8deluxe_battle_match_players_stream_cursor_input]!

    """filter the rows returned"""
    where: mariokart8deluxe_battle_match_players_bool_exp
  ): [mariokart8deluxe_battle_match_players!]!

  """An array relationship"""
  mariokart8deluxe_battle_matches(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_matches_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_matches_bool_exp
  ): [mariokart8deluxe_battle_matches!]!

  """An aggregate relationship"""
  mariokart8deluxe_battle_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_matches_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_matches_bool_exp
  ): mariokart8deluxe_battle_matches_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_battle_matches" using primary key columns
  """
  mariokart8deluxe_battle_matches_by_pk(id: uuid!): mariokart8deluxe_battle_matches

  """
  fetch data from the table in a streaming manner: "mariokart8deluxe_battle_matches"
  """
  mariokart8deluxe_battle_matches_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [mariokart8deluxe_battle_matches_stream_cursor_input]!

    """filter the rows returned"""
    where: mariokart8deluxe_battle_matches_bool_exp
  ): [mariokart8deluxe_battle_matches!]!

  """
  fetch data from the table: "mariokart8deluxe_battle_rules"
  """
  mariokart8deluxe_battle_rules(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_rules_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_rules_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_rules_bool_exp
  ): [mariokart8deluxe_battle_rules!]!

  """
  fetch aggregated fields from the table: "mariokart8deluxe_battle_rules"
  """
  mariokart8deluxe_battle_rules_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_battle_rules_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_battle_rules_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_battle_rules_bool_exp
  ): mariokart8deluxe_battle_rules_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_battle_rules" using primary key columns
  """
  mariokart8deluxe_battle_rules_by_pk(id: uuid!): mariokart8deluxe_battle_rules

  """
  fetch data from the table in a streaming manner: "mariokart8deluxe_battle_rules"
  """
  mariokart8deluxe_battle_rules_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [mariokart8deluxe_battle_rules_stream_cursor_input]!

    """filter the rows returned"""
    where: mariokart8deluxe_battle_rules_bool_exp
  ): [mariokart8deluxe_battle_rules!]!

  """
  fetch data from the table: "mariokart8deluxe_consoles"
  """
  mariokart8deluxe_consoles(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_consoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_consoles_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_consoles_bool_exp
  ): [mariokart8deluxe_consoles!]!

  """
  fetch aggregated fields from the table: "mariokart8deluxe_consoles"
  """
  mariokart8deluxe_consoles_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_consoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_consoles_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_consoles_bool_exp
  ): mariokart8deluxe_consoles_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_consoles" using primary key columns
  """
  mariokart8deluxe_consoles_by_pk(id: uuid!): mariokart8deluxe_consoles

  """
  fetch data from the table in a streaming manner: "mariokart8deluxe_consoles"
  """
  mariokart8deluxe_consoles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [mariokart8deluxe_consoles_stream_cursor_input]!

    """filter the rows returned"""
    where: mariokart8deluxe_consoles_bool_exp
  ): [mariokart8deluxe_consoles!]!

  """An array relationship"""
  mariokart8deluxe_courses(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_courses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_courses_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_courses_bool_exp
  ): [mariokart8deluxe_courses!]!

  """An aggregate relationship"""
  mariokart8deluxe_courses_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_courses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_courses_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_courses_bool_exp
  ): mariokart8deluxe_courses_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_courses" using primary key columns
  """
  mariokart8deluxe_courses_by_pk(id: uuid!): mariokart8deluxe_courses

  """
  fetch data from the table in a streaming manner: "mariokart8deluxe_courses"
  """
  mariokart8deluxe_courses_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [mariokart8deluxe_courses_stream_cursor_input]!

    """filter the rows returned"""
    where: mariokart8deluxe_courses_bool_exp
  ): [mariokart8deluxe_courses!]!

  """
  fetch data from the table: "mariokart8deluxe_cups"
  """
  mariokart8deluxe_cups(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_cups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_cups_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_cups_bool_exp
  ): [mariokart8deluxe_cups!]!

  """
  fetch aggregated fields from the table: "mariokart8deluxe_cups"
  """
  mariokart8deluxe_cups_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_cups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_cups_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_cups_bool_exp
  ): mariokart8deluxe_cups_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_cups" using primary key columns
  """
  mariokart8deluxe_cups_by_pk(id: uuid!): mariokart8deluxe_cups

  """
  fetch data from the table in a streaming manner: "mariokart8deluxe_cups"
  """
  mariokart8deluxe_cups_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [mariokart8deluxe_cups_stream_cursor_input]!

    """filter the rows returned"""
    where: mariokart8deluxe_cups_bool_exp
  ): [mariokart8deluxe_cups!]!

  """An array relationship"""
  mariokart8deluxe_race_players(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_race_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_race_players_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_race_players_bool_exp
  ): [mariokart8deluxe_race_players!]!

  """An aggregate relationship"""
  mariokart8deluxe_race_players_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_race_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_race_players_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_race_players_bool_exp
  ): mariokart8deluxe_race_players_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_race_players" using primary key columns
  """
  mariokart8deluxe_race_players_by_pk(id: uuid!): mariokart8deluxe_race_players

  """
  fetch data from the table in a streaming manner: "mariokart8deluxe_race_players"
  """
  mariokart8deluxe_race_players_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [mariokart8deluxe_race_players_stream_cursor_input]!

    """filter the rows returned"""
    where: mariokart8deluxe_race_players_bool_exp
  ): [mariokart8deluxe_race_players!]!

  """
  fetch data from the table: "mariokart8deluxe_race_rules"
  """
  mariokart8deluxe_race_rules(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_race_rules_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_race_rules_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_race_rules_bool_exp
  ): [mariokart8deluxe_race_rules!]!

  """
  fetch aggregated fields from the table: "mariokart8deluxe_race_rules"
  """
  mariokart8deluxe_race_rules_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_race_rules_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_race_rules_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_race_rules_bool_exp
  ): mariokart8deluxe_race_rules_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_race_rules" using primary key columns
  """
  mariokart8deluxe_race_rules_by_pk(id: uuid!): mariokart8deluxe_race_rules

  """
  fetch data from the table in a streaming manner: "mariokart8deluxe_race_rules"
  """
  mariokart8deluxe_race_rules_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [mariokart8deluxe_race_rules_stream_cursor_input]!

    """filter the rows returned"""
    where: mariokart8deluxe_race_rules_bool_exp
  ): [mariokart8deluxe_race_rules!]!

  """An array relationship"""
  mariokart8deluxe_races(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_races_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_races_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_races_bool_exp
  ): [mariokart8deluxe_races!]!

  """An aggregate relationship"""
  mariokart8deluxe_races_aggregate(
    """distinct select on columns"""
    distinct_on: [mariokart8deluxe_races_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mariokart8deluxe_races_order_by!]

    """filter the rows returned"""
    where: mariokart8deluxe_races_bool_exp
  ): mariokart8deluxe_races_aggregate!

  """
  fetch data from the table: "mariokart8deluxe_races" using primary key columns
  """
  mariokart8deluxe_races_by_pk(id: uuid!): mariokart8deluxe_races

  """
  fetch data from the table in a streaming manner: "mariokart8deluxe_races"
  """
  mariokart8deluxe_races_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [mariokart8deluxe_races_stream_cursor_input]!

    """filter the rows returned"""
    where: mariokart8deluxe_races_bool_exp
  ): [mariokart8deluxe_races!]!

  """
  fetch data from the table: "niconico_accounts"
  """
  niconico_accounts(
    """distinct select on columns"""
    distinct_on: [niconico_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_accounts_order_by!]

    """filter the rows returned"""
    where: niconico_accounts_bool_exp
  ): [niconico_accounts!]!

  """
  fetch aggregated fields from the table: "niconico_accounts"
  """
  niconico_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [niconico_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_accounts_order_by!]

    """filter the rows returned"""
    where: niconico_accounts_bool_exp
  ): niconico_accounts_aggregate!

  """
  fetch data from the table: "niconico_accounts" using primary key columns
  """
  niconico_accounts_by_pk(id: uuid!): niconico_accounts

  """
  fetch data from the table in a streaming manner: "niconico_accounts"
  """
  niconico_accounts_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [niconico_accounts_stream_cursor_input]!

    """filter the rows returned"""
    where: niconico_accounts_bool_exp
  ): [niconico_accounts!]!

  """
  fetch data from the table: "niconico_channels"
  """
  niconico_channels(
    """distinct select on columns"""
    distinct_on: [niconico_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_channels_order_by!]

    """filter the rows returned"""
    where: niconico_channels_bool_exp
  ): [niconico_channels!]!

  """
  fetch aggregated fields from the table: "niconico_channels"
  """
  niconico_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [niconico_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_channels_order_by!]

    """filter the rows returned"""
    where: niconico_channels_bool_exp
  ): niconico_channels_aggregate!

  """
  fetch data from the table: "niconico_channels" using primary key columns
  """
  niconico_channels_by_pk(id: uuid!): niconico_channels

  """
  fetch data from the table in a streaming manner: "niconico_channels"
  """
  niconico_channels_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [niconico_channels_stream_cursor_input]!

    """filter the rows returned"""
    where: niconico_channels_bool_exp
  ): [niconico_channels!]!

  """
  fetch data from the table: "niconico_communities"
  """
  niconico_communities(
    """distinct select on columns"""
    distinct_on: [niconico_communities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_communities_order_by!]

    """filter the rows returned"""
    where: niconico_communities_bool_exp
  ): [niconico_communities!]!

  """
  fetch aggregated fields from the table: "niconico_communities"
  """
  niconico_communities_aggregate(
    """distinct select on columns"""
    distinct_on: [niconico_communities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_communities_order_by!]

    """filter the rows returned"""
    where: niconico_communities_bool_exp
  ): niconico_communities_aggregate!

  """
  fetch data from the table: "niconico_communities" using primary key columns
  """
  niconico_communities_by_pk(id: uuid!): niconico_communities

  """
  fetch data from the table in a streaming manner: "niconico_communities"
  """
  niconico_communities_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [niconico_communities_stream_cursor_input]!

    """filter the rows returned"""
    where: niconico_communities_bool_exp
  ): [niconico_communities!]!

  """
  fetch data from the table: "niconico_plus_channels"
  """
  niconico_plus_channels(
    """distinct select on columns"""
    distinct_on: [niconico_plus_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_plus_channels_order_by!]

    """filter the rows returned"""
    where: niconico_plus_channels_bool_exp
  ): [niconico_plus_channels!]!

  """
  fetch aggregated fields from the table: "niconico_plus_channels"
  """
  niconico_plus_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [niconico_plus_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_plus_channels_order_by!]

    """filter the rows returned"""
    where: niconico_plus_channels_bool_exp
  ): niconico_plus_channels_aggregate!

  """
  fetch data from the table: "niconico_plus_channels" using primary key columns
  """
  niconico_plus_channels_by_pk(id: uuid!): niconico_plus_channels

  """
  fetch data from the table in a streaming manner: "niconico_plus_channels"
  """
  niconico_plus_channels_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [niconico_plus_channels_stream_cursor_input]!

    """filter the rows returned"""
    where: niconico_plus_channels_bool_exp
  ): [niconico_plus_channels!]!

  """
  fetch data from the table: "niconico_videos"
  """
  niconico_videos(
    """distinct select on columns"""
    distinct_on: [niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_videos_order_by!]

    """filter the rows returned"""
    where: niconico_videos_bool_exp
  ): [niconico_videos!]!

  """
  fetch aggregated fields from the table: "niconico_videos"
  """
  niconico_videos_aggregate(
    """distinct select on columns"""
    distinct_on: [niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [niconico_videos_order_by!]

    """filter the rows returned"""
    where: niconico_videos_bool_exp
  ): niconico_videos_aggregate!

  """fetch data from the table: "niconico_videos" using primary key columns"""
  niconico_videos_by_pk(id: uuid!): niconico_videos

  """
  fetch data from the table in a streaming manner: "niconico_videos"
  """
  niconico_videos_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [niconico_videos_stream_cursor_input]!

    """filter the rows returned"""
    where: niconico_videos_bool_exp
  ): [niconico_videos!]!

  """An array relationship"""
  person_fediverse_accounts(
    """distinct select on columns"""
    distinct_on: [person_fediverse_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_fediverse_accounts_order_by!]

    """filter the rows returned"""
    where: person_fediverse_accounts_bool_exp
  ): [person_fediverse_accounts!]!

  """An aggregate relationship"""
  person_fediverse_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [person_fediverse_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_fediverse_accounts_order_by!]

    """filter the rows returned"""
    where: person_fediverse_accounts_bool_exp
  ): person_fediverse_accounts_aggregate!

  """
  fetch data from the table: "person_fediverse_accounts" using primary key columns
  """
  person_fediverse_accounts_by_pk(id: uuid!): person_fediverse_accounts

  """
  fetch data from the table in a streaming manner: "person_fediverse_accounts"
  """
  person_fediverse_accounts_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [person_fediverse_accounts_stream_cursor_input]!

    """filter the rows returned"""
    where: person_fediverse_accounts_bool_exp
  ): [person_fediverse_accounts!]!

  """An array relationship"""
  person_niconico_accounts(
    """distinct select on columns"""
    distinct_on: [person_niconico_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_accounts_order_by!]

    """filter the rows returned"""
    where: person_niconico_accounts_bool_exp
  ): [person_niconico_accounts!]!

  """An aggregate relationship"""
  person_niconico_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [person_niconico_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_accounts_order_by!]

    """filter the rows returned"""
    where: person_niconico_accounts_bool_exp
  ): person_niconico_accounts_aggregate!

  """
  fetch data from the table: "person_niconico_accounts" using primary key columns
  """
  person_niconico_accounts_by_pk(id: uuid!): person_niconico_accounts

  """
  fetch data from the table in a streaming manner: "person_niconico_accounts"
  """
  person_niconico_accounts_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [person_niconico_accounts_stream_cursor_input]!

    """filter the rows returned"""
    where: person_niconico_accounts_bool_exp
  ): [person_niconico_accounts!]!

  """An array relationship"""
  person_niconico_channels(
    """distinct select on columns"""
    distinct_on: [person_niconico_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_channels_order_by!]

    """filter the rows returned"""
    where: person_niconico_channels_bool_exp
  ): [person_niconico_channels!]!

  """An aggregate relationship"""
  person_niconico_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [person_niconico_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_channels_order_by!]

    """filter the rows returned"""
    where: person_niconico_channels_bool_exp
  ): person_niconico_channels_aggregate!

  """
  fetch data from the table: "person_niconico_channels" using primary key columns
  """
  person_niconico_channels_by_pk(id: uuid!): person_niconico_channels

  """
  fetch data from the table in a streaming manner: "person_niconico_channels"
  """
  person_niconico_channels_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [person_niconico_channels_stream_cursor_input]!

    """filter the rows returned"""
    where: person_niconico_channels_bool_exp
  ): [person_niconico_channels!]!

  """An array relationship"""
  person_niconico_communities(
    """distinct select on columns"""
    distinct_on: [person_niconico_communities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_communities_order_by!]

    """filter the rows returned"""
    where: person_niconico_communities_bool_exp
  ): [person_niconico_communities!]!

  """An aggregate relationship"""
  person_niconico_communities_aggregate(
    """distinct select on columns"""
    distinct_on: [person_niconico_communities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_communities_order_by!]

    """filter the rows returned"""
    where: person_niconico_communities_bool_exp
  ): person_niconico_communities_aggregate!

  """
  fetch data from the table: "person_niconico_communities" using primary key columns
  """
  person_niconico_communities_by_pk(id: uuid!): person_niconico_communities

  """
  fetch data from the table in a streaming manner: "person_niconico_communities"
  """
  person_niconico_communities_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [person_niconico_communities_stream_cursor_input]!

    """filter the rows returned"""
    where: person_niconico_communities_bool_exp
  ): [person_niconico_communities!]!

  """An array relationship"""
  person_niconico_plus_channels(
    """distinct select on columns"""
    distinct_on: [person_niconico_plus_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_plus_channels_order_by!]

    """filter the rows returned"""
    where: person_niconico_plus_channels_bool_exp
  ): [person_niconico_plus_channels!]!

  """An aggregate relationship"""
  person_niconico_plus_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [person_niconico_plus_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_niconico_plus_channels_order_by!]

    """filter the rows returned"""
    where: person_niconico_plus_channels_bool_exp
  ): person_niconico_plus_channels_aggregate!

  """
  fetch data from the table: "person_niconico_plus_channels" using primary key columns
  """
  person_niconico_plus_channels_by_pk(id: uuid!): person_niconico_plus_channels

  """
  fetch data from the table in a streaming manner: "person_niconico_plus_channels"
  """
  person_niconico_plus_channels_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [person_niconico_plus_channels_stream_cursor_input]!

    """filter the rows returned"""
    where: person_niconico_plus_channels_bool_exp
  ): [person_niconico_plus_channels!]!

  """An array relationship"""
  person_twitter_accounts(
    """distinct select on columns"""
    distinct_on: [person_twitter_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_twitter_accounts_order_by!]

    """filter the rows returned"""
    where: person_twitter_accounts_bool_exp
  ): [person_twitter_accounts!]!

  """An aggregate relationship"""
  person_twitter_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [person_twitter_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_twitter_accounts_order_by!]

    """filter the rows returned"""
    where: person_twitter_accounts_bool_exp
  ): person_twitter_accounts_aggregate!

  """
  fetch data from the table: "person_twitter_accounts" using primary key columns
  """
  person_twitter_accounts_by_pk(id: uuid!): person_twitter_accounts

  """
  fetch data from the table in a streaming manner: "person_twitter_accounts"
  """
  person_twitter_accounts_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [person_twitter_accounts_stream_cursor_input]!

    """filter the rows returned"""
    where: person_twitter_accounts_bool_exp
  ): [person_twitter_accounts!]!

  """An array relationship"""
  person_youtube_channels(
    """distinct select on columns"""
    distinct_on: [person_youtube_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_youtube_channels_order_by!]

    """filter the rows returned"""
    where: person_youtube_channels_bool_exp
  ): [person_youtube_channels!]!

  """An aggregate relationship"""
  person_youtube_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [person_youtube_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_youtube_channels_order_by!]

    """filter the rows returned"""
    where: person_youtube_channels_bool_exp
  ): person_youtube_channels_aggregate!

  """
  fetch data from the table: "person_youtube_channels" using primary key columns
  """
  person_youtube_channels_by_pk(id: uuid!): person_youtube_channels

  """
  fetch data from the table in a streaming manner: "person_youtube_channels"
  """
  person_youtube_channels_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [person_youtube_channels_stream_cursor_input]!

    """filter the rows returned"""
    where: person_youtube_channels_bool_exp
  ): [person_youtube_channels!]!

  """
  fetch data from the table: "persons"
  """
  persons(
    """distinct select on columns"""
    distinct_on: [persons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [persons_order_by!]

    """filter the rows returned"""
    where: persons_bool_exp
  ): [persons!]!

  """
  fetch aggregated fields from the table: "persons"
  """
  persons_aggregate(
    """distinct select on columns"""
    distinct_on: [persons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [persons_order_by!]

    """filter the rows returned"""
    where: persons_bool_exp
  ): persons_aggregate!

  """fetch data from the table: "persons" using primary key columns"""
  persons_by_pk(id: uuid!): persons

  """
  fetch data from the table in a streaming manner: "persons"
  """
  persons_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [persons_stream_cursor_input]!

    """filter the rows returned"""
    where: persons_bool_exp
  ): [persons!]!

  """An array relationship"""
  program_amongus_maps(
    """distinct select on columns"""
    distinct_on: [program_amongus_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_maps_order_by!]

    """filter the rows returned"""
    where: program_amongus_maps_bool_exp
  ): [program_amongus_maps!]!

  """An aggregate relationship"""
  program_amongus_maps_aggregate(
    """distinct select on columns"""
    distinct_on: [program_amongus_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_maps_order_by!]

    """filter the rows returned"""
    where: program_amongus_maps_bool_exp
  ): program_amongus_maps_aggregate!

  """
  fetch data from the table: "program_amongus_maps" using primary key columns
  """
  program_amongus_maps_by_pk(id: uuid!): program_amongus_maps

  """
  fetch data from the table in a streaming manner: "program_amongus_maps"
  """
  program_amongus_maps_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [program_amongus_maps_stream_cursor_input]!

    """filter the rows returned"""
    where: program_amongus_maps_bool_exp
  ): [program_amongus_maps!]!

  """An array relationship"""
  program_amongus_mods(
    """distinct select on columns"""
    distinct_on: [program_amongus_mods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_mods_order_by!]

    """filter the rows returned"""
    where: program_amongus_mods_bool_exp
  ): [program_amongus_mods!]!

  """An aggregate relationship"""
  program_amongus_mods_aggregate(
    """distinct select on columns"""
    distinct_on: [program_amongus_mods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_mods_order_by!]

    """filter the rows returned"""
    where: program_amongus_mods_bool_exp
  ): program_amongus_mods_aggregate!

  """
  fetch data from the table: "program_amongus_mods" using primary key columns
  """
  program_amongus_mods_by_pk(id: uuid!): program_amongus_mods

  """
  fetch data from the table in a streaming manner: "program_amongus_mods"
  """
  program_amongus_mods_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [program_amongus_mods_stream_cursor_input]!

    """filter the rows returned"""
    where: program_amongus_mods_bool_exp
  ): [program_amongus_mods!]!

  """An array relationship"""
  program_amongus_vanilla_versions(
    """distinct select on columns"""
    distinct_on: [program_amongus_vanilla_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_vanilla_versions_order_by!]

    """filter the rows returned"""
    where: program_amongus_vanilla_versions_bool_exp
  ): [program_amongus_vanilla_versions!]!

  """An aggregate relationship"""
  program_amongus_vanilla_versions_aggregate(
    """distinct select on columns"""
    distinct_on: [program_amongus_vanilla_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_amongus_vanilla_versions_order_by!]

    """filter the rows returned"""
    where: program_amongus_vanilla_versions_bool_exp
  ): program_amongus_vanilla_versions_aggregate!

  """
  fetch data from the table: "program_amongus_vanilla_versions" using primary key columns
  """
  program_amongus_vanilla_versions_by_pk(id: uuid!): program_amongus_vanilla_versions

  """
  fetch data from the table in a streaming manner: "program_amongus_vanilla_versions"
  """
  program_amongus_vanilla_versions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [program_amongus_vanilla_versions_stream_cursor_input]!

    """filter the rows returned"""
    where: program_amongus_vanilla_versions_bool_exp
  ): [program_amongus_vanilla_versions!]!

  """An array relationship"""
  program_live_archives(
    """distinct select on columns"""
    distinct_on: [program_live_archives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_live_archives_order_by!]

    """filter the rows returned"""
    where: program_live_archives_bool_exp
  ): [program_live_archives!]!

  """An aggregate relationship"""
  program_live_archives_aggregate(
    """distinct select on columns"""
    distinct_on: [program_live_archives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_live_archives_order_by!]

    """filter the rows returned"""
    where: program_live_archives_bool_exp
  ): program_live_archives_aggregate!

  """
  fetch data from the table: "program_live_archives" using primary key columns
  """
  program_live_archives_by_pk(id: uuid!): program_live_archives

  """
  fetch data from the table in a streaming manner: "program_live_archives"
  """
  program_live_archives_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [program_live_archives_stream_cursor_input]!

    """filter the rows returned"""
    where: program_live_archives_bool_exp
  ): [program_live_archives!]!

  """An array relationship"""
  program_niconico_videos(
    """distinct select on columns"""
    distinct_on: [program_niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_niconico_videos_order_by!]

    """filter the rows returned"""
    where: program_niconico_videos_bool_exp
  ): [program_niconico_videos!]!

  """An aggregate relationship"""
  program_niconico_videos_aggregate(
    """distinct select on columns"""
    distinct_on: [program_niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_niconico_videos_order_by!]

    """filter the rows returned"""
    where: program_niconico_videos_bool_exp
  ): program_niconico_videos_aggregate!

  """
  fetch data from the table: "program_niconico_videos" using primary key columns
  """
  program_niconico_videos_by_pk(id: uuid!): program_niconico_videos

  """
  fetch data from the table in a streaming manner: "program_niconico_videos"
  """
  program_niconico_videos_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [program_niconico_videos_stream_cursor_input]!

    """filter the rows returned"""
    where: program_niconico_videos_bool_exp
  ): [program_niconico_videos!]!

  """An array relationship"""
  program_persons(
    """distinct select on columns"""
    distinct_on: [program_persons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_persons_order_by!]

    """filter the rows returned"""
    where: program_persons_bool_exp
  ): [program_persons!]!

  """An aggregate relationship"""
  program_persons_aggregate(
    """distinct select on columns"""
    distinct_on: [program_persons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_persons_order_by!]

    """filter the rows returned"""
    where: program_persons_bool_exp
  ): program_persons_aggregate!

  """fetch data from the table: "program_persons" using primary key columns"""
  program_persons_by_pk(id: uuid!): program_persons

  """
  fetch data from the table in a streaming manner: "program_persons"
  """
  program_persons_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [program_persons_stream_cursor_input]!

    """filter the rows returned"""
    where: program_persons_bool_exp
  ): [program_persons!]!

  """An array relationship"""
  program_projects(
    """distinct select on columns"""
    distinct_on: [program_projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_projects_order_by!]

    """filter the rows returned"""
    where: program_projects_bool_exp
  ): [program_projects!]!

  """An aggregate relationship"""
  program_projects_aggregate(
    """distinct select on columns"""
    distinct_on: [program_projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_projects_order_by!]

    """filter the rows returned"""
    where: program_projects_bool_exp
  ): program_projects_aggregate!

  """
  fetch data from the table: "program_projects" using primary key columns
  """
  program_projects_by_pk(id: uuid!): program_projects

  """
  fetch data from the table in a streaming manner: "program_projects"
  """
  program_projects_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [program_projects_stream_cursor_input]!

    """filter the rows returned"""
    where: program_projects_bool_exp
  ): [program_projects!]!

  """An array relationship"""
  program_twitter_announcements(
    """distinct select on columns"""
    distinct_on: [program_twitter_announcements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_twitter_announcements_order_by!]

    """filter the rows returned"""
    where: program_twitter_announcements_bool_exp
  ): [program_twitter_announcements!]!

  """An aggregate relationship"""
  program_twitter_announcements_aggregate(
    """distinct select on columns"""
    distinct_on: [program_twitter_announcements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_twitter_announcements_order_by!]

    """filter the rows returned"""
    where: program_twitter_announcements_bool_exp
  ): program_twitter_announcements_aggregate!

  """
  fetch data from the table: "program_twitter_announcements" using primary key columns
  """
  program_twitter_announcements_by_pk(id: uuid!): program_twitter_announcements

  """
  fetch data from the table in a streaming manner: "program_twitter_announcements"
  """
  program_twitter_announcements_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [program_twitter_announcements_stream_cursor_input]!

    """filter the rows returned"""
    where: program_twitter_announcements_bool_exp
  ): [program_twitter_announcements!]!

  """
  fetch data from the table: "programs"
  """
  programs(
    """distinct select on columns"""
    distinct_on: [programs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [programs_order_by!]

    """filter the rows returned"""
    where: programs_bool_exp
  ): [programs!]!

  """
  fetch aggregated fields from the table: "programs"
  """
  programs_aggregate(
    """distinct select on columns"""
    distinct_on: [programs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [programs_order_by!]

    """filter the rows returned"""
    where: programs_bool_exp
  ): programs_aggregate!

  """fetch data from the table: "programs" using primary key columns"""
  programs_by_pk(id: uuid!): programs

  """
  fetch data from the table in a streaming manner: "programs"
  """
  programs_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [programs_stream_cursor_input]!

    """filter the rows returned"""
    where: programs_bool_exp
  ): [programs!]!

  """An array relationship"""
  project_niconico_videos(
    """distinct select on columns"""
    distinct_on: [project_niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_niconico_videos_order_by!]

    """filter the rows returned"""
    where: project_niconico_videos_bool_exp
  ): [project_niconico_videos!]!

  """An aggregate relationship"""
  project_niconico_videos_aggregate(
    """distinct select on columns"""
    distinct_on: [project_niconico_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_niconico_videos_order_by!]

    """filter the rows returned"""
    where: project_niconico_videos_bool_exp
  ): project_niconico_videos_aggregate!

  """
  fetch data from the table: "project_niconico_videos" using primary key columns
  """
  project_niconico_videos_by_pk(id: uuid!): project_niconico_videos

  """
  fetch data from the table in a streaming manner: "project_niconico_videos"
  """
  project_niconico_videos_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [project_niconico_videos_stream_cursor_input]!

    """filter the rows returned"""
    where: project_niconico_videos_bool_exp
  ): [project_niconico_videos!]!

  """
  fetch data from the table: "projects"
  """
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """
  fetch aggregated fields from the table: "projects"
  """
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(id: uuid!): projects

  """
  fetch data from the table in a streaming manner: "projects"
  """
  projects_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [projects_stream_cursor_input]!

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """
  fetch data from the table: "twitter_accounts"
  """
  twitter_accounts(
    """distinct select on columns"""
    distinct_on: [twitter_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twitter_accounts_order_by!]

    """filter the rows returned"""
    where: twitter_accounts_bool_exp
  ): [twitter_accounts!]!

  """
  fetch aggregated fields from the table: "twitter_accounts"
  """
  twitter_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [twitter_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twitter_accounts_order_by!]

    """filter the rows returned"""
    where: twitter_accounts_bool_exp
  ): twitter_accounts_aggregate!

  """
  fetch data from the table: "twitter_accounts" using primary key columns
  """
  twitter_accounts_by_pk(id: uuid!): twitter_accounts

  """
  fetch data from the table in a streaming manner: "twitter_accounts"
  """
  twitter_accounts_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [twitter_accounts_stream_cursor_input]!

    """filter the rows returned"""
    where: twitter_accounts_bool_exp
  ): [twitter_accounts!]!

  """An array relationship"""
  twitter_tweet_images(
    """distinct select on columns"""
    distinct_on: [twitter_tweet_images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twitter_tweet_images_order_by!]

    """filter the rows returned"""
    where: twitter_tweet_images_bool_exp
  ): [twitter_tweet_images!]!

  """An aggregate relationship"""
  twitter_tweet_images_aggregate(
    """distinct select on columns"""
    distinct_on: [twitter_tweet_images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twitter_tweet_images_order_by!]

    """filter the rows returned"""
    where: twitter_tweet_images_bool_exp
  ): twitter_tweet_images_aggregate!

  """
  fetch data from the table: "twitter_tweet_images" using primary key columns
  """
  twitter_tweet_images_by_pk(id: uuid!): twitter_tweet_images

  """
  fetch data from the table in a streaming manner: "twitter_tweet_images"
  """
  twitter_tweet_images_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [twitter_tweet_images_stream_cursor_input]!

    """filter the rows returned"""
    where: twitter_tweet_images_bool_exp
  ): [twitter_tweet_images!]!

  """
  fetch data from the table: "twitter_tweets"
  """
  twitter_tweets(
    """distinct select on columns"""
    distinct_on: [twitter_tweets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twitter_tweets_order_by!]

    """filter the rows returned"""
    where: twitter_tweets_bool_exp
  ): [twitter_tweets!]!

  """
  fetch aggregated fields from the table: "twitter_tweets"
  """
  twitter_tweets_aggregate(
    """distinct select on columns"""
    distinct_on: [twitter_tweets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twitter_tweets_order_by!]

    """filter the rows returned"""
    where: twitter_tweets_bool_exp
  ): twitter_tweets_aggregate!

  """fetch data from the table: "twitter_tweets" using primary key columns"""
  twitter_tweets_by_pk(id: uuid!): twitter_tweets

  """
  fetch data from the table in a streaming manner: "twitter_tweets"
  """
  twitter_tweets_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [twitter_tweets_stream_cursor_input]!

    """filter the rows returned"""
    where: twitter_tweets_bool_exp
  ): [twitter_tweets!]!

  """
  fetch data from the table: "youtube_channels"
  """
  youtube_channels(
    """distinct select on columns"""
    distinct_on: [youtube_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [youtube_channels_order_by!]

    """filter the rows returned"""
    where: youtube_channels_bool_exp
  ): [youtube_channels!]!

  """
  fetch aggregated fields from the table: "youtube_channels"
  """
  youtube_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [youtube_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [youtube_channels_order_by!]

    """filter the rows returned"""
    where: youtube_channels_bool_exp
  ): youtube_channels_aggregate!

  """
  fetch data from the table: "youtube_channels" using primary key columns
  """
  youtube_channels_by_pk(id: uuid!): youtube_channels

  """
  fetch data from the table in a streaming manner: "youtube_channels"
  """
  youtube_channels_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [youtube_channels_stream_cursor_input]!

    """filter the rows returned"""
    where: youtube_channels_bool_exp
  ): [youtube_channels!]!

  """An array relationship"""
  youtube_lives(
    """distinct select on columns"""
    distinct_on: [youtube_lives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [youtube_lives_order_by!]

    """filter the rows returned"""
    where: youtube_lives_bool_exp
  ): [youtube_lives!]!

  """An aggregate relationship"""
  youtube_lives_aggregate(
    """distinct select on columns"""
    distinct_on: [youtube_lives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [youtube_lives_order_by!]

    """filter the rows returned"""
    where: youtube_lives_bool_exp
  ): youtube_lives_aggregate!

  """fetch data from the table: "youtube_lives" using primary key columns"""
  youtube_lives_by_pk(id: uuid!): youtube_lives

  """
  fetch data from the table in a streaming manner: "youtube_lives"
  """
  youtube_lives_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [youtube_lives_stream_cursor_input]!

    """filter the rows returned"""
    where: youtube_lives_bool_exp
  ): [youtube_lives!]!

  """
  fetch data from the table: "youtube_videos"
  """
  youtube_videos(
    """distinct select on columns"""
    distinct_on: [youtube_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [youtube_videos_order_by!]

    """filter the rows returned"""
    where: youtube_videos_bool_exp
  ): [youtube_videos!]!

  """
  fetch aggregated fields from the table: "youtube_videos"
  """
  youtube_videos_aggregate(
    """distinct select on columns"""
    distinct_on: [youtube_videos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [youtube_videos_order_by!]

    """filter the rows returned"""
    where: youtube_videos_bool_exp
  ): youtube_videos_aggregate!

  """fetch data from the table: "youtube_videos" using primary key columns"""
  youtube_videos_by_pk(id: uuid!): youtube_videos

  """
  fetch data from the table in a streaming manner: "youtube_videos"
  """
  youtube_videos_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [youtube_videos_stream_cursor_input]!

    """filter the rows returned"""
    where: youtube_videos_bool_exp
  ): [youtube_videos!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "twitter_accounts"
"""
type twitter_accounts {
  created_at: timestamptz!
  id: uuid!
  name: String!
  remote_twitter_user_id: String!
  twitter_screen_name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "twitter_accounts"
"""
type twitter_accounts_aggregate {
  aggregate: twitter_accounts_aggregate_fields
  nodes: [twitter_accounts!]!
}

"""
aggregate fields of "twitter_accounts"
"""
type twitter_accounts_aggregate_fields {
  count(columns: [twitter_accounts_select_column!], distinct: Boolean): Int!
  max: twitter_accounts_max_fields
  min: twitter_accounts_min_fields
}

"""
Boolean expression to filter rows from the table "twitter_accounts". All fields are combined with a logical 'AND'.
"""
input twitter_accounts_bool_exp {
  _and: [twitter_accounts_bool_exp!]
  _not: twitter_accounts_bool_exp
  _or: [twitter_accounts_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  remote_twitter_user_id: String_comparison_exp
  twitter_screen_name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "twitter_accounts"
"""
enum twitter_accounts_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  twitter_accounts_pkey

  """
  unique or primary key constraint on columns "remote_twitter_user_id"
  """
  twitter_accounts_remote_twitter_user_id_key

  """
  unique or primary key constraint on columns "twitter_screen_name"
  """
  twitter_accounts_twitter_screen_name_key
}

"""
input type for inserting data into table "twitter_accounts"
"""
input twitter_accounts_insert_input {
  created_at: timestamptz
  id: uuid
  name: String
  remote_twitter_user_id: String
  twitter_screen_name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type twitter_accounts_max_fields {
  created_at: timestamptz
  id: uuid
  name: String
  remote_twitter_user_id: String
  twitter_screen_name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type twitter_accounts_min_fields {
  created_at: timestamptz
  id: uuid
  name: String
  remote_twitter_user_id: String
  twitter_screen_name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "twitter_accounts"
"""
type twitter_accounts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [twitter_accounts!]!
}

"""
input type for inserting object relation for remote table "twitter_accounts"
"""
input twitter_accounts_obj_rel_insert_input {
  data: twitter_accounts_insert_input!

  """upsert condition"""
  on_conflict: twitter_accounts_on_conflict
}

"""
on_conflict condition type for table "twitter_accounts"
"""
input twitter_accounts_on_conflict {
  constraint: twitter_accounts_constraint!
  update_columns: [twitter_accounts_update_column!]! = []
  where: twitter_accounts_bool_exp
}

"""Ordering options when selecting data from "twitter_accounts"."""
input twitter_accounts_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  remote_twitter_user_id: order_by
  twitter_screen_name: order_by
  updated_at: order_by
}

"""primary key columns input for table: twitter_accounts"""
input twitter_accounts_pk_columns_input {
  id: uuid!
}

"""
select columns of table "twitter_accounts"
"""
enum twitter_accounts_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  remote_twitter_user_id

  """column name"""
  twitter_screen_name

  """column name"""
  updated_at
}

"""
input type for updating data in table "twitter_accounts"
"""
input twitter_accounts_set_input {
  created_at: timestamptz
  id: uuid
  name: String
  remote_twitter_user_id: String
  twitter_screen_name: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "twitter_accounts"
"""
input twitter_accounts_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: twitter_accounts_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input twitter_accounts_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  name: String
  remote_twitter_user_id: String
  twitter_screen_name: String
  updated_at: timestamptz
}

"""
update columns of table "twitter_accounts"
"""
enum twitter_accounts_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  remote_twitter_user_id

  """column name"""
  twitter_screen_name

  """column name"""
  updated_at
}

input twitter_accounts_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: twitter_accounts_set_input

  """filter the rows which have to be updated"""
  where: twitter_accounts_bool_exp!
}

"""
columns and relationships of "twitter_tweet_images"
"""
type twitter_tweet_images {
  created_at: timestamptz!
  id: uuid!
  index: Int!
  twitter_tweet_id: uuid!
  updated_at: timestamptz!
  url: String!
}

"""
aggregated selection of "twitter_tweet_images"
"""
type twitter_tweet_images_aggregate {
  aggregate: twitter_tweet_images_aggregate_fields
  nodes: [twitter_tweet_images!]!
}

input twitter_tweet_images_aggregate_bool_exp {
  count: twitter_tweet_images_aggregate_bool_exp_count
}

input twitter_tweet_images_aggregate_bool_exp_count {
  arguments: [twitter_tweet_images_select_column!]
  distinct: Boolean
  filter: twitter_tweet_images_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "twitter_tweet_images"
"""
type twitter_tweet_images_aggregate_fields {
  avg: twitter_tweet_images_avg_fields
  count(columns: [twitter_tweet_images_select_column!], distinct: Boolean): Int!
  max: twitter_tweet_images_max_fields
  min: twitter_tweet_images_min_fields
  stddev: twitter_tweet_images_stddev_fields
  stddev_pop: twitter_tweet_images_stddev_pop_fields
  stddev_samp: twitter_tweet_images_stddev_samp_fields
  sum: twitter_tweet_images_sum_fields
  var_pop: twitter_tweet_images_var_pop_fields
  var_samp: twitter_tweet_images_var_samp_fields
  variance: twitter_tweet_images_variance_fields
}

"""
order by aggregate values of table "twitter_tweet_images"
"""
input twitter_tweet_images_aggregate_order_by {
  avg: twitter_tweet_images_avg_order_by
  count: order_by
  max: twitter_tweet_images_max_order_by
  min: twitter_tweet_images_min_order_by
  stddev: twitter_tweet_images_stddev_order_by
  stddev_pop: twitter_tweet_images_stddev_pop_order_by
  stddev_samp: twitter_tweet_images_stddev_samp_order_by
  sum: twitter_tweet_images_sum_order_by
  var_pop: twitter_tweet_images_var_pop_order_by
  var_samp: twitter_tweet_images_var_samp_order_by
  variance: twitter_tweet_images_variance_order_by
}

"""
input type for inserting array relation for remote table "twitter_tweet_images"
"""
input twitter_tweet_images_arr_rel_insert_input {
  data: [twitter_tweet_images_insert_input!]!

  """upsert condition"""
  on_conflict: twitter_tweet_images_on_conflict
}

"""aggregate avg on columns"""
type twitter_tweet_images_avg_fields {
  index: Float
}

"""
order by avg() on columns of table "twitter_tweet_images"
"""
input twitter_tweet_images_avg_order_by {
  index: order_by
}

"""
Boolean expression to filter rows from the table "twitter_tweet_images". All fields are combined with a logical 'AND'.
"""
input twitter_tweet_images_bool_exp {
  _and: [twitter_tweet_images_bool_exp!]
  _not: twitter_tweet_images_bool_exp
  _or: [twitter_tweet_images_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  index: Int_comparison_exp
  twitter_tweet_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  url: String_comparison_exp
}

"""
unique or primary key constraints on table "twitter_tweet_images"
"""
enum twitter_tweet_images_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  twitter_tweet_images_pkey

  """
  unique or primary key constraint on columns "index", "twitter_tweet_id"
  """
  twitter_tweet_images_tweet_id_index_key
}

"""
input type for incrementing numeric columns in table "twitter_tweet_images"
"""
input twitter_tweet_images_inc_input {
  index: Int
}

"""
input type for inserting data into table "twitter_tweet_images"
"""
input twitter_tweet_images_insert_input {
  created_at: timestamptz
  id: uuid
  index: Int
  twitter_tweet_id: uuid
  updated_at: timestamptz
  url: String
}

"""aggregate max on columns"""
type twitter_tweet_images_max_fields {
  created_at: timestamptz
  id: uuid
  index: Int
  twitter_tweet_id: uuid
  updated_at: timestamptz
  url: String
}

"""
order by max() on columns of table "twitter_tweet_images"
"""
input twitter_tweet_images_max_order_by {
  created_at: order_by
  id: order_by
  index: order_by
  twitter_tweet_id: order_by
  updated_at: order_by
  url: order_by
}

"""aggregate min on columns"""
type twitter_tweet_images_min_fields {
  created_at: timestamptz
  id: uuid
  index: Int
  twitter_tweet_id: uuid
  updated_at: timestamptz
  url: String
}

"""
order by min() on columns of table "twitter_tweet_images"
"""
input twitter_tweet_images_min_order_by {
  created_at: order_by
  id: order_by
  index: order_by
  twitter_tweet_id: order_by
  updated_at: order_by
  url: order_by
}

"""
response of any mutation on the table "twitter_tweet_images"
"""
type twitter_tweet_images_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [twitter_tweet_images!]!
}

"""
input type for inserting object relation for remote table "twitter_tweet_images"
"""
input twitter_tweet_images_obj_rel_insert_input {
  data: twitter_tweet_images_insert_input!

  """upsert condition"""
  on_conflict: twitter_tweet_images_on_conflict
}

"""
on_conflict condition type for table "twitter_tweet_images"
"""
input twitter_tweet_images_on_conflict {
  constraint: twitter_tweet_images_constraint!
  update_columns: [twitter_tweet_images_update_column!]! = []
  where: twitter_tweet_images_bool_exp
}

"""Ordering options when selecting data from "twitter_tweet_images"."""
input twitter_tweet_images_order_by {
  created_at: order_by
  id: order_by
  index: order_by
  twitter_tweet_id: order_by
  updated_at: order_by
  url: order_by
}

"""primary key columns input for table: twitter_tweet_images"""
input twitter_tweet_images_pk_columns_input {
  id: uuid!
}

"""
select columns of table "twitter_tweet_images"
"""
enum twitter_tweet_images_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  index

  """column name"""
  twitter_tweet_id

  """column name"""
  updated_at

  """column name"""
  url
}

"""
input type for updating data in table "twitter_tweet_images"
"""
input twitter_tweet_images_set_input {
  created_at: timestamptz
  id: uuid
  index: Int
  twitter_tweet_id: uuid
  updated_at: timestamptz
  url: String
}

"""aggregate stddev on columns"""
type twitter_tweet_images_stddev_fields {
  index: Float
}

"""
order by stddev() on columns of table "twitter_tweet_images"
"""
input twitter_tweet_images_stddev_order_by {
  index: order_by
}

"""aggregate stddev_pop on columns"""
type twitter_tweet_images_stddev_pop_fields {
  index: Float
}

"""
order by stddev_pop() on columns of table "twitter_tweet_images"
"""
input twitter_tweet_images_stddev_pop_order_by {
  index: order_by
}

"""aggregate stddev_samp on columns"""
type twitter_tweet_images_stddev_samp_fields {
  index: Float
}

"""
order by stddev_samp() on columns of table "twitter_tweet_images"
"""
input twitter_tweet_images_stddev_samp_order_by {
  index: order_by
}

"""
Streaming cursor of the table "twitter_tweet_images"
"""
input twitter_tweet_images_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: twitter_tweet_images_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input twitter_tweet_images_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  index: Int
  twitter_tweet_id: uuid
  updated_at: timestamptz
  url: String
}

"""aggregate sum on columns"""
type twitter_tweet_images_sum_fields {
  index: Int
}

"""
order by sum() on columns of table "twitter_tweet_images"
"""
input twitter_tweet_images_sum_order_by {
  index: order_by
}

"""
update columns of table "twitter_tweet_images"
"""
enum twitter_tweet_images_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  index

  """column name"""
  twitter_tweet_id

  """column name"""
  updated_at

  """column name"""
  url
}

input twitter_tweet_images_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: twitter_tweet_images_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: twitter_tweet_images_set_input

  """filter the rows which have to be updated"""
  where: twitter_tweet_images_bool_exp!
}

"""aggregate var_pop on columns"""
type twitter_tweet_images_var_pop_fields {
  index: Float
}

"""
order by var_pop() on columns of table "twitter_tweet_images"
"""
input twitter_tweet_images_var_pop_order_by {
  index: order_by
}

"""aggregate var_samp on columns"""
type twitter_tweet_images_var_samp_fields {
  index: Float
}

"""
order by var_samp() on columns of table "twitter_tweet_images"
"""
input twitter_tweet_images_var_samp_order_by {
  index: order_by
}

"""aggregate variance on columns"""
type twitter_tweet_images_variance_fields {
  index: Float
}

"""
order by variance() on columns of table "twitter_tweet_images"
"""
input twitter_tweet_images_variance_order_by {
  index: order_by
}

"""
columns and relationships of "twitter_tweets"
"""
type twitter_tweets {
  created_at: timestamptz!
  id: uuid!
  remote_tweet_id: String!
  tweet_embed_html: String!
  tweet_time: timestamptz!

  """An object relationship"""
  twitter_account: twitter_accounts!
  twitter_account_id: uuid!

  """An array relationship"""
  twitter_tweet_images(
    """distinct select on columns"""
    distinct_on: [twitter_tweet_images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twitter_tweet_images_order_by!]

    """filter the rows returned"""
    where: twitter_tweet_images_bool_exp
  ): [twitter_tweet_images!]!

  """An aggregate relationship"""
  twitter_tweet_images_aggregate(
    """distinct select on columns"""
    distinct_on: [twitter_tweet_images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twitter_tweet_images_order_by!]

    """filter the rows returned"""
    where: twitter_tweet_images_bool_exp
  ): twitter_tweet_images_aggregate!
  updated_at: timestamptz!
}

"""
aggregated selection of "twitter_tweets"
"""
type twitter_tweets_aggregate {
  aggregate: twitter_tweets_aggregate_fields
  nodes: [twitter_tweets!]!
}

"""
aggregate fields of "twitter_tweets"
"""
type twitter_tweets_aggregate_fields {
  count(columns: [twitter_tweets_select_column!], distinct: Boolean): Int!
  max: twitter_tweets_max_fields
  min: twitter_tweets_min_fields
}

"""
Boolean expression to filter rows from the table "twitter_tweets". All fields are combined with a logical 'AND'.
"""
input twitter_tweets_bool_exp {
  _and: [twitter_tweets_bool_exp!]
  _not: twitter_tweets_bool_exp
  _or: [twitter_tweets_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  remote_tweet_id: String_comparison_exp
  tweet_embed_html: String_comparison_exp
  tweet_time: timestamptz_comparison_exp
  twitter_account: twitter_accounts_bool_exp
  twitter_account_id: uuid_comparison_exp
  twitter_tweet_images: twitter_tweet_images_bool_exp
  twitter_tweet_images_aggregate: twitter_tweet_images_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "twitter_tweets"
"""
enum twitter_tweets_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  twitter_tweets_pkey

  """
  unique or primary key constraint on columns "remote_tweet_id"
  """
  twitter_tweets_remote_tweet_id_key
}

"""
input type for inserting data into table "twitter_tweets"
"""
input twitter_tweets_insert_input {
  created_at: timestamptz
  id: uuid
  remote_tweet_id: String
  tweet_embed_html: String
  tweet_time: timestamptz
  twitter_account: twitter_accounts_obj_rel_insert_input
  twitter_account_id: uuid
  twitter_tweet_images: twitter_tweet_images_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type twitter_tweets_max_fields {
  created_at: timestamptz
  id: uuid
  remote_tweet_id: String
  tweet_embed_html: String
  tweet_time: timestamptz
  twitter_account_id: uuid
  updated_at: timestamptz
}

"""aggregate min on columns"""
type twitter_tweets_min_fields {
  created_at: timestamptz
  id: uuid
  remote_tweet_id: String
  tweet_embed_html: String
  tweet_time: timestamptz
  twitter_account_id: uuid
  updated_at: timestamptz
}

"""
response of any mutation on the table "twitter_tweets"
"""
type twitter_tweets_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [twitter_tweets!]!
}

"""
input type for inserting object relation for remote table "twitter_tweets"
"""
input twitter_tweets_obj_rel_insert_input {
  data: twitter_tweets_insert_input!

  """upsert condition"""
  on_conflict: twitter_tweets_on_conflict
}

"""
on_conflict condition type for table "twitter_tweets"
"""
input twitter_tweets_on_conflict {
  constraint: twitter_tweets_constraint!
  update_columns: [twitter_tweets_update_column!]! = []
  where: twitter_tweets_bool_exp
}

"""Ordering options when selecting data from "twitter_tweets"."""
input twitter_tweets_order_by {
  created_at: order_by
  id: order_by
  remote_tweet_id: order_by
  tweet_embed_html: order_by
  tweet_time: order_by
  twitter_account: twitter_accounts_order_by
  twitter_account_id: order_by
  twitter_tweet_images_aggregate: twitter_tweet_images_aggregate_order_by
  updated_at: order_by
}

"""primary key columns input for table: twitter_tweets"""
input twitter_tweets_pk_columns_input {
  id: uuid!
}

"""
select columns of table "twitter_tweets"
"""
enum twitter_tweets_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  remote_tweet_id

  """column name"""
  tweet_embed_html

  """column name"""
  tweet_time

  """column name"""
  twitter_account_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "twitter_tweets"
"""
input twitter_tweets_set_input {
  created_at: timestamptz
  id: uuid
  remote_tweet_id: String
  tweet_embed_html: String
  tweet_time: timestamptz
  twitter_account_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "twitter_tweets"
"""
input twitter_tweets_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: twitter_tweets_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input twitter_tweets_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  remote_tweet_id: String
  tweet_embed_html: String
  tweet_time: timestamptz
  twitter_account_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "twitter_tweets"
"""
enum twitter_tweets_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  remote_tweet_id

  """column name"""
  tweet_embed_html

  """column name"""
  tweet_time

  """column name"""
  twitter_account_id

  """column name"""
  updated_at
}

input twitter_tweets_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: twitter_tweets_set_input

  """filter the rows which have to be updated"""
  where: twitter_tweets_bool_exp!
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""
columns and relationships of "youtube_channels"
"""
type youtube_channels {
  created_at: timestamptz!
  id: uuid!
  name: String!

  """An array relationship"""
  person_youtube_channels(
    """distinct select on columns"""
    distinct_on: [person_youtube_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_youtube_channels_order_by!]

    """filter the rows returned"""
    where: person_youtube_channels_bool_exp
  ): [person_youtube_channels!]!

  """An aggregate relationship"""
  person_youtube_channels_aggregate(
    """distinct select on columns"""
    distinct_on: [person_youtube_channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [person_youtube_channels_order_by!]

    """filter the rows returned"""
    where: person_youtube_channels_bool_exp
  ): person_youtube_channels_aggregate!
  remote_youtube_channel_id: String!
  updated_at: timestamptz!
  youtube_channel_handle: String

  """An array relationship"""
  youtube_lives(
    """distinct select on columns"""
    distinct_on: [youtube_lives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [youtube_lives_order_by!]

    """filter the rows returned"""
    where: youtube_lives_bool_exp
  ): [youtube_lives!]!

  """An aggregate relationship"""
  youtube_lives_aggregate(
    """distinct select on columns"""
    distinct_on: [youtube_lives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [youtube_lives_order_by!]

    """filter the rows returned"""
    where: youtube_lives_bool_exp
  ): youtube_lives_aggregate!
}

"""
aggregated selection of "youtube_channels"
"""
type youtube_channels_aggregate {
  aggregate: youtube_channels_aggregate_fields
  nodes: [youtube_channels!]!
}

"""
aggregate fields of "youtube_channels"
"""
type youtube_channels_aggregate_fields {
  count(columns: [youtube_channels_select_column!], distinct: Boolean): Int!
  max: youtube_channels_max_fields
  min: youtube_channels_min_fields
}

"""
Boolean expression to filter rows from the table "youtube_channels". All fields are combined with a logical 'AND'.
"""
input youtube_channels_bool_exp {
  _and: [youtube_channels_bool_exp!]
  _not: youtube_channels_bool_exp
  _or: [youtube_channels_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  person_youtube_channels: person_youtube_channels_bool_exp
  person_youtube_channels_aggregate: person_youtube_channels_aggregate_bool_exp
  remote_youtube_channel_id: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  youtube_channel_handle: String_comparison_exp
  youtube_lives: youtube_lives_bool_exp
  youtube_lives_aggregate: youtube_lives_aggregate_bool_exp
}

"""
unique or primary key constraints on table "youtube_channels"
"""
enum youtube_channels_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  youtube_channels_pkey

  """
  unique or primary key constraint on columns "youtube_channel_handle"
  """
  youtube_channels_youtube_channel_handle_key

  """
  unique or primary key constraint on columns "remote_youtube_channel_id"
  """
  youtube_channels_youtube_channel_id_key
}

"""
input type for inserting data into table "youtube_channels"
"""
input youtube_channels_insert_input {
  created_at: timestamptz
  id: uuid
  name: String
  person_youtube_channels: person_youtube_channels_arr_rel_insert_input
  remote_youtube_channel_id: String
  updated_at: timestamptz
  youtube_channel_handle: String
  youtube_lives: youtube_lives_arr_rel_insert_input
}

"""aggregate max on columns"""
type youtube_channels_max_fields {
  created_at: timestamptz
  id: uuid
  name: String
  remote_youtube_channel_id: String
  updated_at: timestamptz
  youtube_channel_handle: String
}

"""aggregate min on columns"""
type youtube_channels_min_fields {
  created_at: timestamptz
  id: uuid
  name: String
  remote_youtube_channel_id: String
  updated_at: timestamptz
  youtube_channel_handle: String
}

"""
response of any mutation on the table "youtube_channels"
"""
type youtube_channels_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [youtube_channels!]!
}

"""
input type for inserting object relation for remote table "youtube_channels"
"""
input youtube_channels_obj_rel_insert_input {
  data: youtube_channels_insert_input!

  """upsert condition"""
  on_conflict: youtube_channels_on_conflict
}

"""
on_conflict condition type for table "youtube_channels"
"""
input youtube_channels_on_conflict {
  constraint: youtube_channels_constraint!
  update_columns: [youtube_channels_update_column!]! = []
  where: youtube_channels_bool_exp
}

"""Ordering options when selecting data from "youtube_channels"."""
input youtube_channels_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  person_youtube_channels_aggregate: person_youtube_channels_aggregate_order_by
  remote_youtube_channel_id: order_by
  updated_at: order_by
  youtube_channel_handle: order_by
  youtube_lives_aggregate: youtube_lives_aggregate_order_by
}

"""primary key columns input for table: youtube_channels"""
input youtube_channels_pk_columns_input {
  id: uuid!
}

"""
select columns of table "youtube_channels"
"""
enum youtube_channels_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  remote_youtube_channel_id

  """column name"""
  updated_at

  """column name"""
  youtube_channel_handle
}

"""
input type for updating data in table "youtube_channels"
"""
input youtube_channels_set_input {
  created_at: timestamptz
  id: uuid
  name: String
  remote_youtube_channel_id: String
  updated_at: timestamptz
  youtube_channel_handle: String
}

"""
Streaming cursor of the table "youtube_channels"
"""
input youtube_channels_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: youtube_channels_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input youtube_channels_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  name: String
  remote_youtube_channel_id: String
  updated_at: timestamptz
  youtube_channel_handle: String
}

"""
update columns of table "youtube_channels"
"""
enum youtube_channels_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  remote_youtube_channel_id

  """column name"""
  updated_at

  """column name"""
  youtube_channel_handle
}

input youtube_channels_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: youtube_channels_set_input

  """filter the rows which have to be updated"""
  where: youtube_channels_bool_exp!
}

"""
columns and relationships of "youtube_lives"
"""
type youtube_lives {
  created_at: timestamptz!
  end_time: timestamptz
  id: uuid!
  remote_youtube_video_id: String!
  start_time: timestamptz
  title: String!
  updated_at: timestamptz!

  """An object relationship"""
  youtube_channel: youtube_channels!
  youtube_channel_id: uuid!
}

"""
aggregated selection of "youtube_lives"
"""
type youtube_lives_aggregate {
  aggregate: youtube_lives_aggregate_fields
  nodes: [youtube_lives!]!
}

input youtube_lives_aggregate_bool_exp {
  count: youtube_lives_aggregate_bool_exp_count
}

input youtube_lives_aggregate_bool_exp_count {
  arguments: [youtube_lives_select_column!]
  distinct: Boolean
  filter: youtube_lives_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "youtube_lives"
"""
type youtube_lives_aggregate_fields {
  count(columns: [youtube_lives_select_column!], distinct: Boolean): Int!
  max: youtube_lives_max_fields
  min: youtube_lives_min_fields
}

"""
order by aggregate values of table "youtube_lives"
"""
input youtube_lives_aggregate_order_by {
  count: order_by
  max: youtube_lives_max_order_by
  min: youtube_lives_min_order_by
}

"""
input type for inserting array relation for remote table "youtube_lives"
"""
input youtube_lives_arr_rel_insert_input {
  data: [youtube_lives_insert_input!]!

  """upsert condition"""
  on_conflict: youtube_lives_on_conflict
}

"""
Boolean expression to filter rows from the table "youtube_lives". All fields are combined with a logical 'AND'.
"""
input youtube_lives_bool_exp {
  _and: [youtube_lives_bool_exp!]
  _not: youtube_lives_bool_exp
  _or: [youtube_lives_bool_exp!]
  created_at: timestamptz_comparison_exp
  end_time: timestamptz_comparison_exp
  id: uuid_comparison_exp
  remote_youtube_video_id: String_comparison_exp
  start_time: timestamptz_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  youtube_channel: youtube_channels_bool_exp
  youtube_channel_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "youtube_lives"
"""
enum youtube_lives_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  youtube_lives_pkey

  """
  unique or primary key constraint on columns "remote_youtube_video_id"
  """
  youtube_lives_remote_youtube_video_id_key
}

"""
input type for inserting data into table "youtube_lives"
"""
input youtube_lives_insert_input {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  remote_youtube_video_id: String
  start_time: timestamptz
  title: String
  updated_at: timestamptz
  youtube_channel: youtube_channels_obj_rel_insert_input
  youtube_channel_id: uuid
}

"""aggregate max on columns"""
type youtube_lives_max_fields {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  remote_youtube_video_id: String
  start_time: timestamptz
  title: String
  updated_at: timestamptz
  youtube_channel_id: uuid
}

"""
order by max() on columns of table "youtube_lives"
"""
input youtube_lives_max_order_by {
  created_at: order_by
  end_time: order_by
  id: order_by
  remote_youtube_video_id: order_by
  start_time: order_by
  title: order_by
  updated_at: order_by
  youtube_channel_id: order_by
}

"""aggregate min on columns"""
type youtube_lives_min_fields {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  remote_youtube_video_id: String
  start_time: timestamptz
  title: String
  updated_at: timestamptz
  youtube_channel_id: uuid
}

"""
order by min() on columns of table "youtube_lives"
"""
input youtube_lives_min_order_by {
  created_at: order_by
  end_time: order_by
  id: order_by
  remote_youtube_video_id: order_by
  start_time: order_by
  title: order_by
  updated_at: order_by
  youtube_channel_id: order_by
}

"""
response of any mutation on the table "youtube_lives"
"""
type youtube_lives_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [youtube_lives!]!
}

"""
input type for inserting object relation for remote table "youtube_lives"
"""
input youtube_lives_obj_rel_insert_input {
  data: youtube_lives_insert_input!

  """upsert condition"""
  on_conflict: youtube_lives_on_conflict
}

"""
on_conflict condition type for table "youtube_lives"
"""
input youtube_lives_on_conflict {
  constraint: youtube_lives_constraint!
  update_columns: [youtube_lives_update_column!]! = []
  where: youtube_lives_bool_exp
}

"""Ordering options when selecting data from "youtube_lives"."""
input youtube_lives_order_by {
  created_at: order_by
  end_time: order_by
  id: order_by
  remote_youtube_video_id: order_by
  start_time: order_by
  title: order_by
  updated_at: order_by
  youtube_channel: youtube_channels_order_by
  youtube_channel_id: order_by
}

"""primary key columns input for table: youtube_lives"""
input youtube_lives_pk_columns_input {
  id: uuid!
}

"""
select columns of table "youtube_lives"
"""
enum youtube_lives_select_column {
  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  remote_youtube_video_id

  """column name"""
  start_time

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  youtube_channel_id
}

"""
input type for updating data in table "youtube_lives"
"""
input youtube_lives_set_input {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  remote_youtube_video_id: String
  start_time: timestamptz
  title: String
  updated_at: timestamptz
  youtube_channel_id: uuid
}

"""
Streaming cursor of the table "youtube_lives"
"""
input youtube_lives_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: youtube_lives_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input youtube_lives_stream_cursor_value_input {
  created_at: timestamptz
  end_time: timestamptz
  id: uuid
  remote_youtube_video_id: String
  start_time: timestamptz
  title: String
  updated_at: timestamptz
  youtube_channel_id: uuid
}

"""
update columns of table "youtube_lives"
"""
enum youtube_lives_update_column {
  """column name"""
  created_at

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  remote_youtube_video_id

  """column name"""
  start_time

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  youtube_channel_id
}

input youtube_lives_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: youtube_lives_set_input

  """filter the rows which have to be updated"""
  where: youtube_lives_bool_exp!
}

"""
columns and relationships of "youtube_videos"
"""
type youtube_videos {
  created_at: timestamptz!
  id: uuid!
  is_premiere: Boolean!
  post_time: timestamptz!

  """An array relationship"""
  program_live_archives(
    """distinct select on columns"""
    distinct_on: [program_live_archives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_live_archives_order_by!]

    """filter the rows returned"""
    where: program_live_archives_bool_exp
  ): [program_live_archives!]!

  """An aggregate relationship"""
  program_live_archives_aggregate(
    """distinct select on columns"""
    distinct_on: [program_live_archives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_live_archives_order_by!]

    """filter the rows returned"""
    where: program_live_archives_bool_exp
  ): program_live_archives_aggregate!
  remote_youtube_video_id: String!
  title: String!
  updated_at: timestamptz!

  """An object relationship"""
  youtube_channel: youtube_channels!
  youtube_channel_id: uuid!
}

"""
aggregated selection of "youtube_videos"
"""
type youtube_videos_aggregate {
  aggregate: youtube_videos_aggregate_fields
  nodes: [youtube_videos!]!
}

"""
aggregate fields of "youtube_videos"
"""
type youtube_videos_aggregate_fields {
  count(columns: [youtube_videos_select_column!], distinct: Boolean): Int!
  max: youtube_videos_max_fields
  min: youtube_videos_min_fields
}

"""
Boolean expression to filter rows from the table "youtube_videos". All fields are combined with a logical 'AND'.
"""
input youtube_videos_bool_exp {
  _and: [youtube_videos_bool_exp!]
  _not: youtube_videos_bool_exp
  _or: [youtube_videos_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  is_premiere: Boolean_comparison_exp
  post_time: timestamptz_comparison_exp
  program_live_archives: program_live_archives_bool_exp
  program_live_archives_aggregate: program_live_archives_aggregate_bool_exp
  remote_youtube_video_id: String_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  youtube_channel: youtube_channels_bool_exp
  youtube_channel_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "youtube_videos"
"""
enum youtube_videos_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  youtube_videos_pkey

  """
  unique or primary key constraint on columns "remote_youtube_video_id"
  """
  youtube_videos_remote_youtube_video_id_key
}

"""
input type for inserting data into table "youtube_videos"
"""
input youtube_videos_insert_input {
  created_at: timestamptz
  id: uuid
  is_premiere: Boolean
  post_time: timestamptz
  program_live_archives: program_live_archives_arr_rel_insert_input
  remote_youtube_video_id: String
  title: String
  updated_at: timestamptz
  youtube_channel: youtube_channels_obj_rel_insert_input
  youtube_channel_id: uuid
}

"""aggregate max on columns"""
type youtube_videos_max_fields {
  created_at: timestamptz
  id: uuid
  post_time: timestamptz
  remote_youtube_video_id: String
  title: String
  updated_at: timestamptz
  youtube_channel_id: uuid
}

"""aggregate min on columns"""
type youtube_videos_min_fields {
  created_at: timestamptz
  id: uuid
  post_time: timestamptz
  remote_youtube_video_id: String
  title: String
  updated_at: timestamptz
  youtube_channel_id: uuid
}

"""
response of any mutation on the table "youtube_videos"
"""
type youtube_videos_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [youtube_videos!]!
}

"""
input type for inserting object relation for remote table "youtube_videos"
"""
input youtube_videos_obj_rel_insert_input {
  data: youtube_videos_insert_input!

  """upsert condition"""
  on_conflict: youtube_videos_on_conflict
}

"""
on_conflict condition type for table "youtube_videos"
"""
input youtube_videos_on_conflict {
  constraint: youtube_videos_constraint!
  update_columns: [youtube_videos_update_column!]! = []
  where: youtube_videos_bool_exp
}

"""Ordering options when selecting data from "youtube_videos"."""
input youtube_videos_order_by {
  created_at: order_by
  id: order_by
  is_premiere: order_by
  post_time: order_by
  program_live_archives_aggregate: program_live_archives_aggregate_order_by
  remote_youtube_video_id: order_by
  title: order_by
  updated_at: order_by
  youtube_channel: youtube_channels_order_by
  youtube_channel_id: order_by
}

"""primary key columns input for table: youtube_videos"""
input youtube_videos_pk_columns_input {
  id: uuid!
}

"""
select columns of table "youtube_videos"
"""
enum youtube_videos_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  is_premiere

  """column name"""
  post_time

  """column name"""
  remote_youtube_video_id

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  youtube_channel_id
}

"""
input type for updating data in table "youtube_videos"
"""
input youtube_videos_set_input {
  created_at: timestamptz
  id: uuid
  is_premiere: Boolean
  post_time: timestamptz
  remote_youtube_video_id: String
  title: String
  updated_at: timestamptz
  youtube_channel_id: uuid
}

"""
Streaming cursor of the table "youtube_videos"
"""
input youtube_videos_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: youtube_videos_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input youtube_videos_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  is_premiere: Boolean
  post_time: timestamptz
  remote_youtube_video_id: String
  title: String
  updated_at: timestamptz
  youtube_channel_id: uuid
}

"""
update columns of table "youtube_videos"
"""
enum youtube_videos_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  is_premiere

  """column name"""
  post_time

  """column name"""
  remote_youtube_video_id

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  youtube_channel_id
}

input youtube_videos_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: youtube_videos_set_input

  """filter the rows which have to be updated"""
  where: youtube_videos_bool_exp!
}

